<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[初心]]></title>
  <link href="http://dande618.github.com/atom.xml" rel="self"/>
  <link href="http://dande618.github.com/"/>
  <updated>2013-02-28T21:37:14+08:00</updated>
  <id>http://dande618.github.com/</id>
  <author>
    <name><![CDATA[dande618]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android使用淘宝开放平台API]]></title>
    <link href="http://dande618.github.com/blog/2013/02/28/TOP/"/>
    <updated>2013-02-28T22:22:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/02/28/TOP</id>
    <content type="html"><![CDATA[<p>淘宝开放平台：<a href="http://open.taobao.com/index.htm">http://open.taobao.com/index.htm</a></p>

<!-- more -->


<p>API在线文档：<a href="http://open.taobao.com/doc/category_list.htm?spm=0.0.0.0.Zt7VwY&amp;id=102">http://open.taobao.com/doc/category_list.htm?spm=0.0.0.0.Zt7VwY&amp;id=102</a></p>

<p>API在线测试工具：<a href="http://api.taobao.com/apitools/apiTools.htm">http://api.taobao.com/apitools/apiTools.htm</a></p>

<p>android环境搭建：见安卓SDK内的文档</p>

<h3>使用REST API</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">TopParameters</span> <span class="n">params</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TopParameters</span><span class="o">();</span>
</span><span class='line'><span class="n">params</span><span class="o">.</span><span class="na">setMethod</span><span class="o">(</span><span class="s">&quot;taobao.taobaoke.items.get&quot;</span><span class="o">);</span><span class="c1">//调用的API</span>
</span><span class='line'><span class="n">params</span><span class="o">.</span><span class="na">addFields</span><span class="o">(</span><span class="s">&quot;pic_url&quot;</span><span class="o">,</span> <span class="s">&quot;title&quot;</span><span class="o">);</span><span class="c1">//返回参数</span>
</span><span class='line'><span class="n">params</span><span class="o">.</span><span class="na">addParam</span><span class="o">(</span><span class="s">&quot;cid&quot;</span><span class="o">,</span> <span class="s">&quot;0&quot;</span><span class="o">);</span><span class="c1">//设定输入参数</span>
</span><span class='line'><span class="c1">//API不必要userId时，userId可为NULL，必要时要先授权</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="na">api</span><span class="o">(</span><span class="n">params</span><span class="o">,</span> <span class="n">userId</span><span class="o">,</span> <span class="k">new</span> <span class="n">TopApiListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onComplete</span><span class="o">(</span><span class="n">JSONObject</span> <span class="n">json</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="c1">//do something</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onError</span><span class="o">(</span><span class="n">ApiError</span> <span class="n">error</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="c1">//do something</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onException</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="c1">//do something</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">},</span> <span class="kc">true</span><span class="o">);</span><span class="c1">//true表示异步</span>
</span></code></pre></td></tr></table></div></figure>


<p>onComplete()接受返回的JSONObject，然后可以对JSONObject进行处理，获得所需的数据。</p>

<p>比如：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">JSONArray</span> <span class="n">items</span> <span class="o">=</span> <span class="n">json</span>
</span><span class='line'><span class="o">.</span><span class="na">getJSONObject</span><span class="o">(</span><span class="s">&quot;taobaoke_items_get_response&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">.</span><span class="na">getJSONObject</span><span class="o">(</span><span class="s">&quot;taobaoke_items&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">.</span><span class="na">getJSONArray</span><span class="o">(</span><span class="s">&quot;taobaoke_item&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">setImage</span><span class="o">(</span><span class="n">items</span><span class="o">.</span><span class="na">getJSONObject</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;pic_url&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Android中的JSON详细总结：<a href="http://shazhuzhu1.iteye.com/blog/974758">http://shazhuzhu1.iteye.com/blog/974758</a></p>

<h3>异步加载TextView</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">setText</span><span class="o">(</span><span class="kd">final</span> <span class="n">TextView</span> <span class="n">textView</span><span class="o">,</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">ret</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="n">runOnUiThread</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="n">textView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">ret</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>异步加载网络图片资源</h3>

<p>使用的类来自</p>

<p><a href="http://www.linuxidc.com/Linux/2011-12/48664.htm">http://www.linuxidc.com/Linux/2011-12/48664.htm</a></p>

<p>AsyncImageLoader.java</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[冒泡排序]]></title>
    <link href="http://dande618.github.com/blog/2013/02/27/BubbleSort/"/>
    <updated>2013-02-27T13:22:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/02/27/BubbleSort</id>
    <content type="html"><![CDATA[<h3>问题</h3>

<p>　　有一数组a，长度为n，把数组中的元素从小到大重新排列</p>

<h3>思路</h3>

<p>　　从0到n-1，两两比较数组中的元素，如果前者大于后者，则交换之(如a[0]>a[1]，则交换a[0]和a[1])。作一趟冒泡排序后，最大值就在最后一个位置a[n-1]上了。然后对余下的0到n-2个元素作第二趟冒泡排序，次最大值就去到倒数第二个位置a[n-2]上了，如此类推。</p>

<!-- more -->


<h3>JAVA代码</h3>

<p>　　传入参数：未排序的数组</p>

<p>　　返回参数：排序后的数组</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">sort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span><span class="o">[]</span> <span class="n">sortedArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">length</span><span class="o">];</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">sortedArray</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">temp</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">boolean</span> <span class="n">isSort</span><span class="o">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">isSort</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>          <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">length</span> <span class="o">-</span> <span class="n">i</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">sortedArray</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">sortedArray</span><span class="o">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">temp</span> <span class="o">=</span> <span class="n">sortedArray</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
</span><span class='line'>                  <span class="n">sortedArray</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">sortedArray</span><span class="o">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
</span><span class='line'>                  <span class="n">sortedArray</span><span class="o">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
</span><span class='line'>                  <span class="n">isSort</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(!</span><span class="n">isSort</span><span class="o">)</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span> <span class="c1">// 如果没有发生交换，则退出循环</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">sortedArray</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>　　由于JAVA数组是引用类型，为了保护原数组，开始时将原数组赋值给另一数组，对后者进行排序。</p>

<p>　　复杂度是O(n<sup>2)。</sup></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【转载】Android的线程使用来更新UI----Thread、Handler、Looper、TimerTask等]]></title>
    <link href="http://dande618.github.com/blog/2013/02/23/Runnable/"/>
    <updated>2013-02-23T21:29:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/02/23/Runnable</id>
    <content type="html"><![CDATA[<p>文章来源：<a href="http://www.cnblogs.com/playing/archive/2011/03/24/1993583.html">http://www.cnblogs.com/playing/archive/2011/03/24/1993583.html</a></p>

<!-- more -->


<h2>方法一：(java习惯，在android不推荐使用）</h2>

<p>刚刚开始接触android线程编程的时候，习惯好像java一样，试图用下面的代码解决问题</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span> <span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="n">myView</span><span class="o">.</span><span class="na">invalidate</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}).</span><span class="na">start</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以实现功能，刷新UI界面。但是这样是不行的，因为它违背了单线程模型：Android UI操作并不是线程安全的并且这些操作必须在UI线程中执行。</p>

<h2>方法二：（Thread+Handler)</h2>

<p>查阅了文档和apidemo后，发觉常用的方法是利用Handler来实现UI线程的更新的。</p>

<p>Handler来根据接收的消息，处理UI更新。Thread线程发出Handler消息，通知更新UI。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Handler</span> <span class="n">myHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleMessage</span><span class="o">(</span><span class="n">Message</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="k">switch</span> <span class="o">(</span><span class="n">msg</span><span class="o">.</span><span class="na">what</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="k">case</span> <span class="n">TestHandler</span><span class="o">.</span><span class="na">GUIUPDATEIDENTIFIER</span><span class="o">:</span>
</span><span class='line'><span class="n">myBounceView</span><span class="o">.</span><span class="na">invalidate</span><span class="o">();</span>
</span><span class='line'><span class="k">break</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">super</span><span class="o">.</span><span class="na">handleMessage</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">myThread</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="k">while</span> <span class="o">(!</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">isInterrupted</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="n">Message</span> <span class="n">message</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Message</span><span class="o">();</span>
</span><span class='line'><span class="n">message</span><span class="o">.</span><span class="na">what</span> <span class="o">=</span> <span class="n">TestHandler</span><span class="o">.</span><span class="na">GUIUPDATEIDENTIFIER</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">TestHandler</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">myHandler</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'><span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">interrupt</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上方法demo看:http://rayleung.javaeye.com/blog/411860</p>

<h2>方法三：（java习惯，不推荐）</h2>

<p>在Android平台中需要反复按周期执行方法可以使用Java上自带的TimerTask类，TimerTask相对于Thread来说对于资源消耗的更低，除了使用Android自带的AlarmManager使用Timer定时器是一种更好的解决方法。 我们需要引入import java.util.Timer; 和 import java.util.TimerTask;</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JavaTimer</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="n">Timer</span> <span class="n">timer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Timer</span><span class="o">();</span>
</span><span class='line'><span class="n">TimerTask</span> <span class="n">task</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TimerTask</span><span class="o">(){</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="n">setTitle</span><span class="o">(</span><span class="s">&quot;hear me?&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'><span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">main</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">timer</span><span class="o">.</span><span class="na">schedule</span><span class="o">(</span><span class="n">task</span><span class="o">,</span> <span class="mi">10000</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>方法四：(TimerTask + Handler)</h2>

<p>实际上这样做是不行的，这跟Android的线程安全有关！应该通过配合Handler来实现timer功能的！</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestTimer</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="n">Timer</span> <span class="n">timer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Timer</span><span class="o">();</span>
</span><span class='line'><span class="n">Handler</span> <span class="n">handler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">(){</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleMessage</span><span class="o">(</span><span class="n">Message</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="k">switch</span> <span class="o">(</span><span class="n">msg</span><span class="o">.</span><span class="na">what</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'><span class="n">setTitle</span><span class="o">(</span><span class="s">&quot;hear me?&quot;</span><span class="o">);</span>
</span><span class='line'><span class="k">break</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">super</span><span class="o">.</span><span class="na">handleMessage</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">TimerTask</span> <span class="n">task</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TimerTask</span><span class="o">(){</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="n">Message</span> <span class="n">message</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Message</span><span class="o">();</span>
</span><span class='line'><span class="n">message</span><span class="o">.</span><span class="na">what</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="n">handler</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'><span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">main</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">timer</span><span class="o">.</span><span class="na">schedule</span><span class="o">(</span><span class="n">task</span><span class="o">,</span> <span class="mi">10000</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>方法五：( Runnable + Handler.postDelayed(runnable,time) )</p>

<p>在Android里定时更新 UI，通常使用的是 java.util.Timer, java.util.TimerTask, android.os.Handler组合。实际上Handler 自身已经提供了定时的功能。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">Handler</span> <span class="n">handler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">Runnable</span> <span class="n">myRunnable</span><span class="o">=</span> <span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">run</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="n">handler</span><span class="o">.</span><span class="na">postDelayed</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="mi">1000</span><span class="o">);</span>
</span><span class='line'><span class="n">count</span><span class="o">++;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">tvCounter</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;Count: &quot;</span> <span class="o">+</span> <span class="n">count</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在其他地方调用</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">handler</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="n">myRunnable</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">handler</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="n">myRunnable</span><span class="o">,</span><span class="n">time</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>案例看：http://shaobin0604.javaeye.com/blog/515820</p>

<p>====================================================================</p>

<h2>知识点总结补充：</h2>

<p>　　很多初入Android或Java开发的新手对Thread、Looper、Handler和Message仍然比较迷惑，衍生的有HandlerThread、java.util.concurrent、Task、AsyncTask由于目前市面上的书籍等资料都没有谈到这些问题，今天就这一问题做更系统性的总结。我们创建的Service、Activity以及Broadcast均是一个主线程处理，这里我们可以理解为UI线程。但是在操作一些耗时操作时，比如I/O读写的大文件读写，数据库操作以及网络下载需要很长时间，为了不阻塞用户界面，出现ANR的响应提示窗口，这个时候我们可以考虑使用Thread线程来解决。</p>

<p>　　对于从事过J2ME开发的程序员来说Thread比较简单，直接匿名创建重写run方法，调用start方法执行即可。或者从Runnable接口继承，但对于Android平台来说UI控件都没有设计成为线程安全类型，所以需要引入一些同步的机制来使其刷新，这点Google在设计Android时倒是参考了下Win32的消息处理机制。</p>

<ol>
<li><p>对于线程中的刷新一个View为基类的界面，可以使用postInvalidate()方法在线程中来处理，其中还提供了一些重写方法比如postInvalidate(int left,int top,int right,int bottom) 来刷新一个矩形区域，以及延时执行，比如postInvalidateDelayed(long delayMilliseconds)或postInvalidateDelayed(long delayMilliseconds,int left,int top,int right,int bottom) 方法，其中第一个参数为毫秒</p></li>
<li><p>当然推荐的方法是通过一个Handler来处理这些，可以在一个线程的run方法中调用handler对象的 postMessage或sendMessage方法来实现，Android程序内部维护着一个消息队列，会轮训处理这些，如果你是Win32程序员可以很好理解这些消息处理，不过相对于Android来说没有提供 PreTranslateMessage这些干涉内部的方法。</p></li>
<li><p>Looper又是什么呢? ，其实Android中每一个Thread都跟着一个Looper，Looper可以帮助Thread维护一个消息队列，但是Looper和Handler没有什么关系，我们从开源的代码可以看到Android还提供了一个Thread继承类HanderThread可以帮助我们处理，在HandlerThread对象中可以通过getLooper方法获取一个Looper对象控制句柄，我们可以将其这个Looper对象映射到一个Handler中去来实现一个线程同步机制，Looper对象的执行需要初始化Looper.prepare方法就是昨天我们看到的问题，同时推出时还要释放资源，使用Looper.release方法。</p></li>
<li><p>Message 在Android是什么呢? 对于Android中Handler可以传递一些内容，通过Bundle对象可以封装String、Integer以及Blob二进制对象，我们通过在线程中使用Handler对象的sendEmptyMessage或sendMessage方法来传递一个Bundle对象到Handler处理器。对于Handler类提供了重写方法handleMessage(Message msg) 来判断，通过msg.what来区分每条信息。将Bundle解包来实现Handler类更新UI线程中的内容实现控件的刷新操作。相关的Handler对象有关消息发送sendXXXX相关方法如下，同时还有postXXXX相关方法，这些和Win32中的道理基本一致，一个为发送后直接返回，一个为处理后才返回 .</p></li>
<li><p>java.util.concurrent对象分析，对于过去从事Java开发的程序员不会对Concurrent对象感到陌生吧，他是JDK 1.5以后新增的重要特性作为掌上设备，我们不提倡使用该类，考虑到Android为我们已经设计好的Task机制，这里不做过多的赘述，相关原因参考下面的介绍:</p></li>
<li><p>在Android中还提供了一种有别于线程的处理方式，就是Task以及AsyncTask，从开源代码中可以看到是针对Concurrent的封装，开发人员可以方便的处理这些异步任务。</p></li>
</ol>


<p>摘录自：<a href="http://www.android123.com.cn/androidkaifa/422.html">http://www.android123.com.cn/androidkaifa/422.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二分查找演示程序]]></title>
    <link href="http://dande618.github.com/blog/2013/02/18/BinarySearchDemo/"/>
    <updated>2013-02-18T22:00:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/02/18/BinarySearchDemo</id>
    <content type="html"><![CDATA[<h2>二分查找介绍</h2>

<p>　　二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；其缺点是要求待查表为有序表，且插入删除困难。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。</p>

<!-- more -->


<h2>二分查找原理</h2>

<p>　　首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。</p>

<h2>演示程序</h2>

<ol>
<li><p>给出一组固定升序排列的数组</p></li>
<li><p>用户输入查找数字（限定0-9之间）</p></li>
<li><p>点击按键逐次查找，显示查找次数和边界值变化</p></li>
<li><p>查找完成后可复位成初始状态</p></li>
</ol>


<h2>程序代码分析</h2>

<h3>初始化</h3>

<p>　　给出数组和初始数值。其中mLow为上边界，mHigh为上边界，mMiddle为中间值。mTimes为计次变量。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">final</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">src</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span> <span class="o">};</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">mLow</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">mHigh</span> <span class="o">=</span> <span class="n">src</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">mTimes</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">mMiddle</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>设置屏幕、组件，绑定监听器</strong></p>

<p>　　批量设置textview的方法</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">TextView</span><span class="o">[]</span> <span class="n">tv</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="n">Integer</span><span class="o">[]</span> <span class="n">view</span> <span class="o">=</span> <span class="o">{</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">num0</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">num1</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">num2</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">num3</span><span class="o">,</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">num4</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">num5</span> <span class="o">};</span>
</span><span class='line'>  <span class="n">tv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TextView</span><span class="o">[</span><span class="mi">6</span><span class="o">];</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">tv</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">view</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class='line'>      <span class="n">tv</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">setText</span><span class="o">(</span><span class="n">src</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="s">&quot;&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>设置“搜索”按键的监听类</h3>

<p><strong>判断计次变量mTimes</strong></p>

<p>　　为-1时表示查询结束，按查询键不再反应。</p>

<p><strong>mLow与mHigh相比较</strong></p>

<p>　　如果mLow大于mHigh，则说明未查找到，查找结束。</p>

<p>　　如果mLow小于mHigh，则令mMiddle为二者和的一半。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="k">if</span> <span class="o">(</span><span class="n">mLow</span> <span class="o">&lt;=</span> <span class="n">mHigh</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mMiddle</span> <span class="o">=</span> <span class="o">(</span><span class="n">mLow</span> <span class="o">+</span> <span class="n">mHigh</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>mMiddle与目标查询值des相比较</strong></p>

<p>■ 相等，则找到</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">des</span> <span class="o">==</span> <span class="n">src</span><span class="o">[</span><span class="n">mMiddle</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//显示完成</span>
</span><span class='line'>  <span class="n">mTimes</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>■ mMiddle大，则目标在左侧，令mHigh为mMiddle-1</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">des</span> <span class="o">&lt;</span> <span class="n">src</span><span class="o">[</span><span class="n">mMiddle</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">mHigh</span> <span class="o">=</span> <span class="n">mMiddle</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  <span class="n">mTimes</span><span class="o">++;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>■ mMiddle小，则目标在右侧，令mLow为mMiddle+1</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">else</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">mLow</span> <span class="o">=</span> <span class="n">mMiddle</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  <span class="n">mTimes</span><span class="o">++;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>设置“复位”按键的监听类</h3>

<p>　　属性、组件文字还原至初始值</p>

<h3>其他细节备忘</h3>

<ol>
<li>查找第一次时将editview设为不可获得焦点（不可编辑），按复位时还原。</li>
</ol>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">editText</span><span class="o">.</span><span class="na">setFocusable</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>获得editview内用户输入的值</li>
</ol>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">des</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">editText</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>判断输入为空时提示</li>
</ol>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">editText</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">result</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;请输入要查询的数字&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>查找成功变色（颜色0xFF0000FF，0x是代表颜色整数的标记，FF是表示透明度，0000FF表示颜色）</li>
</ol>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">tv</span><span class="o">[</span><span class="n">mMiddle</span><span class="o">].</span><span class="na">setTextColor</span><span class="o">(</span><span class="mh">0xFF0000FF</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<hr>


<br/>


<p><img style="width:600px;" src="http://img14.poco.cn/mypoco/myphoto/20130218/21/4309479020130218213456040.png"  alt="图" /></p>

<br/>


<hr>


<br/>


<p>源码地址：<a href="https://github.com/dande618/BinarySearchDemo.git">https://github.com/dande618/BinarySearchDemo.git</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[markdown]]></title>
    <link href="http://dande618.github.com/blog/2013/02/15/markdown/"/>
    <updated>2013-02-15T19:00:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/02/15/markdown</id>
    <content type="html"><![CDATA[<div style="float:left;padding-right:20px"><img src="http://mouapp.com/Mou_128.png"/></div>


<p>Markdown是什么？</p>


<p>Markdown 是一种轻量级标记语言，创始人为John Gruber和Aaron Swartz。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。</p>


<p>摘自维基百科Markdown条。</p>


<!-- more -->


<p>Markdown有啥好处？</p>

<p>正如上文所述，Markdown具有：</p>

<ol>
<li><p>易学易用；</p></li>
<li><p>方便转换为HTML等其他格式；</p></li>
<li><p>支持广泛，便于维护；</p></li>
</ol>


<p>等等特性。</p>

<h2>以下摘自 Markdown 语法说明 (简体中文版)</h2>

<p><a href="http://wowubuntu.com/markdown/index.html">源地址</a></p>

<p>Markdown 语法:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>A First Level Header
</span><span class='line'>====================
</span><span class='line'>A Second Level Header
</span><span class='line'>---------------------
</span><span class='line'>
</span><span class='line'>Now is the time for all good men to come to
</span><span class='line'>the aid of their country. This is just a
</span><span class='line'>regular paragraph.
</span><span class='line'>
</span><span class='line'>The quick brown fox jumped over the lazy
</span><span class='line'>dog's back.
</span><span class='line'>### Header 3
</span><span class='line'>
</span><span class='line'>> This is a blockquote.
</span><span class='line'>> 
</span><span class='line'>> This is the second paragraph in the blockquote.
</span><span class='line'>>
</span><span class='line'>> ## This is an H2 in a blockquote</span></code></pre></td></tr></table></div></figure>


<p>输出 HTML 为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;h1>A First Level Header&lt;/h1>
</span><span class='line'>&lt;h2>A Second Level Header&lt;/h2>
</span><span class='line'>&lt;p>Now is the time for all good men to come to
</span><span class='line'>the aid of their country. This is just a
</span><span class='line'>regular paragraph.&lt;/p>
</span><span class='line'>&lt;p>The quick brown fox jumped over the lazy
</span><span class='line'>dog's back.&lt;/p>
</span><span class='line'>&lt;h3>Header 3&lt;/h3>
</span><span class='line'>&lt;blockquote>
</span><span class='line'>&lt;p>This is a blockquote.&lt;/p>
</span><span class='line'>&lt;p>This is the second paragraph in the blockquote.&lt;/p>
</span><span class='line'>&lt;h2>This is an H2 in a blockquote&lt;/h2>
</span><span class='line'>&lt;/blockquote></span></code></pre></td></tr></table></div></figure>


<h2>修辞和强调</h2>

<p>Markdown 使用星号和底线来标记需要强调的区段。</p>

<p>Markdown 语法:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Some of these words *are emphasized*.
</span><span class='line'>Some of these words _are emphasized also_.
</span><span class='line'>Use two asterisks for **strong emphasis**.
</span><span class='line'>Or, if you prefer, __use two underscores instead__.</span></code></pre></td></tr></table></div></figure>


<p>输出 HTML 为:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;p>Some of these words &lt;em>are emphasized&lt;/em>.
</span><span class='line'>Some of these words &lt;em>are emphasized also&lt;/em>.&lt;/p>
</span><span class='line'>&lt;p>Use two asterisks for &lt;strong>strong emphasis&lt;/strong>.
</span><span class='line'>Or, if you prefer, &lt;strong>use two underscores instead&lt;/strong>.&lt;/p></span></code></pre></td></tr></table></div></figure>


<h2>列表</h2>

<p>无序列表使用星号、加号和减号来做为列表的项目标记，这些符号是都可以使用的，使用星号：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* Candy.
</span><span class='line'>* Gum.
</span><span class='line'>* Booze.</span></code></pre></td></tr></table></div></figure>


<p>有序的列表则是使用一般的数字接着一个英文句点作为项目标记：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. Red
</span><span class='line'>2. Green
</span><span class='line'>3. Blue</span></code></pre></td></tr></table></div></figure>


<h2>链接</h2>

<p>Markdown 支援两种形式的链接语法： 行内 和 参考 两种形式，两种都是使用角括号来把文字转成连结。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>This is an [example link](http://example.com/ "With a Title").</span></code></pre></td></tr></table></div></figure>


<p>参考形式的链接让你可以为链接定一个名称，之后你可以在文件的其他地方定义该链接的内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>I get 10 times more traffic from [Google][1] than from
</span><span class='line'>[Yahoo][2] or [MSN][3].
</span><span class='line'>
</span><span class='line'>[1]: http://google.com/ "Google"
</span><span class='line'>[2]: http://search.yahoo.com/ "Yahoo Search"
</span><span class='line'>[3]: http://search.msn.com/ "MSN Search"</span></code></pre></td></tr></table></div></figure>


<h2>自动链接</h2>

<p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;http://example.com/></span></code></pre></td></tr></table></div></figure>


<p>Markdown 会转为：</p>

<h2>图片</h2>

<p>图片的语法和链接很像。</p>

<p>行内形式（title 是选择性的）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>![alt text](/path/to/img.jpg "Title")</span></code></pre></td></tr></table></div></figure>


<p>参考形式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>![alt text][id]
</span><span class='line'>[id]: /path/to/img.jpg "Title"</span></code></pre></td></tr></table></div></figure>


<h2>区块引用 Blockquotes</h2>

<p>Markdown 标记区块引用是使用类似 email 中用 > 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 > ：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
</span><span class='line'>> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
</span><span class='line'>> Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
</span><span class='line'>> 
</span><span class='line'>> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
</span><span class='line'>> id sem consectetuer libero luctus adipiscing.</span></code></pre></td></tr></table></div></figure>


<h2>分隔线</h2>

<p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* * *
</span><span class='line'>
</span><span class='line'>***
</span><span class='line'>
</span><span class='line'>*****
</span><span class='line'>
</span><span class='line'>- - -
</span><span class='line'>
</span><span class='line'>---------------------------------------</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[正则表达式]]></title>
    <link href="http://dande618.github.com/blog/2013/02/15/regex/"/>
    <updated>2013-02-15T16:00:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/02/15/regex</id>
    <content type="html"><![CDATA[<p>　　在计算机科学中，是指一个用来描述或者匹配一系列符合某个句法规则的字符串的单个字符串。在很多文本编辑器或其他工具里，正则表达式通常被用来检索和/或替换那些符合某个模式的文本内容。许多程序设计语言都支持利用正则表达式进行字符串操作。</p></p>

<br/>


<!-- more -->


<table class="mytable"><tr><td class="mytable">元字符 
</td><td class="mytable">描述
</td></tr><tr><td class="mytable">\
</td><td class="mytableb">将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“\n”匹配字符“n”。“&#92;n”匹配一个换行符。序列“&#92;”匹配“\”而“\(”则匹配“(”。
</td></tr><tr><td class="mytable">^
</td><td class="mytableb">匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“\n”或“\r”之后的位置。
</td></tr><tr><td class="mytable">$
</td><td class="mytableb">匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“\n”或“\r”之前的位置。
</td></tr><tr><td class="mytable">*
</td><td class="mytableb">匹配前面的子表达式零次或多次。例如，zo*能匹配“z”以及“zoo”。*等价于{0,}。
</td></tr><tr><td class="mytable">+
</td><td class="mytableb">匹配前面的子表达式一次或多次。例如，“zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}。
</td></tr><tr><td class="mytable">?
</td><td class="mytableb">匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“does”或“does”中的“do”。?等价于{0,1}。
</td></tr><tr><td class="mytable">{n}
</td><td class="mytableb">n是一个非负整数。匹配确定的n次。例如，“o{2}”不能匹配“Bob”中的“o”，但是能匹配“food”中的两个o。
</td></tr><tr><td class="mytable">{n,}
</td><td class="mytableb">n是一个非负整数。至少匹配n次。例如，“o{2,}”不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。“o{1,}”等价于“o+”。“o{0,}”则等价于“o*”。
</td></tr><tr><td class="mytable">{n,m}
</td><td class="mytableb">m和n均为非负整数，其中n&lt;=m。最少匹配n次且最多匹配m次。例如，“o{1,3}”将匹配“fooooood”中的前三个o。“o{0,1}”等价于“o?”。请注意在逗号和两个数之间不能有空格。
</td></tr><tr><td class="mytable">?
</td><td class="mytableb">当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“oooo”，“o+?”将匹配单个“o”，而“o+”将匹配所有“o”。
</td></tr><tr><td class="mytable">.点
</td><td class="mytableb">匹配除“\n”之外的任何单个字符。要匹配包括“\n”在内的任何字符，请使用像“&#91;\s\S&#93;”的模式。
</td></tr><tr><td class="mytable">(pattern)
</td><td class="mytableb">匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“\(”或“\)”。
</td></tr><tr><td class="mytable">(?:pattern)
</td><td class="mytableb">匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“(|)”来组合一个模式的各个部分是很有用。例如“industr(?:y|ies)”就是一个比“industry|industries”更简略的表达式。
</td></tr><tr><td class="mytable">(?=pattern)
</td><td class="mytableb">正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“Windows(?=95|98|NT|2000)”能匹配“Windows2000”中的“Windows”，但不能匹配“Windows3.1”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。
</td></tr><tr><td class="mytable">(?!pattern)
</td><td class="mytableb">正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“Windows(?!95|98|NT|2000)”能匹配“Windows3.1”中的“Windows”，但不能匹配“Windows2000”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。
</td></tr><tr><td class="mytable">(?&lt;=pattern)
</td><td class="mytableb">反向肯定预查，与正向肯定预查类似，只是方向相反。例如，“(?&lt;=95|98|NT|2000)Windows”能匹配“2000Windows”中的“Windows”，但不能匹配“3.1Windows”中的“Windows”。
</td></tr><tr><td class="mytable">(?&lt;!pattern)
</td><td class="mytableb">反向否定预查，与正向否定预查类似，只是方向相反。例如“(?&lt;!95|98|NT|2000)Windows”能匹配“3.1Windows”中的“Windows”，但不能匹配“2000Windows”中的“Windows”。
</td></tr><tr><td class="mytable">x|y
</td><td class="mytableb">匹配x或y。例如，“z|food”能匹配“z”或“food”。“(z|f)ood”则匹配“zood”或“food”。
</td></tr><tr><td class="mytable">&#91;xyz&#93;
</td><td class="mytableb">字符集合。匹配所包含的任意一个字符。例如，“&#91;abc&#93;”可以匹配“plain”中的“a”。
</td></tr><tr><td class="mytable">&#91;^xyz&#93;
</td><td class="mytableb">负值字符集合。匹配未包含的任意字符。例如，“&#91;^abc&#93;”可以匹配“plain”中的“plin”。
</td></tr><tr><td class="mytable">&#91;a-z&#93;
</td><td class="mytableb">字符范围。匹配指定范围内的任意字符。例如，“&#91;a-z&#93;”可以匹配“a”到“z”范围内的任意小写字母字符。
</td></tr><tr><td class="mytable">&#91;^a-z&#93;
</td><td class="mytableb">负值字符范围。匹配任何不在指定范围内的任意字符。例如，“&#91;^a-z&#93;”可以匹配任何不在“a”到“z”范围内的任意字符。
</td></tr><tr><td class="mytable">\b
</td><td class="mytableb">匹配一个单词边界，也就是指单词和空格间的位置。例如，“er\b”可以匹配“never”中的“er”，但不能匹配“verb”中的“er”。
</td></tr><tr><td class="mytable">\B
</td><td class="mytableb">匹配非单词边界。“er\B”能匹配“verb”中的“er”，但不能匹配“never”中的“er”。
</td></tr><tr><td class="mytable">\cx
</td><td class="mytableb">匹配由x指明的控制字符。例如，\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“c”字符。
</td></tr><tr><td class="mytable">\d
</td><td class="mytableb">匹配一个数字字符。等价于&#91;0-9&#93;。
</td></tr><tr><td class="mytable">\D
</td><td class="mytableb">匹配一个非数字字符。等价于&#91;^0-9&#93;。
</td></tr><tr><td class="mytable">\f
</td><td class="mytableb">匹配一个换页符。等价于\x0c和\cL。
</td></tr><tr><td class="mytable">\n
</td><td class="mytableb">匹配一个换行符。等价于\x0a和\cJ。
</td></tr><tr><td class="mytable">\r
</td><td class="mytableb">匹配一个回车符。等价于\x0d和\cM。
</td></tr><tr><td class="mytable">\s
</td><td class="mytableb">匹配任何空白字符，包括空格、制表符、换页符等等。等价于&#91; \f\n\r\t\v&#93;。
</td></tr><tr><td class="mytable">\S
</td><td class="mytableb">匹配任何非空白字符。等价于&#91;^ \f\n\r\t\v&#93;。
</td></tr><tr><td class="mytable">\t
</td><td class="mytableb">匹配一个制表符。等价于\x09和\cI。
</td></tr><tr><td class="mytable">\v
</td><td class="mytableb">匹配一个垂直制表符。等价于\x0b和\cK。
</td></tr><tr><td class="mytable">\w
</td><td class="mytableb">匹配包括下划线的任何单词字符。等价于“&#91;A-Za-z0-9_&#93;”。
</td></tr><tr><td class="mytable">\W
</td><td class="mytableb">匹配任何非单词字符。等价于“&#91;^A-Za-z0-9_&#93;”。
</td></tr><tr><td class="mytable">\xn
</td><td class="mytableb">匹配n，其中n为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“\x41”匹配“A”。“\x041”则等价于“\x04&amp;1”。正则表达式中可以使用ASCII编码。
</td></tr><tr><td class="mytable">\num
</td><td class="mytableb">匹配num，其中num是一个正整数。对所获取的匹配的引用。例如，“(.)\1”匹配两个连续的相同字符。
</td></tr><tr><td class="mytable">\n
</td><td class="mytableb">标识一个八进制转义值或一个向后引用。如果\n之前至少n个获取的子表达式，则n为向后引用。否则，如果n为八进制数字（0-7），则n为一个八进制转义值。
</td></tr><tr><td class="mytable">\nm
</td><td class="mytableb">标识一个八进制转义值或一个向后引用。如果\nm之前至少有nm个获得子表达式，则nm为向后引用。如果\nm之前至少有n个获取，则n为一个后跟文字m的向后引用。如果前面的条件都不满足，若n和m均为八进制数字（0-7），则\nm将匹配八进制转义值nm。
</td></tr><tr><td class="mytable">\nml
</td><td class="mytableb">如果n为八进制数字（0-3），且m和l均为八进制数字（0-7），则匹配八进制转义值nml。
</td></tr><tr><td class="mytable">\un
</td><td class="mytableb">匹配n，其中n是一个用四个十六进制数字表示的Unicode字符。例如，\u00A9匹配版权符号（&copy;）。
</td></tr></table>


<h2>使用emeditor宏批处理</h2>

<p>例
1. 添加菜单项</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if (document.selection.isempty)
</span><span class='line'>
</span><span class='line'>  nFlags=eeFindNext | eeReplaceAll | eeFindReplaceRegExp;
</span><span class='line'>
</span><span class='line'>else 
</span><span class='line'>
</span><span class='line'>  nFlags=eeFindNext | eeReplaceSelOnly | eeReplaceAll | eeFindReplaceRegExp;
</span><span class='line'>
</span><span class='line'>menu= CreatePopupMenu();
</span><span class='line'>
</span><span class='line'>menu.Add("使用正则表达式提取字符串",1);
</span><span class='line'>
</span><span class='line'>result = menu.Track( 0 );
</span><span class='line'>
</span><span class='line'>if (result>40) nFlags=nFlags=eeFindNext | eeReplaceAll | eeFindReplaceRegExp;
</span><span class='line'>
</span><span class='line'>switch(result){
</span><span class='line'>
</span><span class='line'>case 1: //内容
</span><span class='line'>
</span><span class='line'>      break;
</span><span class='line'>
</span><span class='line'>default:
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>2.删除段首尾空格</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>document.selection.Replace("^\\s*","",eeFindNext | eeReplaceAll | eeFindReplaceRegExp);
</span><span class='line'>
</span><span class='line'>document.selection.Replace("\\s*$","",eeFindNext | eeReplaceAll | eeFindReplaceRegExp);</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[认识Intent]]></title>
    <link href="http://dande618.github.com/blog/2013/01/29/intent/"/>
    <updated>2013-01-29T20:29:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/01/29/intent</id>
    <content type="html"><![CDATA[<p>　　Intent：意图</p>

<p>　　当一个Activity需要启动另一个Activity时，程序并没有直接告诉系统要启动那个Activity，而是通过Intent来表达自己的意图：需要启动哪个Activity。</p>

<!-- more -->


<p>　　Intent封装Android应用程序需要启动某个组件的“意图”。不仅如此，Intent还是应用程序组件之间通讯的重要媒介。两个Activity可以把需要交换的数据封装成Bundle对象，然后使用Intent来携带Bundle对象，这样就实现了两个Activity之间的数据交换。</p>
Android的应用程序包含三种重要的组件：Activity、Service、BroadcastReceiver，应用程序采用了一致的方式来启动他们——都是依靠Intent来进行启动的，Intent就封装了程序想要启动程序的意图，不仅如此，Intent还可用于与被启动组件交换信息。</p>

<p>　　通过点击按钮打开另一个Activity</p></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">button</span><span class="o">.</span><span class="na">setOnClickListener</span>
</span><span class='line'>  <span class="o">(</span>
</span><span class='line'>   <span class="k">new</span> <span class="nf">OnClickListener</span><span class="o">()</span>
</span><span class='line'>   <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">Intent</span> <span class="n">intent</span><span class="o">=</span><span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
</span><span class='line'>     <span class="n">intent</span><span class="o">.</span><span class="na">setClass</span><span class="o">(</span><span class="n">MainActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="n">SecondActivity</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>     <span class="n">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>  <span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[认识Bundle]]></title>
    <link href="http://dande618.github.com/blog/2013/01/29/Bundle/"/>
    <updated>2013-01-29T15:22:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/01/29/Bundle</id>
    <content type="html"><![CDATA[<p>　　用于不同Activity之间的数据传递</p>

<!-- more -->


<h2>重要方法</h2>


<p class="para">clear()：清除此Bundle映射中的所有保存的数据。</p>


<p class="para">clone()：克隆当前Bundle</p>


<p class="para">containsKey(String key)：返回指定key的值</p>


<p class="para">getString(String key)：返回指定key的字符</p>


<p class="para">hasFileDescriptors()：指示是否包含任何捆绑打包文件描述符</p>


<p class="para">isEmpty()：如果这个捆绑映射为空，则返回true</p>


<p class="para">putString(String key, String value):插入一个给定key的字符串值</p>


<p class="para">readFromParcel(Parcel parcel)：读取这个parcel的内容</p>


<p class="para">remove(String key)：移除指定key的值</p>


<p class="para">writeToParcel(Parcel parcel, int flags)：写入这个parcel的内容</p>


<h2>Android Bundle类</h2>


<p></p>

<p class="laiyuan">[转载]　<a href="http://blog.csdn.net/randyjiawenjie/article/details/6651437">文章出处</a></p>


<p class="para">根据google官方的文档（http://developer.android.com/reference/android/os/Bundle.html）</p>


<p class="para">Bundle类是一个key-value对，“A mapping from String values to various Parcelable types.”</p>


<p class="para">类继承关系：</p>


<p class="dk">java.lang.Object</p>


<p class="dk">android.os.Bundle</p>


<p class="para">Bundle类是一个final类：</p>


<p class="dk">public final class</p>


<p class="dk">Bundle</p>


<p class="dk">extends Objectimplements Parcelable Cloneable</p>


<p class="para">两个activity之间的通讯可以通过bundle类来实现，做法就是：</p>


<p class="para">（1）新建一个bundle类</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Bundle</span> <span class="n">mBundle</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Bundle</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>（2）bundle类中加入数据（key -value的形式，另一个activity里面取数据的时候，就要用到key，找出对应的value）</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mBundle</span><span class="o">.</span><span class="na">putString</span><span class="o">(</span><span class="s">&quot;Data&quot;</span><span class="o">,</span> <span class="s">&quot;data from TestBundle&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>(3)新建一个intent对象，并将该bundle加入这个intent对象</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
</span><span class='line'><span class="n">intent</span><span class="o">.</span><span class="na">setClass</span><span class="o">(</span><span class="n">TestBundle</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="n">Target</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">intent</span><span class="o">.</span><span class="na">putExtras</span><span class="o">(</span><span class="n">mBundle</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>




<p class="para">完整代码见原文</p>


<p>————————</p>

<p>Activity1：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">btn</span><span class="o">.</span><span class="na">setOnClickListener</span>
</span><span class='line'>        <span class="o">(</span>
</span><span class='line'>         <span class="k">new</span> <span class="nf">OnClickListener</span><span class="o">()</span>
</span><span class='line'>         <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">String</span> <span class="n">str</span><span class="o">=</span><span class="n">ev</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">().</span><span class="na">trim</span><span class="o">();</span>
</span><span class='line'>     <span class="n">Intent</span> <span class="n">intent</span><span class="o">=</span><span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
</span><span class='line'>     <span class="n">intent</span><span class="o">.</span><span class="na">setClass</span><span class="o">(</span><span class="n">Activity1</span><span class="o">.</span><span class="na">this</span><span class="o">,</span><span class="n">Activity2</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>     <span class="n">Bundle</span> <span class="n">bundle</span><span class="o">=</span><span class="k">new</span> <span class="n">Bundle</span><span class="o">();</span>
</span><span class='line'>     <span class="n">bundle</span><span class="o">.</span><span class="na">putString</span><span class="o">(</span><span class="s">&quot;str&quot;</span><span class="o">,</span> <span class="n">str</span><span class="o">);</span>
</span><span class='line'>     <span class="n">intent</span><span class="o">.</span><span class="na">putExtras</span><span class="o">(</span><span class="n">bundle</span><span class="o">);</span><span class="c1">//绑定信息</span>
</span><span class='line'>     <span class="n">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span><span class="c1">//启动Activity</span>
</span><span class='line'>     <span class="n">Activity1</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">finish</span><span class="o">();</span><span class="c1">//关闭Activity</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Activity2：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span>
</span><span class='line'> <span class="o">{</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>  <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">anthor</span><span class="o">);</span>
</span><span class='line'>  <span class="n">TextView</span> <span class="n">tv</span><span class="o">=(</span><span class="n">TextView</span><span class="o">)</span><span class="k">this</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">TextView1</span><span class="o">);</span><span class="c1">//显示的信息</span>
</span><span class='line'>  <span class="n">Button</span> <span class="n">button</span><span class="o">=(</span><span class="n">Button</span><span class="o">)</span><span class="k">this</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">anthorButton</span><span class="o">);</span><span class="c1">//返回按钮</span>
</span><span class='line'>  <span class="n">Bundle</span> <span class="n">bundle</span><span class="o">=</span><span class="k">this</span><span class="o">.</span><span class="na">getIntent</span><span class="o">().</span><span class="na">getExtras</span><span class="o">();</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">str</span><span class="o">=</span><span class="n">bundle</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;str&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">StringBuilder</span> <span class="n">sb</span><span class="o">=</span><span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'>  <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;您填写的信息为：&quot;</span><span class="o">+</span><span class="n">str</span><span class="o">+</span><span class="s">&quot;\n&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">tv</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">trim</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">button</span><span class="o">.</span><span class="na">setOnClickListener</span>
</span><span class='line'>  <span class="o">(</span>
</span><span class='line'>   <span class="k">new</span> <span class="nf">OnClickListener</span><span class="o">()</span>
</span><span class='line'>   <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">Intent</span> <span class="n">intent</span><span class="o">=</span><span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
</span><span class='line'>     <span class="n">intent</span><span class="o">.</span><span class="na">setClass</span><span class="o">(</span><span class="n">Activity2</span><span class="o">.</span><span class="na">this</span><span class="o">,</span><span class="n">Activity1</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>     <span class="n">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span><span class='line'>     <span class="n">AnotherActivity</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">finish</span><span class="o">();</span><span class="c1">//关闭Activity</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>  <span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[认识Handler]]></title>
    <link href="http://dande618.github.com/blog/2013/01/28/handler/"/>
    <updated>2013-01-28T11:36:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/01/28/handler</id>
    <content type="html"><![CDATA[<p>　　主要接受子线程发送的数据, 并用此数据配合主线程更新UI。</p>

<p>　　主要是为了解决Android应用的多线程问题。Android平台不允许Activity新启动的线程访问该Activity里的界面组件，这样就会导致新启动的线程无法动态改变界面组件的属性值。</p>

<!-- more -->


<p><strong>Handler类的主要作用有两个：</strong></p>

<ol>
<li><p>在新启动的线程中发送消息。</p></li>
<li><p>在主线程中获取、处理消息。</p></li>
</ol>


<p>　　通过回调的方式来实现，重写Handler类中处理消息的方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[事件处理]]></title>
    <link href="http://dande618.github.com/blog/2013/01/26/listener/"/>
    <updated>2013-01-26T10:27:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/01/26/listener</id>
    <content type="html"><![CDATA[<p>Android的时间处理机制包括</p>

<ul>
    <li>基于监听的事件处理</li>
    <li>基于回调的事件处理</li>
</ul>


<!-- more -->


<p>基于监听的事件处理：为界面组件绑定监听器。
基于回调的事件处理：重写组件（Activity）特定的回调方法。</p>

<h2>基于监听的事件处理</h2>


<ol>
    <li>获取被监听的对象（即界面组件）</li>
    <li>实现事件监听器（即一个实现XxxListener接口的类）</li>
    <li>调用事件源的setXxxListener(XxxListener)方法将事件监听器注册给被监听的对象</li>
</ol>


<p>View类的接口有</p>

<ul>
    <li>View.OnClickListener</li>
    <li>View.OnCreateContextMenuLister</li>
    <li>View.OnFocusChangeListener</li>
    <li>View.OnKeyListener</li>
    <li>View.OnLongClickListener</li>
    <li>View.OnTouchListener</li>
</ul>


<p>实现事件监听器的形式</p>

<ul>
    <li>内部类形式</li>
    <li>外部类形式</li>
    <li>Activity本身作为事件监听器类</li>
    <li>匿名内部类</li>（常用）
    <li>直接绑定到标签</li>
</ul>


<h2>基于回调的事件处理</h2>


<p>以View类为例，一些事件处理的回调方法</p>

<ul>
    <li>boolean onKeyDown(int keyCode,KeyEvent event)</li>
    <li>boolean onKeyLongPress(int keyCode,KeyEvent event)</li>
    <li>boolean onKeyShortcut(int keyCode,KeyEvent event)</li>
    <li>boolean onKeyUp(int keyCode,KeyEvent event)</li>
    <li>boolean onTouchEvent(MotionEvent event)</li>
    <li>boolean onTrackballEvent(MotionEvent event)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SimpleAdapter]]></title>
    <link href="http://dande618.github.com/blog/2013/01/11/adapter/"/>
    <updated>2013-01-11T10:27:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/01/11/adapter</id>
    <content type="html"><![CDATA[<p>　　Android Adapter 是将数据绑定到UI 界面上的桥接类。 Adapter负责创建和显示每个项目的子View和提供对下层数据的访问。支持Adapter绑定的UI控件必须扩展Adapter View抽象类。创建自己的继承自AdapterView的控件和创建新的Adapter类来绑定它们是可能的。</p>

<!-- more -->


<p><img src="http://img14.poco.cn/mypoco/myphoto/20130111/09/430947902013011109012106.png" width="610">
<img src="http://img14.poco.cn/mypoco/myphoto/20130111/09/4309479020130111090229016.jpg" width="610"></p>

<h2>ListView和ListAdapter</h2>


<p class="laiyuan">[转载]<a href="http://blog.sina.com.cn/s/blog_7db304660100x2f0.html">文章出处</a></p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//新建一个ListView,也就是新建一个列表，在新建一个组件是会将一个Content传递给构造函数</span>
</span><span class='line'><span class="n">listView</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListView</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="c1">// 将ListView和ArrayAdapter进行绑定，listview会把ArrayAdapter里面的数据显示出来</span>
</span><span class='line'><span class="c1">// ArrayAdapter的第一个参数是Context，即上下文的引用</span>
</span><span class='line'><span class="c1">// 第二个参数为一个在R文件里定义的Layout，不过是系统的R文件</span>
</span><span class='line'><span class="c1">// simple_list_item_single_choice表明ListView里边的每一项都只有一个TextView</span>
</span><span class='line'><span class="c1">// 第三个参数为一个数组</span>
</span><span class='line'><span class="n">listView</span><span class="o">.</span><span class="na">setAdapter</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayAdapter</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;(</span><span class="k">this</span><span class="o">,</span>
</span><span class='line'><span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">simple_list_item_single_choice</span><span class="o">,</span> <span class="n">data</span><span class="o">));</span>
</span><span class='line'><span class="n">listView</span><span class="o">.</span><span class="na">setItemsCanFocus</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'><span class="n">listView</span><span class="o">.</span><span class="na">setChoiceMode</span><span class="o">(</span><span class="n">ListView</span><span class="o">.</span><span class="na">CHOICE_MODE_MULTIPLE</span><span class="o">);</span>
</span><span class='line'><span class="c1">// 将listView内容直接进行显示</span>
</span><span class='line'><span class="n">setContentView</span><span class="o">(</span><span class="n">listView</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>




<h3>什么是ListAdapter?</h3>


<p class="para">ListAdapter继承于Adapter，它是ListView和其里面数据的适配器。也就是要让一个ListView显示出来需要三个东西：</p>


<ol>
    <li>ListView (需要被显示的列表)。</li>
    <li>Data, 和ListView绑定的数据，一般是一个Cursor或者一个字符串数组。</li>
    <li>ListAdapter,是data和ListView的桥梁，起一个适配器的作用。</li>
</ol>


<h3>什么是ArrayAdapter?</h3>


<p class="para">ArrayAdapter是ListAdapter的一个直接子类，意思是数组适配器。</p>


<p class="para">它的作用就是一个数组和ListView之间的桥梁。它将数组里定义的数据一一对应的显示在ListView里，通常有ArrayAdapter进行适配的ListView每一项通常只有一个TextView，而TextView里面显示的内容就是数组里面的对象调用toString()方法后生成的字符串。</p>


<h3>SimpleAdapter</h3>


<p class="para">SimpleAdapter也是ListAdapter的直接子类。通过SimpleAdapter可以让ListView当中的每一项里边的内容更加个性化。通常将ListView中某项的布局信息写在一个xml的布局文件当中。这个布局文件通过R.layout.file获得。</p>


<p class="para">ArrayAdapter的作用是数组和ListView间的桥梁；而SimpleAdapter的作用是ArrayList和ListView间的桥梁。</p>


<p class="para">注意，这个ArrayList里面的每一项都是一个Map<String,?>类型。ArrayList当中的每一项Map对象都和ListView当中的一项进行数据绑定和一一对应。</p>


<h3>Android系统默认的布局方式</h3>


<p class="para">Android.R.layout_simple_list_item_1, 每一项只有一个TextView.</p>


<p class="para">Android.R.layout_simple_list_item_2, 每一项只有两个TextView.</p>


<p class="para">Android.R.layout_simple_list_item_single_choice, 每一项有一个TextView，但是这一项可以被选择。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[构造函数]]></title>
    <link href="http://dande618.github.com/blog/2012/12/31/gouzao/"/>
    <updated>2012-12-31T17:33:00+08:00</updated>
    <id>http://dande618.github.com/blog/2012/12/31/gouzao</id>
    <content type="html"><![CDATA[<p>　　构造函数（constructor）是人们完成结构化程序设计的一个新概念。在OO设计语言中，构造函数就是与类名同名而且没有返回类型的方法。</p>

<!-- more -->


<p>　　例如，Cabbie类的构造函数大致是：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">Cabbie</span><span class="o">(){</span>
</span><span class='line'><span class="err">　　</span><span class="c1">//</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>　　编译器会识别出这个方法名与类名相同，从而认为这个方法是一个构造函数。</p>

<blockquote><p>构造函数没有返回值。如果为方法提供了一个返回值，编译器就不会把它作为一个构造函数。</p></blockquote>

<h2>何时调用构造函数</h2>

<p>　　创建一个新对象时，首先要做到事情之一就是调用构造函数。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Cabbie</span> <span class="n">myCabbie</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Cabbie</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>　　会实例化一个Cabbie对象，并调用Cabbie方法。</p>

<h2>构造函数中有什么</h2>

<p>　　构造函数中的代码应当将新创建的对象设置为其稳定、安全的初始状态。</p>

<p>　　初始化属性是构造函数完成的一个常见功能。</p>

<h2>默认构造函数</h2>

<p>　　至少存在一个构造函数，不论你自己是否编写了构造函数。如果你没有提供构造函数，系统也会为你提供一个默认的构造函数。例如，如果没有为Cabbie类提供一个构造函数，就会插入一下默认构造函数：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">Cabbie</span><span class="o">(){</span>
</span><span class='line'><span class="err">　　</span><span class="kd">super</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>　　如果没有显式地继承另一个类，Object类就会成为父类。如果类中有属性，好的实践往往是初始化这些属性。</p>

<blockquote><p>提供一个构造函数</p>

<p>一般经验是，总是应该提供一个构造函数，即使你不打算在其中做任何事情。可以先提供一个构造函数，其中不包含任何内容，等以后再补充，使用编译器提供的默认构造函数尽管从技术上讲没什么问题，但是最好能清楚地知道你的代码到底是怎样的。</p></blockquote>

<h2>重载构造函数</h2>

<p>　　有时可能希望传入一个初始化参数，这成为重载一个方法。</p>

<p>　　重载适用于所有方法。重载允许程序员多次使用同一个方法名，只要每次方法的签名不同。签名由方法名和一个参数列表组成。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Count</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　</span><span class="kt">int</span> <span class="n">count</span><span class="o">;</span>
</span><span class='line'><span class="err">　　</span><span class="kd">public</span> <span class="n">Count</span><span class="o">(){</span>
</span><span class='line'><span class="err">　　　　</span><span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="err">　　</span><span class="o">}</span>
</span><span class='line'><span class="err">　　</span><span class="kd">public</span> <span class="n">Count</span> <span class="o">(</span><span class="kt">int</span> <span class="n">number</span><span class="o">){</span>
</span><span class='line'><span class="err">　　　　</span><span class="n">count</span> <span class="o">=</span> <span class="n">number</span><span class="o">;</span>
</span><span class='line'><span class="err">　　</span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>　　在JAVA和C#，返回类型不是签名的一部分。只是返回类型不同的方法会冲突。</p>

<h2>超类如何构造</h2>

<p>　　使用继承时，必须知道父类如何构造。要记住，使用继承时，会从父类继承一切。因此，必须非常清楚父类的所有数据和行为。不过，构造函数如何继承就不那么明显了。</p>

<p>　　遇到new关键字并且分配了对象后，会完成以下几个步骤。</p>

<ol>
<li><p>构造函数中首先要做的是调用该类的超类的构造函数。如果没有显式地调用超类构造函数，就会自动调用超类默认构造函数；不过可以从字节码查看这个代码。</p></li>
<li><p>然后初始化对象的各个类属性。这些属性都是类定义的属性（实例变量），而不是构造函数或其他方法中的属性（局部变量）。</p></li>
<li><p>然后执行构造函数中的其余代码。</p></li>
</ol>


<h2>构造函数的设计</h2>

<p>　　设计一个类时，好的时间是初始化所有属性。不要指望编译器来初始化属性。构造函数可以用来确保应用处于一种稳定的状态。例如，若将一个属性初始化为0，那么当想把它用作一个除法运算的除数时，可能会导致一个不稳定的应用。初始化为0并不总是最好的策略。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java动态绑定静态绑定 [转载]]]></title>
    <link href="http://dande618.github.com/blog/2012/12/29/bangding/"/>
    <updated>2012-12-29T10:01:00+08:00</updated>
    <id>http://dande618.github.com/blog/2012/12/29/bangding</id>
    <content type="html"><![CDATA[<!-- more -->


<p>　　首先是方法的参数是父类对象，传入子类对象是否可行。</p>

<p>　　然后引出Parent p = new Children();</p>

<p>　　这句代码不是很理解，google的过程中引出向上转型。</p>

<p>　　要理解向上转型又引出了动态绑定。</p>

<p>　　从动态绑定又引出了静态绑定。</p>

<h2>程序绑定的概念：</h2>

<p>　　绑定指的是一个方法的调用与方法所在的类(方法主体)关联起来。对java来说，绑定分为静态绑定和动态绑定；或者叫做前期绑定和后期绑定。</p>

<h3>静态绑定：</h3>

<p>　　在程序执行前方法已经被绑定，此时由编译器或其它连接程序实现。例如：C。</p>

<p>　　针对java简单的可以理解为程序编译期的绑定；这里特别说明一点，java当中的方法只有final，static，private和构造方法是前期绑定。</p>

<h3>动态绑定：</h3>

<p>　　后期绑定：在运行时根据具体对象的类型进行绑定。</p>

<p>　　若一种语言实现了后期绑定，同时必须提供一些机制，可在运行期间判断对象的类型，并分别调用适当的方法。也就是说，编译器此时依然不知道对象的类型，但方法调用机制能自己去调查，找到正确的方法主体。不同的语言对后期绑定的实现方法是有所区别的。但我们至少可以这样认为：它们都要在对象中安插某些特殊类型的信息。</p>

<p><strong>动态绑定的过程：</strong></p>

<ul>
<li><p>虚拟机提取对象的实际类型的方法表；</p></li>
<li><p>虚拟机搜索方法签名；</p></li>
<li><p>调用方法。</p></li>
</ul>


<h2>关于绑定相关的总结：</h2>

<p>　　在了解了三者的概念之后，很明显我们发现java属于后期绑定。在java中，几乎所有的方法都是后期绑定的，在运行时动态绑定方法属于子类还是基类。但是也有特殊，针对static方法和final方法由于不能被继承，因此在编译时就可以确定他们的值，他们是属于前期绑定的。特别说明的一点是，private声明的方法和成员变量不能被子类继承，所有的private方法都被隐式的指定为final的(由此我们也可以知道：将方法声明为final类型的一是为了防止方法被覆盖，二是为了有效的关闭java中的动态绑定)。java中的后期绑定是有JVM来实现的，我们不用去显式的声明它，而C++则不同,必须明确的声明某个方法具备后期绑定。</p>

<p>　　java当中的向上转型或者说多态是借助于动态绑定实现的，所以理解了动态绑定，也就搞定了向上转型和多态。
前面已经说了对于java当中的方法而言，除了final，static，private和构造方法是前期绑定外，其他的方法全部为动态绑定。而动态绑定的典型发生在父类和子类的转换声明之下：</p>

<p>　　比如：Parent p = new Children();</p>

<p>其具体过程细节如下：</p>

<ol>
<li><p>编译器检查对象的声明类型和方法名。假设我们调用x.f(args)方法，并且x已经被声明为C类的对象，那么编译器会列举出C类中所有的名称为f的方法和从C类的超类继承过来的f方法。</p></li>
<li><p>接下来编译器检查方法调用中提供的参数类型。如果在所有名称为f 的方法中有一个参数类型和调用提供的参数类型最为匹配，那么就调用这个方法，这个过程叫做“重载解析”。</p></li>
<li><p>当程序运行并且使用动态绑定调用方法时，虚拟机必须调用同x所指向的对象的实际类型相匹配的方法版本。假设实际类型为D(C的子类)，如果D类定义了f(String)那么该方法被调用，否则就在D的超类中搜寻方法f(String),依次类推。</p></li>
</ol>


<p>　　上面是理论，下面看几个示例（示例来自网络）：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>
</span><span class='line'><span class="n">view</span> <span class="n">plaincopy</span> <span class="n">to</span> <span class="n">clipboardprint</span><span class="o">?</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Father</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">method</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　　</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;父类方法，对象类型：&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'><span class="err">　　</span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="err">　　</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Son</span> <span class="kd">extends</span> <span class="n">Father</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　</span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　　</span> <span class="n">Father</span> <span class="n">sample</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Son</span><span class="o">();</span><span class="c1">//向上转型    </span>
</span><span class='line'><span class="err">　　　</span> <span class="n">sample</span><span class="o">.</span><span class="na">method</span><span class="o">();</span>
</span><span class='line'><span class="err">　　</span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>　　声明的是父类的引用，但是执行的过程中调用的是子类的对象，程序首先寻找子类对象的method方法，但是没有找到，于是向上转型去父类寻找。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Son</span> <span class="kd">extends</span> <span class="n">Father</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">method</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　　</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;子类方法，对象类型：&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'><span class="err">　　</span><span class="o">}</span>
</span><span class='line'><span class="err">　　</span>
</span><span class='line'><span class="err">　　</span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　　</span> <span class="n">Father</span> <span class="n">sample</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Son</span><span class="o">();</span><span class="c1">//向上转型    </span>
</span><span class='line'><span class="err">　　　</span> <span class="n">sample</span><span class="o">.</span><span class="na">method</span><span class="o">();</span>
</span><span class='line'><span class="err">　　</span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>　　由于子类重写了父类的method方法，根据上面的理论知道会去调用子类的method方法去执行，因为子类对象有method方法而没有向上转型去寻找。</p>

<p>　　前面的理论当中已经提到了java的绑定规则，由此可知，在处理java类中的成员变量时，并不是采用运行时绑定，而是一般意义上的静态绑定。所以在向上转型的情况下，对象的方法可以找到子类，而对象的属性还是父类的属性。
代码如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Father</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="err">　　</span><span class="kd">protected</span> <span class="n">String</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;父亲属性&quot;</span><span class="o">;</span>
</span><span class='line'><span class="err">　　</span>
</span><span class='line'><span class="err">　　</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">method</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　　</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;父类方法，对象类型：&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'><span class="err">　　</span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="err">　　</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Son</span> <span class="kd">extends</span> <span class="n">Father</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　</span><span class="kd">protected</span> <span class="n">String</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;儿子属性&quot;</span><span class="o">;</span>
</span><span class='line'><span class="err">　　</span>
</span><span class='line'><span class="err">　　</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">method</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　　</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;子类方法，对象类型：&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'><span class="err">　　</span><span class="o">}</span>
</span><span class='line'><span class="err">　　</span>
</span><span class='line'><span class="err">　　</span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　　</span> <span class="n">Father</span> <span class="n">sample</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Son</span><span class="o">();</span><span class="c1">//向上转型    </span>
</span><span class='line'><span class="err">　　　</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;调用的成员：&quot;</span><span class="o">+</span><span class="n">sample</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
</span><span class='line'><span class="err">　　</span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>结论，调用的成员为父亲的属性。
　　这个结果表明，子类的对象(由父类的引用handle)调用到的是父类的成员变量。所以必须明确，运行时（动态）绑定针对的范畴只是对象的方法。
　　现在试图调用子类的成员变量name，该怎么做？最简单的办法是将该成员变量封装成方法getter形式。
代码如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Father</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　</span><span class="kd">protected</span> <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;父亲属性&quot;</span><span class="o">;</span>
</span><span class='line'><span class="err">　　</span><span class="kd">public</span> <span class="n">String</span> <span class="n">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　　</span> <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'><span class="err">　　</span><span class="o">}</span>
</span><span class='line'><span class="err">　　</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">method</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　　</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;父类方法，对象类型：&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'><span class="err">　　</span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="err">　　</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Son</span> <span class="kd">extends</span> <span class="n">Father</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　</span><span class="kd">protected</span> <span class="n">String</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;儿子属性&quot;</span><span class="o">;</span>
</span><span class='line'><span class="err">　　</span><span class="kd">public</span> <span class="n">String</span> <span class="n">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　　</span> <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'><span class="err">　　</span><span class="o">}</span>
</span><span class='line'><span class="err">　　</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">method</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　　</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;子类方法，对象类型：&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'><span class="err">　　</span><span class="o">}</span>
</span><span class='line'><span class="err">　　</span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　　</span> <span class="n">Father</span> <span class="n">sample</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Son</span><span class="o">();</span><span class="c1">//向上转型    </span>
</span><span class='line'><span class="err">　　　</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;调用的成员：&quot;</span><span class="o">+</span><span class="n">sample</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'><span class="err">　　</span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果：调用的是儿子的属性</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何以对象方式思考（二）]]></title>
    <link href="http://dande618.github.com/blog/2012/12/26/haw_to2/"/>
    <updated>2012-12-26T20:01:00+08:00</updated>
    <id>http://dande618.github.com/blog/2012/12/26/haw_to2</id>
    <content type="html"><![CDATA[<p>　　ＯＯ设计的基本单元是类。ＯＯ设计所期望的最终结果是一个健壮、功能完备的对象模型，换句话说，也就是一个完备的系统。</p>

<!-- more -->


<h2>确定用户</h2>

<p>　　用户是那些真正使用系统的人。设想一个出租车的例子，压迫构建一个现实而可用的接口，要把顾客和出租司机双方都认为是用户。</p>

<h2>对象行为</h2>

<p>　　明确用户只是工作的一部分。明确用户后，必须确定对象的行为。要从所有用户的角度考虑，明确每个对象的作用以及必须要做什么才能执行。</p>

<h2>环境约束</h2>

<p>　　环境通常会限制对象能够做什么。</p>

<h2>明确公共接口</h2>

<p>　　收集到有关用户、对象行为和环境的所有信息后，需要确定每个用户的公共接口。</p>

<p><strong>考虑如何使用出租车对象：</strong></p>

<ol>
<li><p>坐进出租车。</p></li>
<li><p>告诉出租司机你要去哪里。</p></li>
<li><p>给出租司机付车费。</p></li>
<li><p>下车。</p></li>
</ol>


<p><strong>使用出租车对象需要做：</strong></p>

<ol>
<li><p>明确要去一个地方。</p></li>
<li><p>叫一辆出租车。</p></li>
<li><p>给出租司机付钱。</p></li>
</ol>


<p>　　开始时，要考虑对象如何使用，而不是它如何构建。确定最终的接口是一个迭代的过程。对于每个接口，必须确定这个接口有助于对象的操作。如果没有，就可能是不必要的。</p>

<h2>明确实现</h2>

<p>　　选择了公共接口之后，就需要明确实现。考虑类工作的具体细节。</p>

<p>　　不属于公共接口的所有部分都认为是实现。用户不会看到作为实现的任何方法，包括方法的签名（其中包括方法名和参数列表）以及方法中的具体代码。</p>

<p>　　可以有一个私有方法，由类在内部使用。所有私有方法都认为是实现的一部分，用户不会看到它，从而也无法访问私有方法。实现对用户是完全隐藏的。</p>

<p>　　从理论上讲，被认为是实现的任何部分可以改变而不影响类的用户接口。接口表示了用户如何看对象，而实现实际上是对象的具体内容。实现包含了表示对象状态的代码。</p>

<p>摘自《写给大家看的面向对象编程书》</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何以对象方式思考（一）]]></title>
    <link href="http://dande618.github.com/blog/2012/12/26/haw_to1/"/>
    <updated>2012-12-26T20:01:00+08:00</updated>
    <id>http://dande618.github.com/blog/2012/12/26/haw_to1</id>
    <content type="html"><![CDATA[<p>　　ＯＯ设计的基本单元是类。ＯＯ设计所期望的最终结果是一个健壮、功能完备的对象模型，换句话说，也就是一个完备的系统。</p>

<!-- more -->


<p>　　解决一个问题没有纯粹的对与错，同一个问题往往可能有多种不同的处理方法。所以识图设计一个ＯＯ解决方案时，不要想着一上来就完成一个完美的设计（总会有需要改进的地方）。真正需要的是进行头脑风暴，让你能从不同方向展开你的思维过程。尝试解决一个问题时，不要试图遵照任何标准或约定，因为关键就是要有创造性。</p>

<p>　　实际上，这个过程开始时，甚至不要考虑特定的编程语言。首要的是找出并解决业务问题。首先完成概念分析和设计。只有当特定技术对于解决业务问题至关重要时采取考虑它，例如，如果脱离无线技术可能无法设计一个无线网络。不过，通常有多种软件解决方案可以考虑。</p>

<p>　　要培养善于完成ＯＯ思维过程的敏锐判断力，要注意3个重要的方面</p>

<ol>
<li><p>了解接口和实现之间的区别；</p></li>
<li><p>以更抽象的方式思考；</p></li>
<li><p>尽可能为用户提供最小接口。</p></li>
</ol>


<h2>了解接口与实现之间的区别</h2>

<p>　　构建强大的ＯＯ设计时，关键是理解接口与实现之间的区别。因此，在设计类时，必须了解用户需要知道什么以及用户不需要知道什么，这些是至关重要的。可以利用封装所固有的数据隐藏机制将不重要的数据对用户隐藏。</p>

<blockquote><p><strong>用户看什么：</strong></p>

<p>接口也与类直接相关。最终用户通常不会看任何类，他们只看GUI或命令行界面。不过，程序员会看类接口。类重用意味着已经有人编写了一个类。因此程序员要使用一个类，就必须知道如何让这个类正确地工作。这个程序员要结合多个类来创造一个系统，他需要理解类的接口。因此，这一张谈到用户时，我们主要是指设计人员和开发人员，而不一定是最终用户。因此，在这个上下文中讨论接口时，也会死指类接口，而不是GUI。</p></blockquote>

<h2>接口</h2>

<p>　　为最终用户提供的服务构成了接口。最理想的情况下，应当只为最终用户提供他们所需要的服务。</p>

<blockquote><p><strong>明确用户：</strong></p>

<p>设计一个类时，也许最重要的就是要明确受众或用户。</p></blockquote>

<h2>实现</h2>

<p>　　实现细节对用户是隐藏的。一定要记住实现的一个目标：改变实现不需要同时改变用户的代码。这可能让人有些不太明白，不过，这个目标正是设计的核心问题。如果接口得到了正确的设计，对实现的改变就不会导致用户代码的改变。要记住，接口包含调用一个方法以及返回一个值的语法。如果这个接口没有改变，用户就不关心实现是否发生了改变。只要程序员可以使用同样的语法获取同样的值，怎样实现都无所谓。</p>

<p>　　用户和实现都必须遵循接口规范。</p>

<blockquote><p><strong>对象持久性：</strong></p>

<p>对象持久性（Objiect persistence）是指保存对象的状态，从而可以在以后恢复并使用，没有持久存储的对象一旦出了作用域实际上就已经“死亡”。例如，可以把对象的状态保存在数据库中。</p></blockquote>

<h2>设计接口时使用抽象思维</h2>

<p>　　ＯＯ程序设计的主要优点之一是类可以重用。一般地，可重用类的接口往往更抽象而不是更具体。具体接口通常非常特定，而抽象接口更为一般。不过，如果说一个高度抽象的接口比一个想到具体的接口更有用，则不尽然（尽管通常都是如此）。</p>

<p>　　我们的目标是设计抽象、高度可重用的类，为此，我们要设计高度抽象的用户接口。</p>

<h2>尽可能为用户提供最小接口</h2>

<p>　　设计类时，一般经验是总是为用户尽可能少地提供类的内部知识。为做到这一点，要遵循以下简单规则。</p>

<ul>
<li><p>只为用户提供他们确实需要的东西。实际上，这意味着类的接口要尽可能少。开始设计一个类时，首先只应有最小接口。类的设计是迭代性的，所以你很快会发现最小接口可能不能满足需求。这很正常。</p></li>
<li><p>最好是当用户确实需要时才增加接口，而不要为用户提供他们不需要的接口。在很多情况下，为用户提供某些接口会带来问题。</p></li>
<li><p>公共接口定义用户能访问的信息。如果开始时将接口置为私有，使整个类对用户隐藏，那么当程序员开始使用这个类时，会要求你将某些方法置为公共，这些方法就会成为公共接口。</p></li>
</ul>


<p>摘自《写给大家看的面向对象编程书》</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[继承与组合]]></title>
    <link href="http://dande618.github.com/blog/2012/12/24/is_a_has_a/"/>
    <updated>2012-12-24T22:11:00+08:00</updated>
    <id>http://dande618.github.com/blog/2012/12/24/is_a_has_a</id>
    <content type="html"><![CDATA[<p>　　is-a表示的是属于得关系。代表类之间或类与接口的继承关系。比如兔子属于一种动物（继承关系）。</p>

<p>　　has-a表示组合，包含关系。代表对象和他成员的从属关系。比如兔子包含有腿，头等组件；就不能说兔子腿是属于一种兔子（不能说是继承关系）</p>

<!-- more -->


<p>　　对两个类之间&#8221;is a&#8221;或是&#8221;has a&#8221;关系的分析，有助于我们确定它们之间是否存在继承关系，避免设计上的错误，因而达到提高代码重用性的目的。</p>

<p>　　在JAVA中，组合仅需将对象引用置于新类中即可。</p>

<p>　　继承以关键字extends实现，即BaseClass extends SubClass{ }的形式实现导出类由BaseClass导出子类SubClass，子类可以在其接口中自动获取基类的方法而不论这些方法是否在子类中显示定义过；一方面，在子类中使用基类中的方法及对其进行修改都是可行的。需要特别说明的是，若要使用子类与基类中共有的属于基类方法时，则需要加关键字super表示当前类是从超类继承来的。</p>

<p><strong>继承：</strong></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">A</span><span class="o">{</span>
</span><span class='line'>     <span class="c1">//.....</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">B</span> <span class="kd">extends</span> <span class="n">A</span><span class="o">{</span>
</span><span class='line'>    <span class="c1">//.....</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>组合：</strong></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">A</span><span class="o">{</span>
</span><span class='line'>    <span class="c1">//.....</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">B</span><span class="o">{</span>
</span><span class='line'>     <span class="n">A</span> <span class="n">a</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java中的封装]]></title>
    <link href="http://dande618.github.com/blog/2012/12/21/Encapsulation/"/>
    <updated>2012-12-21T16:10:00+08:00</updated>
    <id>http://dande618.github.com/blog/2012/12/21/Encapsulation</id>
    <content type="html"><![CDATA[<p>　　对象只公开了用户与之交互所需的接口，而与对象使用无关的细节能对其他对象隐藏。</p>

<!-- more -->


<p>　　封装（Encapsulation）是面向对象的三大特征之一（还有继承和多态），它指的是将对象的状态信息隐藏在对象内部，不允许外部程序直接访问对象内部信息，而是通过该类所提供的方法来实现对内部信息的操作和访问。封装是面向对象编程语言对客观世界的模拟。</p>

<hr />

<p><strong>对一个类或对象实现良好的封装，可以实现以下目的：</strong></p>

<ul>
<li><p>隐藏类的细节。</p></li>
<li><p>让使用者只能通过事先预定的方法来访问数据，从而可以在该方法里加入控制逻辑。</p></li>
<li><p>可进行数据检查，从而有利于保证对象信息的完整性。</p></li>
<li><p>便于修改，提高代码的可维护性。</p></li>
</ul>


<p>　　封装实际上有两个方面的含义：把该隐藏的隐藏起来，把该暴露的暴露出来。这两个方面需要通过使用Java提供的访问控制符来实现。</p>

<hr />

<p>　　Java提供了三个访问修饰符：private、protected和public。分别代表了三个访问控制级别，另外还有一个不加任何访问控制符的访问控制级别，提供了四个访问控制级别。</p>

<p><strong>由小到大是：</strong></p>

<p>　　private&#8211;>default&#8211;>protected&#8211;>public</p>

<ul>
<li><p>private（当前类访问权限）：如果一个类里的一个成员（包括Field、方法、构造器等）使用private来修饰，则这个成员只能在当前类的内部被访问。很显然，这个访问修饰符用于修饰Field最合适，使用它来修饰Field就可以把Field隐藏在该类的内部。</p></li>
<li><p>default（包访问权限）：如果类里的一个成员（包括Field、方法、构造器等）或者一个外部类不使用任何访问控制符修饰，我们就称它为包访问权限。default访问控制的成员或外部类可以被相同包下的其他类访问。</p></li>
<li><p>protected（子类访问权限）：如果一个成员（包括Field、方法、构造器等）使用protected控制符修饰，那么这个成员既可以被同一个包中的其他类访问，也可以被不同包中的子类访问。在通常情况下，如果使用protected来修饰一个方法，通常是希望其子类来重写这个方法。</p></li>
<li><p>public（公共访问权限）：这是一个最宽松的访问控制级别，如果一个成员（包括Field、方法、构造器等）或者一个外部类用public访问控制符修饰，那么这个成员或外部类就可以被所有类访问，不管访问类和被访问类是否处于同一个包中，是否具有父子继承关系。</p></li>
</ul>


<table>
    <tr>
        <td></td>
        <td>　private　</td>
        <td>　default　</td>
        <td>　protected　</td>
        <td>　public　</td>
    </tr>
    <tr>
        <td>　同一个类中　</td>
        <td>√</td>
        <td>√</td>
        <td>√</td>
        <td>√</td>
    </tr>
    <tr>
        <td>　同一个包中　</td>
        <td></td>
        <td>√</td>
        <td>√</td>
        <td>√</td>
    </tr>
    <tr>
        <td>　子类中　</td>
        <td></td>
        <td></td>
        <td>√</td>
        <td>√</td>
    </tr>
    <tr>
        <td>　全局范围内　</td>
        <td></td>
        <td></td>
        <td></td>
        <td>√</td>
    </tr>
</table>


<p>　　访问控制符用于控制一个类的成员是否可以被其他类访问，对于局部变量而言，其作用域就是它所在的方法，不可能被其他类访问，因此不能使用访问控制符来修饰。</p>

<p>　　对于外部类而言，它也可以使用访问控制符修饰，但外部类只能有两种访问控制级别：public和默认，外部类不能使用private和protected修饰，因为外部类没有处于任何类的内部，也就没有其所在类的内部、所在类的子类两个范围，因此private和protected访问控制修饰符对外部类没有意义。</p>

<p>　　如果一个Java源文件里定义的所有类都没有使用public修饰，则这个Java源文件的文件名可以是一切合法的文件名；但如果一个Java源文件里定义了一个public修饰的类，则这个源文件的文件名必须与public修饰的类的类名相同。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'><span class="err">　　　　</span><span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'><span class="err">　　　　</span><span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'><span class="err">　　　　</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span>
</span><span class='line'><span class="err">　　　　</span><span class="o">{</span>
</span><span class='line'><span class="err">　　　　　　　　</span><span class="k">if</span> <span class="o">(</span><span class="n">name</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">6</span> <span class="o">||</span> <span class="n">name</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="o">)</span>
</span><span class='line'><span class="err">　　　　　　　　</span><span class="o">{</span>
</span><span class='line'><span class="err">　　　　　　　　　　　　</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;您输入的名字不符合要求&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">　　　　　　　　　　　　</span><span class="k">return</span><span class="o">;</span>
</span><span class='line'><span class="err">　　　　　　　　</span><span class="o">}</span>
</span><span class='line'><span class="err">　　　　　　　　</span><span class="k">else</span>
</span><span class='line'><span class="err">　　　　　　　　</span><span class="o">{</span>
</span><span class='line'><span class="err">　　　　　　　　　　　　</span><span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'><span class="err">　　　　　　　　</span><span class="o">}</span>
</span><span class='line'><span class="err">　　　　</span><span class="o">}</span>
</span><span class='line'><span class="err">　　　　</span><span class="kd">public</span> <span class="n">String</span> <span class="n">getName</span><span class="o">()</span>
</span><span class='line'><span class="err">　　　　</span><span class="o">{</span>
</span><span class='line'><span class="err">　　　　　　　　</span><span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">;</span>
</span><span class='line'><span class="err">　　　　</span><span class="o">}</span>
</span><span class='line'><span class="err">　　　　</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">setAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span>
</span><span class='line'><span class="err">　　　　</span><span class="o">{</span>
</span><span class='line'><span class="err">　　　　　　　　</span><span class="k">if</span> <span class="o">(</span><span class="n">age</span> <span class="o">&gt;</span> <span class="mi">105</span> <span class="o">||</span> <span class="n">age</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'><span class="err">　　　　　　　　</span><span class="o">{</span>
</span><span class='line'><span class="err">　　　　　　　　　　　　</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="err">“您设置的年龄不合法”</span><span class="o">);</span>
</span><span class='line'><span class="err">　　　　　　　　　　　　</span><span class="k">return</span><span class="o">;</span>
</span><span class='line'><span class="err">　　　　　　　　</span><span class="o">}</span>
</span><span class='line'><span class="err">　　　　　　　　</span><span class="k">else</span>
</span><span class='line'><span class="err">　　　　　　　　</span><span class="o">{</span>
</span><span class='line'><span class="err">　　　　　　　　　　　　</span><span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'><span class="err">　　　　　　　　</span><span class="o">}</span>
</span><span class='line'><span class="err">　　　　</span><span class="o">}</span>
</span><span class='line'><span class="err">　　　　</span><span class="kd">public</span> <span class="kt">int</span> <span class="n">getAge</span><span class="o">()</span>
</span><span class='line'><span class="err">　　　　</span><span class="o">{</span>
</span><span class='line'><span class="err">　　　　　　　　</span><span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">age</span><span class="o">;</span>
</span><span class='line'><span class="err">　　　　</span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>　　定义了上面的person类之后，该类的name和age两个Field只有在Person类内才可以操作和访问，在Person类之外只能通过各自对应的setter和getter方法来操作和访问它们。</p>

<p><strong>关于访问控制符的使用，存在如下几条基本原则：</strong></p>

<ul>
<li><p>类的绝大部分Field都应该使用private修饰，只有一些static修饰的、类似全局变量的Field才可能考虑使用public修饰。除此之外，有些方法只是用于辅助实现该类的其他方法，这些方法被称为工具方法，工具方法也应该使用private修饰。</p></li>
<li><p>如果某个类主要做其他类的父类，该类里包含的大部分方法可能仅希望被其子类重写，而不想被外界直接调用，则应该使用protected修饰这些方法。</p></li>
<li><p>希望暴露出来给其他类自由调用的方法应该使用public修饰。因此，类的构造器通过使用public修饰，从而允许在其他地方创建类的实例。因为外部类通常希望被其他类自由使用，所以大部分外部类都使用public修饰。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面向对象基本概念（三）]]></title>
    <link href="http://dande618.github.com/blog/2012/12/19/object3/"/>
    <updated>2012-12-19T16:10:00+08:00</updated>
    <id>http://dande618.github.com/blog/2012/12/19/object3</id>
    <content type="html"><![CDATA[<p>　　对象只公开了用户与之交互所需的接口，而与对象使用无关的细节能对其他对象隐藏。</p>

<!-- more -->


<h2>继承</h2>

<p>　　ＯＯ程序设计中最强大的一个特性可能就是代码重用。结构化设计从某种程度上提供了代码重用——你可以编写一个过程，然后根据需要使用多次。不过，ＯＯ设计则更进一步，允许通过组织类并抽取各个类的共性来定义类之间的关系，这不仅有利于代码重用，还可以实现更好的整体设计。继承（inheritance）是提供这种功能的一个主要途径。</p>

<p>　　继承允许类继承另一个类的属性和方法。这就允许通过抽取共同的属性和行为来创建全新的类。ＯＯ程序设计中主要的设计问题之一就是抽取不同类的共性。</p>

<p><img src="http://img13.poco.cn/mypoco/myphoto/20130216/15/4309479020130216150632097.jpg" alt="演示" /></p>

<p>　　实例化对象时，他包含该类本身的所有内容，还包括从其父类继承的所有内容。</p>

<h2>超类和子类</h2>

<p>　　超类（或父类）包含继承自该类的所有子类共同的属性和行为。</p>

<h2>抽象</h2>

<p>　　继承树可能会扩展得相当庞大。继承的强大之处就在于与其抽象和组织技术。</p>

<blockquote><p>在大多数ＯＯ语言中，一个类只能有一个父类；不过，一个类可以有多个子类。</p></blockquote>

<h2>is-a 关系</h2>

<p>　　考虑一个Shape例子，Circle、Square和Star都直接继承自Shape。这个关系通常称为一种is-a关系。</p>

<h2>多态</h2>

<p>　　多态（polymorphism）字面意思是多种形状。尽管多态与继承紧密相关。但通常被单独地看作面向对象技术最强大的特点。当想一个对象发送一个消息时，这个对象必须有一个定义的方法对这个消息作出响应。在继承层次结构中，所有子类都从其超类继承接口。不过，由于每个子类都是一个单独的实体，它们可能需要对同一个消息作出不同的响应。</p>

<p>　　覆盖（overriding）实际上是指将父类的一个实现替换为其子类的一个实现。</p>

<blockquote><p>如果一个方法定义为abstract，子类就必须为这个方法提供一个实现。否则该子类本身也将成为一个抽象类。</p></blockquote>

<h2>构造函数</h2>

<p>　　构造函数（constructor）。如果一个方法与所在类同名，而且没有提供任何返回类型，则这个方法就是一个特殊方法，称为构造函数。可以把构造函数认为是类的入口点，对象由此构建。构造函数非常适合完成初始化和准备工作。</p>

<h2>组合</h2>

<p>　　对象通常是由其他对象构建或组合而成的。这就是组合（composition）。</p>

<h2>抽象</h2>

<p>　　基于其他类来构建类只有两种方法：继承（is-a）和组合（has-a）。继承允许一个类从另一个类继承，这样能为公共类抽取属性和行为。</p>

<h2>总结</h2>

<p>-封装——将数据和行为封装到一个对象中，这是ＯＯ开发中非常重要的一点。一个对象同时包含其数据和行为，而且可以将某些部分对其他对象隐藏。
-继承——一个类可以从另一个类继承，并且可以利用超类定义的属性和方法。
-多态——多态是指类似的对象可以采用不同的方式对相同的消息作出响应。例如，你可能有一个包含多种形状的系统。小过，圆形、正方形和星形分别采用不同的方式绘制。通过使用多态，可以向以上各个形状发送相同的消息（如Draw），各形状则会负责自行完成绘制。
-组合——组合是指—个对象由其他对象构建而成。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面向对象基本概念（二）]]></title>
    <link href="http://dande618.github.com/blog/2012/12/16/object2/"/>
    <updated>2012-12-16T09:11:00+08:00</updated>
    <id>http://dande618.github.com/blog/2012/12/16/object2</id>
    <content type="html"><![CDATA[<h2>方法</h2>

<p>　　方法实现了一个类所需的行为。从这个类实例化的各个对象都有该类所定义的方法。方法可能实现其他对象（消息）所调用的行为，或者提供这个类内部的基本行为。内部行为是不允许其他对象访问的私有方法。</p>

<p>　　在各种情况下，对一个对象中属性的访问要由这个对象自己来控制，而不允许其他对象直接修改另一个对象的属性。</p>

<!-- more -->


<h2>消息</h2>

<p>　　消息是对象之间的的通信机制。例如，当对象A调用对象B的一个方法时，对象A就是在向对象B发送一个消息。对象B的响应由其返回值定义。只有对象的公共方法（而不包括私有方法）能够由另一个对象调用。</p>

<h2>封装和数据隐藏</h2>

<p>　　使用对象的主要优点之一是，对象不需要公开它的所有的属性和行为。在好的ＯＯ设计中，对象只应公开其他对象与之交互所必需的接口，与对象使用无关的细节应当对所有其他对象隐藏。</p>

<h2>接口</h2>

<p>　　接口定义了对象间通信的基本途径。每个类设计都要指定接口来正确地实现对象的实例化和操作。对象提供的行为必须通过使用某个接口发送的消息来调用。接口应当全面描述这个类的用户如何与之交互。在大多数ＯＯ语言中，接口中的方法都指定为public。</p>

<p>　　要实现数据隐藏，所有属性都应当声明为private。</p>

<h2>实现</h2>

<p>　　只有公共属性和方法被认为是接口。用户不应该看到任何实现部分，与一个对象的交互只能通过类接口。</p>

<p>　　因此，实现可以改变，但是它不会影响到用户的代码。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面向对象基本概念（一）]]></title>
    <link href="http://dande618.github.com/blog/2012/12/14/object/"/>
    <updated>2012-12-14T17:20:00+08:00</updated>
    <id>http://dande618.github.com/blog/2012/12/14/object</id>
    <content type="html"><![CDATA[<p>　　在深入某种编程语言或建模语言前必须先熟悉<strong>面向对象</strong>（object-oriented，ＯＯ）思维过程。</p>

<!-- more -->


<blockquote><p>　　对象（object）可以定义为同时包含数据和行为的一个实体。这里的“同时包含”正是ＯＯ程序设计和其他程序设计方法的重要区别。</p></blockquote>

<p>　　在ＯＯ设计中，属性和行为都包含在一个对象中，而在过程式设计中（或者说结构化设计）中，属性和行为是分开的。</p>

<blockquote><p>　　数据隐藏（data hiding）：在ＯＯ术语中，数据表示为属性，行为表示为方法，限制对某些属性和方法的访问称为数据隐藏。</p>

<p>　　封装（encapsulation）：通过把属性和方法合并到一个实体中，就能控制对对象中数据的访问。</p></blockquote>

<p>　　一般情况下，对象不应处理其他对象的内部数据。通常更好的做法是构建完成特定任务的小对象，而不是建立完成很多任务的大型对象。</p>

<p>　　过程式程序设计通常将系统的数据与处理这些数据的操作相分离。</p>

<p>　　ＯＯ程序设计最根本的优点是：数据和处理这些数据的操作（代码）都封装在对象中。</p>

<blockquote><p>　　存储在一个对象中的数据表示对象的状态。在ＯＯ程序设计术语中，该数据称为属性（attribute）。</p>

<p>　　对象的行为（behavior）就是对象能够做什么。在ＯＯ程序设计术语中，这些行为包含在方法（method）中，要通过发送消息来调用方法。</p></blockquote>

<p>　　要记住，使用对象有很多优点，其中最有意思（最强大）的一点就是数据是包的一部分——它不与代码分离。</p>

<p>　　获取方法和设置方法的概念支持数据隐藏的概念。因为其他对象不能直接处理另一个对象内部的数据，所以获取方法和设置方法提供了对对象的数据的一种控制访问。</p>

<p>　　只是给出方法的接口，而没有展示具体实现。用户只需要一下信息就能知道如何有效地使用这些方法。</p>

<ul>
<li><p>方法名</p></li>
<li><p>传入方法的参数</p></li>
<li><p>方法的返回类型</p></li>
</ul>


<h3>类是什么？</h3>

<p>　　现在可以把类认为是一种<strong>模板</strong>，由这个模板建立对象。创建一个对象时，我们称对象被实例化。从概念层次来讲，可以认为对象完全是独立的，有其自己的属性和方法。</p>

<p>　　简单来讲，类是对象的一个<strong>蓝图</strong>。实例化一个对象时，就是使用一个类作为构建这个对象的基础。在ＯＯ软件中，应该先有类。如果没有类，对象就无法实例化。</p>

<p>　　每个对象都有其自己的属性和行为。类定义用这个类创建的所有对象拥有的属性和行为。类是一些代码。有类实例化得到的对象可以单独分布，也可以作为库的一部分。</p>
]]></content>
  </entry>
  
</feed>
