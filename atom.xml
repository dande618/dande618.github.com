<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[初心]]></title>
  <link href="http://dande618.github.com/atom.xml" rel="self"/>
  <link href="http://dande618.github.com/"/>
  <updated>2013-02-16T14:54:29+08:00</updated>
  <id>http://dande618.github.com/</id>
  <author>
    <name><![CDATA[dande618]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[markdown]]></title>
    <link href="http://dande618.github.com/blog/2013/02/15/markdown/"/>
    <updated>2013-02-15T19:00:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/02/15/markdown</id>
    <content type="html"><![CDATA[<div style="float:left;padding-right:20px"><img src="http://mouapp.com/Mou_128.png"/></div>


<p>Markdown是什么？</p>


<p>Markdown 是一种轻量级标记语言，创始人为John Gruber和Aaron Swartz。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。</p>


<p>摘自维基百科Markdown条。</p>


<!-- more -->


<p>Markdown有啥好处？</p>

<p>正如上文所述，Markdown具有：</p>

<ol>
<li><p>易学易用；</p></li>
<li><p>方便转换为HTML等其他格式；</p></li>
<li><p>支持广泛，便于维护；</p></li>
</ol>


<p>等等特性。</p>

<h2>以下摘自 Markdown 语法说明 (简体中文版)</h2>

<p><a href="http://wowubuntu.com/markdown/index.html">源地址</a></p>

<p>Markdown 语法:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>A First Level Header
</span><span class='line'>====================
</span><span class='line'>A Second Level Header
</span><span class='line'>---------------------
</span><span class='line'>
</span><span class='line'>Now is the time for all good men to come to
</span><span class='line'>the aid of their country. This is just a
</span><span class='line'>regular paragraph.
</span><span class='line'>
</span><span class='line'>The quick brown fox jumped over the lazy
</span><span class='line'>dog's back.
</span><span class='line'>### Header 3
</span><span class='line'>
</span><span class='line'>> This is a blockquote.
</span><span class='line'>> 
</span><span class='line'>> This is the second paragraph in the blockquote.
</span><span class='line'>>
</span><span class='line'>> ## This is an H2 in a blockquote</span></code></pre></td></tr></table></div></figure>


<p>输出 HTML 为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;h1>A First Level Header&lt;/h1>
</span><span class='line'>&lt;h2>A Second Level Header&lt;/h2>
</span><span class='line'>&lt;p>Now is the time for all good men to come to
</span><span class='line'>the aid of their country. This is just a
</span><span class='line'>regular paragraph.&lt;/p>
</span><span class='line'>&lt;p>The quick brown fox jumped over the lazy
</span><span class='line'>dog's back.&lt;/p>
</span><span class='line'>&lt;h3>Header 3&lt;/h3>
</span><span class='line'>&lt;blockquote>
</span><span class='line'>&lt;p>This is a blockquote.&lt;/p>
</span><span class='line'>&lt;p>This is the second paragraph in the blockquote.&lt;/p>
</span><span class='line'>&lt;h2>This is an H2 in a blockquote&lt;/h2>
</span><span class='line'>&lt;/blockquote></span></code></pre></td></tr></table></div></figure>


<h2>修辞和强调</h2>

<p>Markdown 使用星号和底线来标记需要强调的区段。</p>

<p>Markdown 语法:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Some of these words *are emphasized*.
</span><span class='line'>Some of these words _are emphasized also_.
</span><span class='line'>Use two asterisks for **strong emphasis**.
</span><span class='line'>Or, if you prefer, __use two underscores instead__.</span></code></pre></td></tr></table></div></figure>


<p>输出 HTML 为:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;p>Some of these words &lt;em>are emphasized&lt;/em>.
</span><span class='line'>Some of these words &lt;em>are emphasized also&lt;/em>.&lt;/p>
</span><span class='line'>&lt;p>Use two asterisks for &lt;strong>strong emphasis&lt;/strong>.
</span><span class='line'>Or, if you prefer, &lt;strong>use two underscores instead&lt;/strong>.&lt;/p></span></code></pre></td></tr></table></div></figure>


<h2>列表</h2>

<p>无序列表使用星号、加号和减号来做为列表的项目标记，这些符号是都可以使用的，使用星号：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* Candy.
</span><span class='line'>* Gum.
</span><span class='line'>* Booze.</span></code></pre></td></tr></table></div></figure>


<p>有序的列表则是使用一般的数字接着一个英文句点作为项目标记：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. Red
</span><span class='line'>2. Green
</span><span class='line'>3. Blue</span></code></pre></td></tr></table></div></figure>


<h2>链接</h2>

<p>Markdown 支援两种形式的链接语法： 行内 和 参考 两种形式，两种都是使用角括号来把文字转成连结。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>This is an [example link](http://example.com/ "With a Title").</span></code></pre></td></tr></table></div></figure>


<p>参考形式的链接让你可以为链接定一个名称，之后你可以在文件的其他地方定义该链接的内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>I get 10 times more traffic from [Google][1] than from
</span><span class='line'>[Yahoo][2] or [MSN][3].
</span><span class='line'>
</span><span class='line'>[1]: http://google.com/ "Google"
</span><span class='line'>[2]: http://search.yahoo.com/ "Yahoo Search"
</span><span class='line'>[3]: http://search.msn.com/ "MSN Search"</span></code></pre></td></tr></table></div></figure>


<h2>自动链接</h2>

<p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;http://example.com/></span></code></pre></td></tr></table></div></figure>


<p>Markdown 会转为：</p>

<h2>图片</h2>

<p>图片的语法和链接很像。</p>

<p>行内形式（title 是选择性的）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>![alt text](/path/to/img.jpg "Title")</span></code></pre></td></tr></table></div></figure>


<p>参考形式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>![alt text][id]
</span><span class='line'>[id]: /path/to/img.jpg "Title"</span></code></pre></td></tr></table></div></figure>


<h2>区块引用 Blockquotes</h2>

<p>Markdown 标记区块引用是使用类似 email 中用 > 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 > ：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
</span><span class='line'>> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
</span><span class='line'>> Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
</span><span class='line'>> 
</span><span class='line'>> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
</span><span class='line'>> id sem consectetuer libero luctus adipiscing.</span></code></pre></td></tr></table></div></figure>


<h2>分隔线</h2>

<p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* * *
</span><span class='line'>
</span><span class='line'>***
</span><span class='line'>
</span><span class='line'>*****
</span><span class='line'>
</span><span class='line'>- - -
</span><span class='line'>
</span><span class='line'>---------------------------------------</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[正则表达式]]></title>
    <link href="http://dande618.github.com/blog/2013/02/15/regex/"/>
    <updated>2013-02-15T16:00:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/02/15/regex</id>
    <content type="html"><![CDATA[<p id="article">在计算机科学中，是指一个用来描述或者匹配一系列符合某个句法规则的字符串的单个字符串。在很多文本编辑器或其他工具里，正则表达式通常被用来检索和/或替换那些符合某个模式的文本内容。许多程序设计语言都支持利用正则表达式进行字符串操作。</p>


<br/>


<!-- more -->


<table class="mytable"><tr><td class="mytable">元字符 
</td><td class="mytable">描述
</td></tr><tr><td class="mytable">\
</td><td class="mytableb">将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“\n”匹配字符“n”。“&#92;n”匹配一个换行符。序列“&#92;”匹配“\”而“\(”则匹配“(”。
</td></tr><tr><td class="mytable">^
</td><td class="mytableb">匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“\n”或“\r”之后的位置。
</td></tr><tr><td class="mytable">$
</td><td class="mytableb">匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“\n”或“\r”之前的位置。
</td></tr><tr><td class="mytable">*
</td><td class="mytableb">匹配前面的子表达式零次或多次。例如，zo*能匹配“z”以及“zoo”。*等价于{0,}。
</td></tr><tr><td class="mytable">+
</td><td class="mytableb">匹配前面的子表达式一次或多次。例如，“zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}。
</td></tr><tr><td class="mytable">?
</td><td class="mytableb">匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“does”或“does”中的“do”。?等价于{0,1}。
</td></tr><tr><td class="mytable">{n}
</td><td class="mytableb">n是一个非负整数。匹配确定的n次。例如，“o{2}”不能匹配“Bob”中的“o”，但是能匹配“food”中的两个o。
</td></tr><tr><td class="mytable">{n,}
</td><td class="mytableb">n是一个非负整数。至少匹配n次。例如，“o{2,}”不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。“o{1,}”等价于“o+”。“o{0,}”则等价于“o*”。
</td></tr><tr><td class="mytable">{n,m}
</td><td class="mytableb">m和n均为非负整数，其中n&lt;=m。最少匹配n次且最多匹配m次。例如，“o{1,3}”将匹配“fooooood”中的前三个o。“o{0,1}”等价于“o?”。请注意在逗号和两个数之间不能有空格。
</td></tr><tr><td class="mytable">?
</td><td class="mytableb">当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“oooo”，“o+?”将匹配单个“o”，而“o+”将匹配所有“o”。
</td></tr><tr><td class="mytable">.点
</td><td class="mytableb">匹配除“\n”之外的任何单个字符。要匹配包括“\n”在内的任何字符，请使用像“&#91;\s\S&#93;”的模式。
</td></tr><tr><td class="mytable">(pattern)
</td><td class="mytableb">匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“\(”或“\)”。
</td></tr><tr><td class="mytable">(?:pattern)
</td><td class="mytableb">匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“(|)”来组合一个模式的各个部分是很有用。例如“industr(?:y|ies)”就是一个比“industry|industries”更简略的表达式。
</td></tr><tr><td class="mytable">(?=pattern)
</td><td class="mytableb">正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“Windows(?=95|98|NT|2000)”能匹配“Windows2000”中的“Windows”，但不能匹配“Windows3.1”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。
</td></tr><tr><td class="mytable">(?!pattern)
</td><td class="mytableb">正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“Windows(?!95|98|NT|2000)”能匹配“Windows3.1”中的“Windows”，但不能匹配“Windows2000”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。
</td></tr><tr><td class="mytable">(?&lt;=pattern)
</td><td class="mytableb">反向肯定预查，与正向肯定预查类似，只是方向相反。例如，“(?&lt;=95|98|NT|2000)Windows”能匹配“2000Windows”中的“Windows”，但不能匹配“3.1Windows”中的“Windows”。
</td></tr><tr><td class="mytable">(?&lt;!pattern)
</td><td class="mytableb">反向否定预查，与正向否定预查类似，只是方向相反。例如“(?&lt;!95|98|NT|2000)Windows”能匹配“3.1Windows”中的“Windows”，但不能匹配“2000Windows”中的“Windows”。
</td></tr><tr><td class="mytable">x|y
</td><td class="mytableb">匹配x或y。例如，“z|food”能匹配“z”或“food”。“(z|f)ood”则匹配“zood”或“food”。
</td></tr><tr><td class="mytable">&#91;xyz&#93;
</td><td class="mytableb">字符集合。匹配所包含的任意一个字符。例如，“&#91;abc&#93;”可以匹配“plain”中的“a”。
</td></tr><tr><td class="mytable">&#91;^xyz&#93;
</td><td class="mytableb">负值字符集合。匹配未包含的任意字符。例如，“&#91;^abc&#93;”可以匹配“plain”中的“plin”。
</td></tr><tr><td class="mytable">&#91;a-z&#93;
</td><td class="mytableb">字符范围。匹配指定范围内的任意字符。例如，“&#91;a-z&#93;”可以匹配“a”到“z”范围内的任意小写字母字符。
</td></tr><tr><td class="mytable">&#91;^a-z&#93;
</td><td class="mytableb">负值字符范围。匹配任何不在指定范围内的任意字符。例如，“&#91;^a-z&#93;”可以匹配任何不在“a”到“z”范围内的任意字符。
</td></tr><tr><td class="mytable">\b
</td><td class="mytableb">匹配一个单词边界，也就是指单词和空格间的位置。例如，“er\b”可以匹配“never”中的“er”，但不能匹配“verb”中的“er”。
</td></tr><tr><td class="mytable">\B
</td><td class="mytableb">匹配非单词边界。“er\B”能匹配“verb”中的“er”，但不能匹配“never”中的“er”。
</td></tr><tr><td class="mytable">\cx
</td><td class="mytableb">匹配由x指明的控制字符。例如，\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“c”字符。
</td></tr><tr><td class="mytable">\d
</td><td class="mytableb">匹配一个数字字符。等价于&#91;0-9&#93;。
</td></tr><tr><td class="mytable">\D
</td><td class="mytableb">匹配一个非数字字符。等价于&#91;^0-9&#93;。
</td></tr><tr><td class="mytable">\f
</td><td class="mytableb">匹配一个换页符。等价于\x0c和\cL。
</td></tr><tr><td class="mytable">\n
</td><td class="mytableb">匹配一个换行符。等价于\x0a和\cJ。
</td></tr><tr><td class="mytable">\r
</td><td class="mytableb">匹配一个回车符。等价于\x0d和\cM。
</td></tr><tr><td class="mytable">\s
</td><td class="mytableb">匹配任何空白字符，包括空格、制表符、换页符等等。等价于&#91; \f\n\r\t\v&#93;。
</td></tr><tr><td class="mytable">\S
</td><td class="mytableb">匹配任何非空白字符。等价于&#91;^ \f\n\r\t\v&#93;。
</td></tr><tr><td class="mytable">\t
</td><td class="mytableb">匹配一个制表符。等价于\x09和\cI。
</td></tr><tr><td class="mytable">\v
</td><td class="mytableb">匹配一个垂直制表符。等价于\x0b和\cK。
</td></tr><tr><td class="mytable">\w
</td><td class="mytableb">匹配包括下划线的任何单词字符。等价于“&#91;A-Za-z0-9_&#93;”。
</td></tr><tr><td class="mytable">\W
</td><td class="mytableb">匹配任何非单词字符。等价于“&#91;^A-Za-z0-9_&#93;”。
</td></tr><tr><td class="mytable">\xn
</td><td class="mytableb">匹配n，其中n为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“\x41”匹配“A”。“\x041”则等价于“\x04&amp;1”。正则表达式中可以使用ASCII编码。
</td></tr><tr><td class="mytable">\num
</td><td class="mytableb">匹配num，其中num是一个正整数。对所获取的匹配的引用。例如，“(.)\1”匹配两个连续的相同字符。
</td></tr><tr><td class="mytable">\n
</td><td class="mytableb">标识一个八进制转义值或一个向后引用。如果\n之前至少n个获取的子表达式，则n为向后引用。否则，如果n为八进制数字（0-7），则n为一个八进制转义值。
</td></tr><tr><td class="mytable">\nm
</td><td class="mytableb">标识一个八进制转义值或一个向后引用。如果\nm之前至少有nm个获得子表达式，则nm为向后引用。如果\nm之前至少有n个获取，则n为一个后跟文字m的向后引用。如果前面的条件都不满足，若n和m均为八进制数字（0-7），则\nm将匹配八进制转义值nm。
</td></tr><tr><td class="mytable">\nml
</td><td class="mytableb">如果n为八进制数字（0-3），且m和l均为八进制数字（0-7），则匹配八进制转义值nml。
</td></tr><tr><td class="mytable">\un
</td><td class="mytableb">匹配n，其中n是一个用四个十六进制数字表示的Unicode字符。例如，\u00A9匹配版权符号（&copy;）。
</td></tr></table>


<h2>使用emeditor宏批处理</h2>

<p>例
1. 添加菜单项</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if (document.selection.isempty)
</span><span class='line'>
</span><span class='line'>  nFlags=eeFindNext | eeReplaceAll | eeFindReplaceRegExp;
</span><span class='line'>
</span><span class='line'>else 
</span><span class='line'>
</span><span class='line'>  nFlags=eeFindNext | eeReplaceSelOnly | eeReplaceAll | eeFindReplaceRegExp;
</span><span class='line'>
</span><span class='line'>menu= CreatePopupMenu();
</span><span class='line'>
</span><span class='line'>menu.Add("使用正则表达式提取字符串",1);
</span><span class='line'>
</span><span class='line'>result = menu.Track( 0 );
</span><span class='line'>
</span><span class='line'>if (result>40) nFlags=nFlags=eeFindNext | eeReplaceAll | eeFindReplaceRegExp;
</span><span class='line'>
</span><span class='line'>switch(result){
</span><span class='line'>
</span><span class='line'>case 1: //内容
</span><span class='line'>
</span><span class='line'>      break;
</span><span class='line'>
</span><span class='line'>default:
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>2.删除段首尾空格</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>document.selection.Replace("^\\s*","",eeFindNext | eeReplaceAll | eeFindReplaceRegExp);
</span><span class='line'>
</span><span class='line'>document.selection.Replace("\\s*$","",eeFindNext | eeReplaceAll | eeFindReplaceRegExp);</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[认识Intent]]></title>
    <link href="http://dande618.github.com/blog/2013/01/29/intent/"/>
    <updated>2013-01-29T20:29:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/01/29/intent</id>
    <content type="html"><![CDATA[<p class="para">Intent：意图</p>


<p class="para">当一个Activity需要启动另一个Activity时，程序并没有直接告诉系统要启动那个Activity，而是通过Intent来表达自己的意图：需要启动哪个Activity。</p>


<!-- more -->


<p class="para">Intent封装Android应用程序需要启动某个组件的“意图”。不仅如此，Intent还是应用程序组件之间通讯的重要媒介。两个Activity可以把需要交换的数据封装成Bundle对象，然后使用Intent来携带Bundle对象，这样就实现了两个Activity之间的数据交换。</p>


<p>Android的应用程序包含三种重要的组件：Activity、Service、BroadcastReceiver，应用程序采用了一致的方式来启动他们——都是依靠Intent来进行启动的，Intent就封装了程序想要启动程序的意图，不仅如此，Intent还可用于与被启动组件交换信息。</p>

<p class="para">通过点击按钮打开另一个Activity</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">button</span><span class="o">.</span><span class="na">setOnClickListener</span>
</span><span class='line'>  <span class="o">(</span>
</span><span class='line'>   <span class="k">new</span> <span class="nf">OnClickListener</span><span class="o">()</span>
</span><span class='line'>   <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">Intent</span> <span class="n">intent</span><span class="o">=</span><span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
</span><span class='line'>     <span class="n">intent</span><span class="o">.</span><span class="na">setClass</span><span class="o">(</span><span class="n">MainActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="n">SecondActivity</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>     <span class="n">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>  <span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[认识Bundle]]></title>
    <link href="http://dande618.github.com/blog/2013/01/29/Bundle/"/>
    <updated>2013-01-29T15:22:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/01/29/Bundle</id>
    <content type="html"><![CDATA[<p class="para">用于不同Activity之间的数据传递</p>


<!-- more -->


<h2>重要方法</h2>


<p class="para">clear()：清除此Bundle映射中的所有保存的数据。</p>


<p class="para">clone()：克隆当前Bundle</p>


<p class="para">containsKey(String key)：返回指定key的值</p>


<p class="para">getString(String key)：返回指定key的字符</p>


<p class="para">hasFileDescriptors()：指示是否包含任何捆绑打包文件描述符</p>


<p class="para">isEmpty()：如果这个捆绑映射为空，则返回true</p>


<p class="para">putString(String key, String value):插入一个给定key的字符串值</p>


<p class="para">readFromParcel(Parcel parcel)：读取这个parcel的内容</p>


<p class="para">remove(String key)：移除指定key的值</p>


<p class="para">writeToParcel(Parcel parcel, int flags)：写入这个parcel的内容</p>


<h2>Android Bundle类</h2>


<p></p>

<p class="laiyuan">[转载]　<a href="http://blog.csdn.net/randyjiawenjie/article/details/6651437">文章出处</a></p>


<p class="para">根据google官方的文档（http://developer.android.com/reference/android/os/Bundle.html）</p>


<p class="para">Bundle类是一个key-value对，“A mapping from String values to various Parcelable types.”</p>


<p class="para">类继承关系：</p>


<p class="dk">java.lang.Object</p>


<p class="dk">android.os.Bundle</p>


<p class="para">Bundle类是一个final类：</p>


<p class="dk">public final class</p>


<p class="dk">Bundle</p>


<p class="dk">extends Objectimplements Parcelable Cloneable</p>


<p class="para">两个activity之间的通讯可以通过bundle类来实现，做法就是：</p>


<p class="para">（1）新建一个bundle类</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Bundle</span> <span class="n">mBundle</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Bundle</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>（2）bundle类中加入数据（key -value的形式，另一个activity里面取数据的时候，就要用到key，找出对应的value）</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mBundle</span><span class="o">.</span><span class="na">putString</span><span class="o">(</span><span class="s">&quot;Data&quot;</span><span class="o">,</span> <span class="s">&quot;data from TestBundle&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>(3)新建一个intent对象，并将该bundle加入这个intent对象</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
</span><span class='line'><span class="n">intent</span><span class="o">.</span><span class="na">setClass</span><span class="o">(</span><span class="n">TestBundle</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="n">Target</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">intent</span><span class="o">.</span><span class="na">putExtras</span><span class="o">(</span><span class="n">mBundle</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>




<p class="para">完整代码见原文</p>


<p>————————</p>

<p>Activity1：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">btn</span><span class="o">.</span><span class="na">setOnClickListener</span>
</span><span class='line'>        <span class="o">(</span>
</span><span class='line'>         <span class="k">new</span> <span class="nf">OnClickListener</span><span class="o">()</span>
</span><span class='line'>         <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">String</span> <span class="n">str</span><span class="o">=</span><span class="n">ev</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">().</span><span class="na">trim</span><span class="o">();</span>
</span><span class='line'>     <span class="n">Intent</span> <span class="n">intent</span><span class="o">=</span><span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
</span><span class='line'>     <span class="n">intent</span><span class="o">.</span><span class="na">setClass</span><span class="o">(</span><span class="n">Activity1</span><span class="o">.</span><span class="na">this</span><span class="o">,</span><span class="n">Activity2</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>     <span class="n">Bundle</span> <span class="n">bundle</span><span class="o">=</span><span class="k">new</span> <span class="n">Bundle</span><span class="o">();</span>
</span><span class='line'>     <span class="n">bundle</span><span class="o">.</span><span class="na">putString</span><span class="o">(</span><span class="s">&quot;str&quot;</span><span class="o">,</span> <span class="n">str</span><span class="o">);</span>
</span><span class='line'>     <span class="n">intent</span><span class="o">.</span><span class="na">putExtras</span><span class="o">(</span><span class="n">bundle</span><span class="o">);</span><span class="c1">//绑定信息</span>
</span><span class='line'>     <span class="n">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span><span class="c1">//启动Activity</span>
</span><span class='line'>     <span class="n">Activity1</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">finish</span><span class="o">();</span><span class="c1">//关闭Activity</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Activity2：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span>
</span><span class='line'> <span class="o">{</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>  <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">anthor</span><span class="o">);</span>
</span><span class='line'>  <span class="n">TextView</span> <span class="n">tv</span><span class="o">=(</span><span class="n">TextView</span><span class="o">)</span><span class="k">this</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">TextView1</span><span class="o">);</span><span class="c1">//显示的信息</span>
</span><span class='line'>  <span class="n">Button</span> <span class="n">button</span><span class="o">=(</span><span class="n">Button</span><span class="o">)</span><span class="k">this</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">anthorButton</span><span class="o">);</span><span class="c1">//返回按钮</span>
</span><span class='line'>  <span class="n">Bundle</span> <span class="n">bundle</span><span class="o">=</span><span class="k">this</span><span class="o">.</span><span class="na">getIntent</span><span class="o">().</span><span class="na">getExtras</span><span class="o">();</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">str</span><span class="o">=</span><span class="n">bundle</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;str&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">StringBuilder</span> <span class="n">sb</span><span class="o">=</span><span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'>  <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;您填写的信息为：&quot;</span><span class="o">+</span><span class="n">str</span><span class="o">+</span><span class="s">&quot;\n&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">tv</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">trim</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">button</span><span class="o">.</span><span class="na">setOnClickListener</span>
</span><span class='line'>  <span class="o">(</span>
</span><span class='line'>   <span class="k">new</span> <span class="nf">OnClickListener</span><span class="o">()</span>
</span><span class='line'>   <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">Intent</span> <span class="n">intent</span><span class="o">=</span><span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
</span><span class='line'>     <span class="n">intent</span><span class="o">.</span><span class="na">setClass</span><span class="o">(</span><span class="n">Activity2</span><span class="o">.</span><span class="na">this</span><span class="o">,</span><span class="n">Activity1</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>     <span class="n">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span><span class='line'>     <span class="n">AnotherActivity</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">finish</span><span class="o">();</span><span class="c1">//关闭Activity</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>  <span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[认识Handler]]></title>
    <link href="http://dande618.github.com/blog/2013/01/28/handler/"/>
    <updated>2013-01-28T11:36:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/01/28/handler</id>
    <content type="html"><![CDATA[<p>主要接受子线程发送的数据, 并用此数据配合主线程更新UI。
主要是为了解决Android应用的多线程问题。Android平台不允许Activity新启动的线程访问该Activity里的界面组件，这样就会导致新启动的线程无法动态改变界面组件的属性值。</p>

<!-- more -->


<p>Handler类的主要作用有两个：</p>

<ul>
    <li>在新启动的线程中发送消息。</li>
    <li>在主线程中获取、处理消息。</li>
</ul>


<p>通过回调的方式来实现，重写Handler类中处理消息的方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[事件处理]]></title>
    <link href="http://dande618.github.com/blog/2013/01/26/listener/"/>
    <updated>2013-01-26T10:27:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/01/26/listener</id>
    <content type="html"><![CDATA[<p>Android的时间处理机制包括</p>

<ul>
    <li>基于监听的事件处理</li>
    <li>基于回调的事件处理</li>
</ul>


<!-- more -->


<p>基于监听的事件处理：为界面组件绑定监听器。
基于回调的事件处理：重写组件（Activity）特定的回调方法。</p>

<h2>基于监听的事件处理</h2>


<ol>
    <li>获取被监听的对象（即界面组件）</li>
    <li>实现事件监听器（即一个实现XxxListener接口的类）</li>
    <li>调用事件源的setXxxListener(XxxListener)方法将事件监听器注册给被监听的对象</li>
</ol>


<p>View类的接口有</p>

<ul>
    <li>View.OnClickListener</li>
    <li>View.OnCreateContextMenuLister</li>
    <li>View.OnFocusChangeListener</li>
    <li>View.OnKeyListener</li>
    <li>View.OnLongClickListener</li>
    <li>View.OnTouchListener</li>
</ul>


<p>实现事件监听器的形式</p>

<ul>
    <li>内部类形式</li>
    <li>外部类形式</li>
    <li>Activity本身作为事件监听器类</li>
    <li>匿名内部类</li>（常用）
    <li>直接绑定到标签</li>
</ul>


<h2>基于回调的事件处理</h2>


<p>以View类为例，一些事件处理的回调方法</p>

<ul>
    <li>boolean onKeyDown(int keyCode,KeyEvent event)</li>
    <li>boolean onKeyLongPress(int keyCode,KeyEvent event)</li>
    <li>boolean onKeyShortcut(int keyCode,KeyEvent event)</li>
    <li>boolean onKeyUp(int keyCode,KeyEvent event)</li>
    <li>boolean onTouchEvent(MotionEvent event)</li>
    <li>boolean onTrackballEvent(MotionEvent event)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SimpleAdapter]]></title>
    <link href="http://dande618.github.com/blog/2013/01/11/adapter/"/>
    <updated>2013-01-11T10:27:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/01/11/adapter</id>
    <content type="html"><![CDATA[<p id="article">Android Adapter 是将数据绑定到UI 界面上的桥接类。 Adapter负责创建和显示每个项目的子View和提供对下层数据的访问。支持Adapter绑定的UI控件必须扩展Adapter View抽象类。创建自己的继承自AdapterView的控件和创建新的Adapter类来绑定它们是可能的。</p>


<!-- more -->


<p><img src="http://img14.poco.cn/mypoco/myphoto/20130111/09/430947902013011109012106.png" width="610">
<img src="http://img14.poco.cn/mypoco/myphoto/20130111/09/4309479020130111090229016.jpg" width="610"></p>

<h2>ListView和ListAdapter</h2>


<p class="laiyuan">[转载]<a href="http://blog.sina.com.cn/s/blog_7db304660100x2f0.html">文章出处</a></p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//新建一个ListView,也就是新建一个列表，在新建一个组件是会将一个Content传递给构造函数</span>
</span><span class='line'><span class="n">listView</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListView</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="c1">// 将ListView和ArrayAdapter进行绑定，listview会把ArrayAdapter里面的数据显示出来</span>
</span><span class='line'><span class="c1">// ArrayAdapter的第一个参数是Context，即上下文的引用</span>
</span><span class='line'><span class="c1">// 第二个参数为一个在R文件里定义的Layout，不过是系统的R文件</span>
</span><span class='line'><span class="c1">// simple_list_item_single_choice表明ListView里边的每一项都只有一个TextView</span>
</span><span class='line'><span class="c1">// 第三个参数为一个数组</span>
</span><span class='line'><span class="n">listView</span><span class="o">.</span><span class="na">setAdapter</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayAdapter</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;(</span><span class="k">this</span><span class="o">,</span>
</span><span class='line'><span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">simple_list_item_single_choice</span><span class="o">,</span> <span class="n">data</span><span class="o">));</span>
</span><span class='line'><span class="n">listView</span><span class="o">.</span><span class="na">setItemsCanFocus</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'><span class="n">listView</span><span class="o">.</span><span class="na">setChoiceMode</span><span class="o">(</span><span class="n">ListView</span><span class="o">.</span><span class="na">CHOICE_MODE_MULTIPLE</span><span class="o">);</span>
</span><span class='line'><span class="c1">// 将listView内容直接进行显示</span>
</span><span class='line'><span class="n">setContentView</span><span class="o">(</span><span class="n">listView</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>




<h3>什么是ListAdapter?</h3>


<p class="para">ListAdapter继承于Adapter，它是ListView和其里面数据的适配器。也就是要让一个ListView显示出来需要三个东西：</p>


<ol>
    <li>ListView (需要被显示的列表)。</li>
    <li>Data, 和ListView绑定的数据，一般是一个Cursor或者一个字符串数组。</li>
    <li>ListAdapter,是data和ListView的桥梁，起一个适配器的作用。</li>
</ol>


<h3>什么是ArrayAdapter?</h3>


<p class="para">ArrayAdapter是ListAdapter的一个直接子类，意思是数组适配器。</p>


<p class="para">它的作用就是一个数组和ListView之间的桥梁。它将数组里定义的数据一一对应的显示在ListView里，通常有ArrayAdapter进行适配的ListView每一项通常只有一个TextView，而TextView里面显示的内容就是数组里面的对象调用toString()方法后生成的字符串。</p>


<h3>SimpleAdapter</h3>


<p class="para">SimpleAdapter也是ListAdapter的直接子类。通过SimpleAdapter可以让ListView当中的每一项里边的内容更加个性化。通常将ListView中某项的布局信息写在一个xml的布局文件当中。这个布局文件通过R.layout.file获得。</p>


<p class="para">ArrayAdapter的作用是数组和ListView间的桥梁；而SimpleAdapter的作用是ArrayList和ListView间的桥梁。</p>


<p class="para">注意，这个ArrayList里面的每一项都是一个Map<String,?>类型。ArrayList当中的每一项Map对象都和ListView当中的一项进行数据绑定和一一对应。</p>


<h3>Android系统默认的布局方式</h3>


<p class="para">Android.R.layout_simple_list_item_1, 每一项只有一个TextView.</p>


<p class="para">Android.R.layout_simple_list_item_2, 每一项只有两个TextView.</p>


<p class="para">Android.R.layout_simple_list_item_single_choice, 每一项有一个TextView，但是这一项可以被选择。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面向对象基本概念（一）]]></title>
    <link href="http://dande618.github.com/blog/2012/12/14/object/"/>
    <updated>2012-12-14T17:20:00+08:00</updated>
    <id>http://dande618.github.com/blog/2012/12/14/object</id>
    <content type="html"><![CDATA[<p id="article">在深入某种编程语言或建模语言前必须先熟悉<strong>面向对象</strong>（object-oriented，ＯＯ）思维过程。</p>


<!-- more -->


<p class="dk">对象（object）可以定义为同时包含数据和行为的一个实体。这里的“同时包含”正是ＯＯ程序设计和其他程序设计方法的重要区别。</p>


<p class="para">在ＯＯ设计中，属性和行为都包含在一个对象中，而在过程式设计中（或者说结构化设计）中，属性和行为是分开的。</p>


<p class="dk">数据隐藏（data hiding）：在ＯＯ术语中，数据表示为属性，行为表示为方法，限制对某些属性和方法的访问称为数据隐藏。</p>


<p class="dk">封装（encapsulation）：通过把属性和方法合并到一个实体中，就能控制对对象中数据的访问。</p>


<p class="para">一般情况下，对象不应处理其他对象的内部数据。通常更好的做法是构建完成特定任务的小对象，而不是建立完成很多任务的大型对象。</p>


<p class="para">过程式程序设计通常将系统的数据与处理这些数据的操作相分离。</p>


<p class="para">ＯＯ程序设计最根本的优点是：数据和处理这些数据的操作（代码）都封装在对象中。</p>


<p class="dk">存储在一个对象中的数据表示对象的状态。在ＯＯ程序设计术语中，该数据称为属性（attribute）。</p>


<p class="dk">对象的行为（behavior）就是对象能够做什么。在ＯＯ程序设计术语中，这些行为包含在方法（method）中，要通过发送消息来调用方法。</p>


<p class="para">要记住，使用对象有很多优点，其中最有意思（最强大）的一点就是数据是包的一部分——它不与代码分离。</p>


<p class="para">获取方法和设置方法的概念支持数据隐藏的概念。因为其他对象不能直接处理另一个对象内部的数据，所以获取方法和设置方法提供了对对象的数据的一种控制访问。</p>


<p class="para">只是给出方法的接口，而没有展示具体实现。用户只需要一下信息就能知道如何有效地使用这些方法。</p>


<ul>
    <li>方法名</li>
    <li>传入方法的参数</li>
    <li>方法的返回类型</li>
</ul>


<h3>类是什么？</h3>


<p class="para">现在可以把类认为是一种<strong>模板</strong>，由这个模板建立对象。创建一个对象时，我们称对象被实例化。从概念层次来讲，可以认为对象完全是独立的，有其自己的属性和方法。</p>


<p class="para">简单来讲，类是对象的一个<strong>蓝图</strong>。实例化一个对象时，就是使用一个类作为构建这个对象的基础。在ＯＯ软件中，应该先有类。如果没有类，对象就无法实例化。</p>


<p class="para">每个对象都有其自己的属性和行为。类定义用这个类创建的所有对象拥有的属性和行为。类是一些代码。有类实例化得到的对象可以单独分布，也可以作为库的一部分。</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ANDROID命名规范]]></title>
    <link href="http://dande618.github.com/blog/2012/12/13/name/"/>
    <updated>2012-12-13T16:51:00+08:00</updated>
    <id>http://dande618.github.com/blog/2012/12/13/name</id>
    <content type="html"><![CDATA[<p>要时刻注意代码的规范性和可读性。</p>

<!-- more -->


<ul>
    <li>类命名，需要清晰的命名，首字母大写，不包括数字与下划线。正确的方式：MyClass 错误的方式：Myclass, My_Class, myClass, my_class</li>
    <li>成员变量命名，需要清晰命名，首字母小写，私有以及保护成员变量首字母以 m 开始, 表示 member, 以方便别人阅读代码。正确的方式：mPrivateData，一般容易犯的错误是不写 m, 和临时变量命名一致，这样使得代码阅读时候容易混淆。</li>
    <li>临时变量命名，需要清晰命名，首字母小写，比如： int tempDataCount;</li>
    <li>成员函数命名，命名清晰，首字母小写，比如： functionForWhat();</li>
</ul>


<p><a href=" http://source.android.com/source/code-style.html">android code style</a></p>

<br/>


<h2>Android命名规范</h2>


<p class="laiyuan">[转载]<a href="http://www.cnblogs.com/xiongbo/archive/2011/08/15/2098130.html">文章出处</a></p>


<h3>1.java代码中不出现中文，最多注释中可以出现中文</h3>


<h3>2.局部变量命名、静态成员变量命名</h3>


<p class="para">只能包含字母，单词首字母出第一个外，都为大写，其他字母都为小写</p>


<h3>3.常量命名</h3>


<p class="para">只能包含字母和_，字母全部大写，单词之间用_隔开</p>


<h3>4.layout中的id命名</h3>


<p class="para">命名模式为：view缩写_模块名称_view的逻辑名称</p>


<p class="para">view的缩写详情如下</p>


<p class="para">LayoutView：lv</p>


<p class="para">RelativeView:rv</p>


<p class="para">TextView:tv</p>


<p class="para">ImageView:iv</p>


<p class="para">ImageButton:im</p>


<p class="para">Button:btn</p>


<h3>5.activity中的view变量命名</h3>


<p class="para">命名模式为：逻辑名称+view缩写</p>


<p class="para">建议：如果layout文件很复杂，建议将layout分成多个模块，每个模块定义一个moduleViewHolder，其成员变量包含所属view</p>


<h3>6.strings.xml中的id命名</h3>


<p class="para">命名模式：activity名称_功能模块名称_逻辑名称/activity名称_逻辑名称/common_逻辑名称</p>


<p class="para">strings.xml中，使用activity名称注释，将文件内容区分开来</p>


<h3>7.drawable中的图片命名</h3>


<p class="para">命名模式：activity名称_逻辑名称/common_逻辑名称</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修改代码时git的操作流程]]></title>
    <link href="http://dande618.github.com/blog/2012/12/13/github/"/>
    <updated>2012-12-13T16:50:00+08:00</updated>
    <id>http://dande618.github.com/blog/2012/12/13/github</id>
    <content type="html"><![CDATA[<!-- more -->


<p class="laiyuan">[转载]　<a href="http://yuanhsh.iteye.com/blog/987705">文章出处</a></p>


<ol>
<li>修改任何代码前，请创建一个新的branch
<pre class="wiki">git checkout -b &lt;branch_name&gt;
</pre>
</li>
<li>执行完上述命令后会自动切换到&lt;branch_name&gt;分支，现在你就可以开始开发了。开发期间，你可能会多次执行
<pre class="wiki">git add .
git commit -m ""
</pre>
</li>
<li>当你开发完毕，需要合并到master上时
<pre class="wiki">git checkout master    #先切换回master
git pull                       #这里不可能有任何冲突，因为master是不会本地修改的
git checkout &lt;branch_name&gt;  #切换回开发分支
git rebase master       #这时候可能会产生冲突，哪些文件冲突了，反馈信息里有明确显示
如果发生了冲突：
首先，编辑修复所有冲突的代码。然后：
git add .
git rebase --continue

git checkout master   
git merge &lt;branch_name&gt;
git push                    #其实这个时候还是有可能有冲突
git pull --rebase
接着与上面处理冲突的方法一致</pre>
</li>
</ol>

]]></content>
  </entry>
  
</feed>
