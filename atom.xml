<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[初心]]></title>
  <link href="http://dande618.github.com/atom.xml" rel="self"/>
  <link href="http://dande618.github.com/"/>
  <updated>2013-01-28T22:02:26+08:00</updated>
  <id>http://dande618.github.com/</id>
  <author>
    <name><![CDATA[dande618]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[认识Handler]]></title>
    <link href="http://dande618.github.com/blog/2013/01/28/handler/"/>
    <updated>2013-01-28T11:36:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/01/28/handler</id>
    <content type="html"><![CDATA[<p>主要接受子线程发送的数据, 并用此数据配合主线程更新UI。
主要是为了解决Android应用的多线程问题。Android平台不允许Activity新启动的线程访问该Activity里的界面组件，这样就会导致新启动的线程无法动态改变界面组件的属性值。</p>

<!-- more -->


<p>Handler类的主要作用有两个：</p>

<ul>
    <li>在新启动的线程中发送消息。</li>
    <li>在主线程中获取、处理消息。</li>
</ul>


<p>通过回调的方式来实现，重写Handler类中处理消息的方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[事件处理]]></title>
    <link href="http://dande618.github.com/blog/2013/01/26/listener/"/>
    <updated>2013-01-26T10:27:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/01/26/listener</id>
    <content type="html"><![CDATA[<p>Android的时间处理机制包括</p>

<ul>
    <li>基于监听的事件处理</li>
    <li>基于回调的事件处理</li>
</ul>


<!-- more -->


<p>基于监听的事件处理：为界面组件绑定监听器。
基于回调的事件处理：重写组件（Activity）特定的回调方法。</p>

<h2>基于监听的事件处理</h2>


<ol>
    <li>获取被监听的对象（即界面组件）</li>
    <li>实现事件监听器（即一个实现XxxListener接口的类）</li>
    <li>调用事件源的setXxxListener(XxxListener)方法将事件监听器注册给被监听的对象</li>
</ol>


<p>View类的接口有</p>

<ul>
    <li>View.OnClickListener</li>
    <li>View.OnCreateContextMenuLister</li>
    <li>View.OnFocusChangeListener</li>
    <li>View.OnKeyListener</li>
    <li>View.OnLongClickListener</li>
    <li>View.OnTouchListener</li>
</ul>


<p>实现事件监听器的形式</p>

<ul>
    <li>内部类形式</li>
    <li>外部类形式</li>
    <li>Activity本身作为事件监听器类</li>
    <li>匿名内部类</li>（常用）
    <li>直接绑定到标签</li>
</ul>


<h2>基于回调的事件处理</h2>


<p>以View类为例，一些事件处理的回调方法</p>

<ul>
    <li>boolean onKeyDown(int keyCode,KeyEvent event)</li>
    <li>boolean onKeyLongPress(int keyCode,KeyEvent event)</li>
    <li>boolean onKeyShortcut(int keyCode,KeyEvent event)</li>
    <li>boolean onKeyUp(int keyCode,KeyEvent event)</li>
    <li>boolean onTouchEvent(MotionEvent event)</li>
    <li>boolean onTrackballEvent(MotionEvent event)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SimpleAdapter]]></title>
    <link href="http://dande618.github.com/blog/2013/01/11/adapter/"/>
    <updated>2013-01-11T10:27:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/01/11/adapter</id>
    <content type="html"><![CDATA[<p id="article">Android Adapter 是将数据绑定到UI 界面上的桥接类。 Adapter负责创建和显示每个项目的子View和提供对下层数据的访问。支持Adapter绑定的UI控件必须扩展Adapter View抽象类。创建自己的继承自AdapterView的控件和创建新的Adapter类来绑定它们是可能的。</p>


<!-- more -->


<p><img src="http://img14.poco.cn/mypoco/myphoto/20130111/09/430947902013011109012106.png" width="610">
<img src="http://img14.poco.cn/mypoco/myphoto/20130111/09/4309479020130111090229016.jpg" width="610"></p>

<h2>ListView和ListAdapter</h2>


<p class="laiyuan">[转载]<a href="http://blog.sina.com.cn/s/blog_7db304660100x2f0.html">文章出处</a></p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//新建一个ListView,也就是新建一个列表，在新建一个组件是会将一个Content传递给构造函数</span>
</span><span class='line'><span class="n">listView</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListView</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="c1">// 将ListView和ArrayAdapter进行绑定，listview会把ArrayAdapter里面的数据显示出来</span>
</span><span class='line'><span class="c1">// ArrayAdapter的第一个参数是Context，即上下文的引用</span>
</span><span class='line'><span class="c1">// 第二个参数为一个在R文件里定义的Layout，不过是系统的R文件</span>
</span><span class='line'><span class="c1">// simple_list_item_single_choice表明ListView里边的每一项都只有一个TextView</span>
</span><span class='line'><span class="c1">// 第三个参数为一个数组</span>
</span><span class='line'><span class="n">listView</span><span class="o">.</span><span class="na">setAdapter</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayAdapter</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;(</span><span class="k">this</span><span class="o">,</span>
</span><span class='line'><span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">simple_list_item_single_choice</span><span class="o">,</span> <span class="n">data</span><span class="o">));</span>
</span><span class='line'><span class="n">listView</span><span class="o">.</span><span class="na">setItemsCanFocus</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'><span class="n">listView</span><span class="o">.</span><span class="na">setChoiceMode</span><span class="o">(</span><span class="n">ListView</span><span class="o">.</span><span class="na">CHOICE_MODE_MULTIPLE</span><span class="o">);</span>
</span><span class='line'><span class="c1">// 将listView内容直接进行显示</span>
</span><span class='line'><span class="n">setContentView</span><span class="o">(</span><span class="n">listView</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>




<h3>什么是ListAdapter?</h3>


<p class="para">ListAdapter继承于Adapter，它是ListView和其里面数据的适配器。也就是要让一个ListView显示出来需要三个东西：</p>


<ol>
    <li>ListView (需要被显示的列表)。</li>
    <li>Data, 和ListView绑定的数据，一般是一个Cursor或者一个字符串数组。</li>
    <li>ListAdapter,是data和ListView的桥梁，起一个适配器的作用。</li>
</ol>


<h3>什么是ArrayAdapter?</h3>


<p class="para">ArrayAdapter是ListAdapter的一个直接子类，意思是数组适配器。</p>


<p class="para">它的作用就是一个数组和ListView之间的桥梁。它将数组里定义的数据一一对应的显示在ListView里，通常有ArrayAdapter进行适配的ListView每一项通常只有一个TextView，而TextView里面显示的内容就是数组里面的对象调用toString()方法后生成的字符串。</p>


<h3>SimpleAdapter</h3>


<p class="para">SimpleAdapter也是ListAdapter的直接子类。通过SimpleAdapter可以让ListView当中的每一项里边的内容更加个性化。通常将ListView中某项的布局信息写在一个xml的布局文件当中。这个布局文件通过R.layout.file获得。</p>


<p class="para">ArrayAdapter的作用是数组和ListView间的桥梁；而SimpleAdapter的作用是ArrayList和ListView间的桥梁。</p>


<p class="para">注意，这个ArrayList里面的每一项都是一个Map<String,?>类型。ArrayList当中的每一项Map对象都和ListView当中的一项进行数据绑定和一一对应。</p>


<h3>Android系统默认的布局方式</h3>


<p class="para">Android.R.layout_simple_list_item_1, 每一项只有一个TextView.</p>


<p class="para">Android.R.layout_simple_list_item_2, 每一项只有两个TextView.</p>


<p class="para">Android.R.layout_simple_list_item_single_choice, 每一项有一个TextView，但是这一项可以被选择。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面向对象基本概念（一）]]></title>
    <link href="http://dande618.github.com/blog/2012/12/14/object/"/>
    <updated>2012-12-14T17:20:00+08:00</updated>
    <id>http://dande618.github.com/blog/2012/12/14/object</id>
    <content type="html"><![CDATA[<p id="article">在深入某种编程语言或建模语言前必须先熟悉<strong>面向对象</strong>（object-oriented，ＯＯ）思维过程。</p>


<!-- more -->


<p class="dk">对象（object）可以定义为同时包含数据和行为的一个实体。这里的“同时包含”正是ＯＯ程序设计和其他程序设计方法的重要区别。</p>


<p class="para">在ＯＯ设计中，属性和行为都包含在一个对象中，而在过程式设计中（或者说结构化设计）中，属性和行为是分开的。</p>


<p class="dk">数据隐藏（data hiding）：在ＯＯ术语中，数据表示为属性，行为表示为方法，限制对某些属性和方法的访问称为数据隐藏。</p>


<p class="dk">封装（encapsulation）：通过把属性和方法合并到一个实体中，就能控制对对象中数据的访问。</p>


<p class="para">一般情况下，对象不应处理其他对象的内部数据。通常更好的做法是构建完成特定任务的小对象，而不是建立完成很多任务的大型对象。</p>


<p class="para">过程式程序设计通常将系统的数据与处理这些数据的操作相分离。</p>


<p class="para">ＯＯ程序设计最根本的优点是：数据和处理这些数据的操作（代码）都封装在对象中。</p>


<p class="dk">存储在一个对象中的数据表示对象的状态。在ＯＯ程序设计术语中，该数据称为属性（attribute）。</p>


<p class="dk">对象的行为（behavior）就是对象能够做什么。在ＯＯ程序设计术语中，这些行为包含在方法（method）中，要通过发送消息来调用方法。</p>


<p class="para">要记住，使用对象有很多优点，其中最有意思（最强大）的一点就是数据是包的一部分——它不与代码分离。</p>


<p class="para">获取方法和设置方法的概念支持数据隐藏的概念。因为其他对象不能直接处理另一个对象内部的数据，所以获取方法和设置方法提供了对对象的数据的一种控制访问。</p>


<p class="para">只是给出方法的接口，而没有展示具体实现。用户只需要一下信息就能知道如何有效地使用这些方法。</p>


<ul>
    <li>方法名</li>
    <li>传入方法的参数</li>
    <li>方法的返回类型</li>
</ul>


<h3>类是什么？</h3>


<p class="para">现在可以把类认为是一种<strong>模板</strong>，由这个模板建立对象。创建一个对象时，我们称对象被实例化。从概念层次来讲，可以认为对象完全是独立的，有其自己的属性和方法。</p>


<p class="para">简单来讲，类是对象的一个<strong>蓝图</strong>。实例化一个对象时，就是使用一个类作为构建这个对象的基础。在ＯＯ软件中，应该先有类。如果没有类，对象就无法实例化。</p>


<p class="para">每个对象都有其自己的属性和行为。类定义用这个类创建的所有对象拥有的属性和行为。类是一些代码。有类实例化得到的对象可以单独分布，也可以作为库的一部分。</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ANDROID命名规范]]></title>
    <link href="http://dande618.github.com/blog/2012/12/13/name/"/>
    <updated>2012-12-13T16:51:00+08:00</updated>
    <id>http://dande618.github.com/blog/2012/12/13/name</id>
    <content type="html"><![CDATA[<p>要时刻注意代码的规范性和可读性。</p>

<!-- more -->


<ul>
    <li>类命名，需要清晰的命名，首字母大写，不包括数字与下划线。正确的方式：MyClass 错误的方式：Myclass, My_Class, myClass, my_class</li>
    <li>成员变量命名，需要清晰命名，首字母小写，私有以及保护成员变量首字母以 m 开始, 表示 member, 以方便别人阅读代码。正确的方式：mPrivateData，一般容易犯的错误是不写 m, 和临时变量命名一致，这样使得代码阅读时候容易混淆。</li>
    <li>临时变量命名，需要清晰命名，首字母小写，比如： int tempDataCount;</li>
    <li>成员函数命名，命名清晰，首字母小写，比如： functionForWhat();</li>
</ul>


<p><a href=" http://source.android.com/source/code-style.html">android code style</a></p>

<br/>


<h2>Android命名规范</h2>


<p class="laiyuan">[转载]<a href="http://www.cnblogs.com/xiongbo/archive/2011/08/15/2098130.html">文章出处</a></p>


<h3>1.java代码中不出现中文，最多注释中可以出现中文</h3>


<h3>2.局部变量命名、静态成员变量命名</h3>


<p class="para">只能包含字母，单词首字母出第一个外，都为大写，其他字母都为小写</p>


<h3>3.常量命名</h3>


<p class="para">只能包含字母和_，字母全部大写，单词之间用_隔开</p>


<h3>4.layout中的id命名</h3>


<p class="para">命名模式为：view缩写_模块名称_view的逻辑名称</p>


<p class="para">view的缩写详情如下</p>


<p class="para">LayoutView：lv</p>


<p class="para">RelativeView:rv</p>


<p class="para">TextView:tv</p>


<p class="para">ImageView:iv</p>


<p class="para">ImageButton:im</p>


<p class="para">Button:btn</p>


<h3>5.activity中的view变量命名</h3>


<p class="para">命名模式为：逻辑名称+view缩写</p>


<p class="para">建议：如果layout文件很复杂，建议将layout分成多个模块，每个模块定义一个moduleViewHolder，其成员变量包含所属view</p>


<h3>6.strings.xml中的id命名</h3>


<p class="para">命名模式：activity名称_功能模块名称_逻辑名称/activity名称_逻辑名称/common_逻辑名称</p>


<p class="para">strings.xml中，使用activity名称注释，将文件内容区分开来</p>


<h3>7.drawable中的图片命名</h3>


<p class="para">命名模式：activity名称_逻辑名称/common_逻辑名称</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修改代码时git的操作流程]]></title>
    <link href="http://dande618.github.com/blog/2012/12/13/github/"/>
    <updated>2012-12-13T16:50:00+08:00</updated>
    <id>http://dande618.github.com/blog/2012/12/13/github</id>
    <content type="html"><![CDATA[<!-- more -->


<p class="laiyuan">[转载]　<a href="http://yuanhsh.iteye.com/blog/987705">文章出处</a></p>


<ol>
<li>修改任何代码前，请创建一个新的branch
<pre class="wiki">git checkout -b &lt;branch_name&gt;
</pre>
</li>
<li>执行完上述命令后会自动切换到&lt;branch_name&gt;分支，现在你就可以开始开发了。开发期间，你可能会多次执行
<pre class="wiki">git add .
git commit -m ""
</pre>
</li>
<li>当你开发完毕，需要合并到master上时
<pre class="wiki">git checkout master    #先切换回master
git pull                       #这里不可能有任何冲突，因为master是不会本地修改的
git checkout &lt;branch_name&gt;  #切换回开发分支
git rebase master       #这时候可能会产生冲突，哪些文件冲突了，反馈信息里有明确显示
如果发生了冲突：
首先，编辑修复所有冲突的代码。然后：
git add .
git rebase --continue

git checkout master   
git merge &lt;branch_name&gt;
git push                    #其实这个时候还是有可能有冲突
git pull --rebase
接着与上面处理冲突的方法一致</pre>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[汉字测试123]]></title>
    <link href="http://dande618.github.com/blog/2012/09/10/test2/"/>
    <updated>2012-09-10T10:27:00+08:00</updated>
    <id>http://dande618.github.com/blog/2012/09/10/test2</id>
    <content type="html"><![CDATA[<!-- more -->


<p><embed src="http://www.xiami.com/widget/0_1769657875/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent"></embed></p>

<p id="article">首字下沉测试首字下沉测试首字下沉测试首字下沉测试首字下沉测试首字下沉测试首字下沉测试首字下沉测试首字下沉测试首字下沉测试首字下沉测试首字下沉测试首字下沉测试首字下沉测试首字下沉测试首字下沉测试首字下沉测试首字下沉测试</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Count</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　</span><span class="kt">int</span> <span class="n">count</span><span class="o">;</span>
</span><span class='line'><span class="err">　　</span><span class="kd">public</span> <span class="n">Count</span><span class="o">(){</span>
</span><span class='line'><span class="err">　　　　</span><span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="err">　　</span><span class="o">}</span>
</span><span class='line'><span class="err">　　</span><span class="kd">public</span> <span class="n">Count</span> <span class="o">(</span><span class="kt">int</span> <span class="n">number</span><span class="o">){</span>
</span><span class='line'><span class="err">　　　　</span><span class="n">count</span> <span class="o">=</span> <span class="n">number</span><span class="o">;</span>
</span><span class='line'><span class="err">　　</span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<blockquote><p><strong>加粗测试</strong><br/>Last night I lay in bed looking up at the stars in the sky and I thought to myself, where the heck is the ceiling.</p></blockquote>


<p><strong>加粗测试</strong>
<em>斜体测试</em></p>

<h1>标题1</h1>


<h2>标题2</h2>


<h3>标题3</h3>


<p class="para">正文</p>


<h4>标题4</h4>


<h5>标题5</h5>


<h6>标题6</h6>

]]></content>
  </entry>
  
</feed>
