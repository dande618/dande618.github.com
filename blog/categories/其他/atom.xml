<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 其他 | 初心]]></title>
  <link href="http://dande618.github.com/blog/categories/其他/atom.xml" rel="self"/>
  <link href="http://dande618.github.com/"/>
  <updated>2013-02-15T17:04:23+08:00</updated>
  <id>http://dande618.github.com/</id>
  <author>
    <name><![CDATA[dande618]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[正则表达式]]></title>
    <link href="http://dande618.github.com/blog/2013/02/15/regex/"/>
    <updated>2013-02-15T16:00:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/02/15/regex</id>
    <content type="html"><![CDATA[<p>在计算机科学中，是指一个用来描述或者匹配一系列符合某个句法规则的字符串的单个字符串。在很多文本编辑器或其他工具里，正则表达式通常被用来检索和/或替换那些符合某个模式的文本内容。许多程序设计语言都支持利用正则表达式进行字符串操作。</p>

<br/>


<!-- more -->


<table border="1" style="font-size:0.7em" log-set-param="table_view"><tr><td valign="top" > <div>元字符 </div>
</td><td valign="top" > <div>描述</div>
</td></tr><tr><td valign="top" > <div>\</div>
</td><td valign="top" > <div>将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“\n”匹配字符“n”。“\\n”匹配一个换行符。序列“\\”匹配“\”而“\(”则匹配“(”。</div>
</td></tr><tr><td valign="top" > <div>^</div>
</td><td valign="top" > <div>匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“\n”或“\r”之后的位置。</div>
</td></tr><tr><td valign="top" > <div>$</div>
</td><td valign="top" > <div>匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“\n”或“\r”之前的位置。</div>
</td></tr><tr><td valign="top" > <div>*</div>
</td><td valign="top" > <div>匹配前面的子表达式零次或多次。例如，zo*能匹配“z”以及“zoo”。*等价于{0,}。</div>
</td></tr><tr><td valign="top" > <div>+</div>
</td><td valign="top" > <div>匹配前面的子表达式一次或多次。例如，“zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}。</div>
</td></tr><tr><td valign="top" > <div>?</div>
</td><td valign="top" > <div>匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“does”或“does”中的“do”。?等价于{0,1}。</div>
</td></tr><tr><td valign="top" > <div>{n}</div>
</td><td valign="top" > <div>n是一个非负整数。匹配确定的n次。例如，“o{2}”不能匹配“Bob”中的“o”，但是能匹配“food”中的两个o。</div>
</td></tr><tr><td valign="top" > <div>{n,}</div>
</td><td valign="top" > <div>n是一个非负整数。至少匹配n次。例如，“o{2,}”不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。“o{1,}”等价于“o+”。“o{0,}”则等价于“o*”。</div>
</td></tr><tr><td valign="top" > <div>{n,m}</div>
</td><td valign="top" > <div>m和n均为非负整数，其中n&lt;=m。最少匹配n次且最多匹配m次。例如，“o{1,3}”将匹配“fooooood”中的前三个o。“o{0,1}”等价于“o?”。请注意在逗号和两个数之间不能有空格。</div>
</td></tr><tr><td valign="top" > <div>?</div>
</td><td valign="top" > <div>当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“oooo”，“o+?”将匹配单个“o”，而“o+”将匹配所有“o”。</div>
</td></tr><tr><td valign="top" > <div>.点</div>
</td><td valign="top" > <div>匹配除“\n”之外的任何单个字符。要匹配包括“\n”在内的任何字符，请使用像“&#91;\s\S&#93;”的模式。</div>
</td></tr><tr><td valign="top" > <div>(pattern)</div>
</td><td valign="top" > <div>匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“\(”或“\)”。</div>
</td></tr><tr><td valign="top" > <div>(?:pattern)</div>
</td><td valign="top" > <div>匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“(|)”来组合一个模式的各个部分是很有用。例如“industr(?:y|ies)”就是一个比“industry|industries”更简略的表达式。</div>
</td></tr><tr><td valign="top" > <div>(?=pattern)</div>
</td><td valign="top" > <div>正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“Windows(?=95|98|NT|2000)”能匹配“Windows2000”中的“Windows”，但不能匹配“Windows3.1”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</div>
</td></tr><tr><td valign="top" > <div>(?!pattern)</div>
</td><td valign="top" > <div>正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“Windows(?!95|98|NT|2000)”能匹配“Windows3.1”中的“Windows”，但不能匹配“Windows2000”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</div>
</td></tr><tr><td valign="top" > <div>(?&lt;=pattern)</div>
</td><td valign="top" > <div>反向肯定预查，与正向肯定预查类似，只是方向相反。例如，“(?&lt;=95|98|NT|2000)Windows”能匹配“2000Windows”中的“Windows”，但不能匹配“3.1Windows”中的“Windows”。</div>
</td></tr><tr><td valign="top" > <div>(?&lt;!pattern)</div>
</td><td valign="top" > <div>反向否定预查，与正向否定预查类似，只是方向相反。例如“(?&lt;!95|98|NT|2000)Windows”能匹配“3.1Windows”中的“Windows”，但不能匹配“2000Windows”中的“Windows”。</div>
</td></tr><tr><td valign="top" > <div>x|y</div>
</td><td valign="top" > <div>匹配x或y。例如，“z|food”能匹配“z”或“food”。“(z|f)ood”则匹配“zood”或“food”。</div>
</td></tr><tr><td valign="top" > <div>&#91;xyz&#93;</div>
</td><td valign="top" > <div>字符集合。匹配所包含的任意一个字符。例如，“&#91;abc&#93;”可以匹配“plain”中的“a”。</div>
</td></tr><tr><td valign="top" > <div>&#91;^xyz&#93;</div>
</td><td valign="top" > <div>负值字符集合。匹配未包含的任意字符。例如，“&#91;^abc&#93;”可以匹配“plain”中的“plin”。</div>
</td></tr><tr><td valign="top" > <div>&#91;a-z&#93;</div>
</td><td valign="top" > <div>字符范围。匹配指定范围内的任意字符。例如，“&#91;a-z&#93;”可以匹配“a”到“z”范围内的任意小写字母字符。</div>
</td></tr><tr><td valign="top" > <div>&#91;^a-z&#93;</div>
</td><td valign="top" > <div>负值字符范围。匹配任何不在指定范围内的任意字符。例如，“&#91;^a-z&#93;”可以匹配任何不在“a”到“z”范围内的任意字符。</div>
</td></tr><tr><td valign="top" > <div>\b</div>
</td><td valign="top" > <div>匹配一个单词边界，也就是指单词和空格间的位置。例如，“er\b”可以匹配“never”中的“er”，但不能匹配“verb”中的“er”。</div>
</td></tr><tr><td valign="top" > <div>\B</div>
</td><td valign="top" > <div>匹配非单词边界。“er\B”能匹配“verb”中的“er”，但不能匹配“never”中的“er”。</div>
</td></tr><tr><td valign="top" > <div>\cx</div>
</td><td valign="top" > <div>匹配由x指明的控制字符。例如，\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“c”字符。</div>
</td></tr><tr><td valign="top" > <div>\d</div>
</td><td valign="top" > <div>匹配一个数字字符。等价于&#91;0-9&#93;。</div>
</td></tr><tr><td align="left" valign="center" height="0"><div>\D</div>
</td><td align="left" valign="center" height="0"><div>匹配一个非数字字符。等价于&#91;^0-9&#93;。</div>
</td></tr><tr><td align="left" valign="center" height="0"><div>\f</div>
</td><td align="left" valign="center" height="0"><div>匹配一个换页符。等价于\x0c和\cL。</div>
</td></tr><tr><td align="left" valign="center" height="0"><div>\n</div>
</td><td align="left" valign="center" height="0"><div>匹配一个换行符。等价于\x0a和\cJ。</div>
</td></tr><tr><td align="left" valign="center" height="0"><div>\r</div>
</td><td align="left" valign="center" height="0"><div>匹配一个回车符。等价于\x0d和\cM。</div>
</td></tr><tr><td align="left" valign="center" height="0"><div>\s</div>
</td><td align="left" valign="center" height="0"><div>匹配任何空白字符，包括空格、制表符、换页符等等。等价于&#91; \f\n\r\t\v&#93;。</div>
</td></tr><tr><td align="left" valign="center" height="0"><div>\S</div>
</td><td align="left" valign="center" height="0"><div>匹配任何非空白字符。等价于&#91;^ \f\n\r\t\v&#93;。</div>
</td></tr><tr><td align="left" valign="center" height="0"><div>\t</div>
</td><td align="left" valign="center" height="0"><div>匹配一个制表符。等价于\x09和\cI。</div>
</td></tr><tr><td align="left" valign="center" height="0"><div>\v</div>
</td><td align="left" valign="center" height="0"><div>匹配一个垂直制表符。等价于\x0b和\cK。</div>
</td></tr><tr><td align="left" valign="center" height="0"><div>\w</div>
</td><td align="left" valign="center" height="0"><div>匹配包括下划线的任何单词字符。等价于“&#91;A-Za-z0-9_&#93;”。</div>
</td></tr><tr><td align="left" valign="center" height="0"><div>\W</div>
</td><td align="left" valign="center" height="0"><div>匹配任何非单词字符。等价于“&#91;^A-Za-z0-9_&#93;”。</div>
</td></tr><tr><td align="left" valign="center" height="0"><div>\xn</div>
</td><td align="left" valign="center" height="0"><div>匹配n，其中n为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“\x41”匹配“A”。“\x041”则等价于“\x04&amp;1”。正则表达式中可以使用ASCII编码。</div>
</td></tr><tr><td align="left" valign="center" height="0"><div>\num</div>
</td><td align="left" valign="center" height="0"><div>匹配num，其中num是一个正整数。对所获取的匹配的引用。例如，“(.)\1”匹配两个连续的相同字符。</div>
</td></tr><tr><td align="left" valign="center" height="0"><div>\n</div>
</td><td align="left" valign="center" height="0"><div>标识一个八进制转义值或一个向后引用。如果\n之前至少n个获取的子表达式，则n为向后引用。否则，如果n为八进制数字（0-7），则n为一个八进制转义值。</div>
</td></tr><tr><td align="left" valign="center" height="0"><div>\nm</div>
</td><td align="left" valign="center" height="0"><div>标识一个八进制转义值或一个向后引用。如果\nm之前至少有nm个获得子表达式，则nm为向后引用。如果\nm之前至少有n个获取，则n为一个后跟文字m的向后引用。如果前面的条件都不满足，若n和m均为八进制数字（0-7），则\nm将匹配八进制转义值nm。</div>
</td></tr><tr><td align="left" valign="center" height="0"><div>\nml</div>
</td><td align="left" valign="center" height="0"><div>如果n为八进制数字（0-3），且m和l均为八进制数字（0-7），则匹配八进制转义值nml。</div>
</td></tr><tr><td align="left" valign="center" height="0"><div>\un</div>
</td><td align="left" valign="center" height="0"><div>匹配n，其中n是一个用四个十六进制数字表示的Unicode字符。例如，\u00A9匹配版权符号（&copy;）。</div>
</td></tr></table>

]]></content>
  </entry>
  
</feed>
