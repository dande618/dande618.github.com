<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | 初心]]></title>
  <link href="http://dande618.github.com/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://dande618.github.com/"/>
  <updated>2013-02-01T10:30:36+08:00</updated>
  <id>http://dande618.github.com/</id>
  <author>
    <name><![CDATA[dande618]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[认识Intent]]></title>
    <link href="http://dande618.github.com/blog/2013/01/29/intent/"/>
    <updated>2013-01-29T20:29:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/01/29/intent</id>
    <content type="html"><![CDATA[<p class="para">Intent：意图</p>


<p class="para">当一个Activity需要启动另一个Activity时，程序并没有直接告诉系统要启动那个Activity，而是通过Intent来表达自己的意图：需要启动哪个Activity。</p>


<!-- more -->


<p class="para">Intent封装Android应用程序需要启动某个组件的“意图”。不仅如此，Intent还是应用程序组件之间通讯的重要媒介。两个Activity可以把需要交换的数据封装成Bundle对象，然后使用Intent来携带Bundle对象，这样就实现了两个Activity之间的数据交换。</p>


<p>Android的应用程序包含三种重要的组件：Activity、Service、BroadcastReceiver，应用程序采用了一致的方式来启动他们——都是依靠Intent来进行启动的，Intent就封装了程序想要启动程序的意图，不仅如此，Intent还可用于与被启动组件交换信息。</p>

<p class="para">通过点击按钮打开另一个Activity</p>


<p>{% codeblock lang:java %}
button.setOnClickListener
  (
   new OnClickListener()
   {</p>

<pre><code>@Override
public void onClick(View v) {
 Intent intent=new Intent();
 intent.setClass(MainActivity.this, SecondActivity.class);
 startActivity(intent);
}
</code></pre>

<p>   }
  );
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[认识Bundle]]></title>
    <link href="http://dande618.github.com/blog/2013/01/29/Bundle/"/>
    <updated>2013-01-29T15:22:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/01/29/Bundle</id>
    <content type="html"><![CDATA[<p class="para">用于不同Activity之间的数据传递</p>


<!-- more -->


<h2>重要方法</h2>


<p class="para">clear()：清除此Bundle映射中的所有保存的数据。</p>


<p class="para">clone()：克隆当前Bundle</p>


<p class="para">containsKey(String key)：返回指定key的值</p>


<p class="para">getString(String key)：返回指定key的字符</p>


<p class="para">hasFileDescriptors()：指示是否包含任何捆绑打包文件描述符</p>


<p class="para">isEmpty()：如果这个捆绑映射为空，则返回true</p>


<p class="para">putString(String key, String value):插入一个给定key的字符串值</p>


<p class="para">readFromParcel(Parcel parcel)：读取这个parcel的内容</p>


<p class="para">remove(String key)：移除指定key的值</p>


<p class="para">writeToParcel(Parcel parcel, int flags)：写入这个parcel的内容</p>


<h2>Android Bundle类</h2>


<p></p>

<p class="laiyuan">[转载]　<a href="http://blog.csdn.net/randyjiawenjie/article/details/6651437">文章出处</a></p>


<p class="para">根据google官方的文档（http://developer.android.com/reference/android/os/Bundle.html）</p>


<p class="para">Bundle类是一个key-value对，“A mapping from String values to various Parcelable types.”</p>


<p class="para">类继承关系：</p>


<p class="dk">java.lang.Object</p>


<p class="dk">android.os.Bundle</p>


<p class="para">Bundle类是一个final类：</p>


<p class="dk">public final class</p>


<p class="dk">Bundle</p>


<p class="dk">extends Objectimplements Parcelable Cloneable</p>


<p class="para">两个activity之间的通讯可以通过bundle类来实现，做法就是：</p>


<p class="para">（1）新建一个bundle类</p>


<p>{% codeblock lang:java %}
Bundle mBundle = new Bundle();
{% endcodeblock %}
（2）bundle类中加入数据（key -value的形式，另一个activity里面取数据的时候，就要用到key，找出对应的value）
{% codeblock lang:java %}
mBundle.putString("Data", "data from TestBundle");
{% endcodeblock %}
(3)新建一个intent对象，并将该bundle加入这个intent对象
{% codeblock lang:java %}
Intent intent = new Intent();  <br/>
intent.setClass(TestBundle.this, Target.class);  <br/>
intent.putExtras(mBundle);
{% endcodeblock %}</p>

<p class="para">完整代码见原文</p>


<p>————————</p>

<p>Activity1：
{% codeblock lang:java %}
btn.setOnClickListener</p>

<pre><code>    (
     new OnClickListener()
     {
@Override
public void onClick(View v) {
 String str=ev.getText().toString().trim();
 Intent intent=new Intent();
 intent.setClass(Activity1.this,Activity2.class);
 Bundle bundle=new Bundle();
 bundle.putString("str", str);
 intent.putExtras(bundle);//绑定信息
 startActivity(intent);//启动Activity
 Activity1.this.finish();//关闭Activity
}      
</code></pre>

<p> }
);
{% endcodeblock %}</p>

<p>Activity2：
{% codeblock lang:java %}
public void onCreate(Bundle savedInstanceState)
 {
  super.onCreate(savedInstanceState);
  setContentView(R.layout.anthor);
  TextView tv=(TextView)this.findViewById(R.id.TextView1);//显示的信息
  Button button=(Button)this.findViewById(R.id.anthorButton);//返回按钮
  Bundle bundle=this.getIntent().getExtras();
  String str=bundle.getString("str");
  StringBuilder sb=new StringBuilder();
  sb.append("您填写的信息为："+str+"\n");
  tv.setText(sb.toString().trim());</p>

<p>  button.setOnClickListener
  (
   new OnClickListener()
   {</p>

<pre><code>@Override
public void onClick(View v) {
 Intent intent=new Intent();
 intent.setClass(Activity2.this,Activity1.class);
 startActivity(intent);
 AnotherActivity.this.finish();//关闭Activity
}    
</code></pre>

<p>   }
  );
 }
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[认识Handler]]></title>
    <link href="http://dande618.github.com/blog/2013/01/28/handler/"/>
    <updated>2013-01-28T11:36:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/01/28/handler</id>
    <content type="html"><![CDATA[<p>主要接受子线程发送的数据, 并用此数据配合主线程更新UI。
主要是为了解决Android应用的多线程问题。Android平台不允许Activity新启动的线程访问该Activity里的界面组件，这样就会导致新启动的线程无法动态改变界面组件的属性值。</p>

<!-- more -->


<p>Handler类的主要作用有两个：</p>

<ul>
    <li>在新启动的线程中发送消息。</li>
    <li>在主线程中获取、处理消息。</li>
</ul>


<p>通过回调的方式来实现，重写Handler类中处理消息的方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[事件处理]]></title>
    <link href="http://dande618.github.com/blog/2013/01/26/listener/"/>
    <updated>2013-01-26T10:27:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/01/26/listener</id>
    <content type="html"><![CDATA[<p>Android的时间处理机制包括</p>

<ul>
    <li>基于监听的事件处理</li>
    <li>基于回调的事件处理</li>
</ul>


<!-- more -->


<p>基于监听的事件处理：为界面组件绑定监听器。
基于回调的事件处理：重写组件（Activity）特定的回调方法。</p>

<h2>基于监听的事件处理</h2>


<ol>
    <li>获取被监听的对象（即界面组件）</li>
    <li>实现事件监听器（即一个实现XxxListener接口的类）</li>
    <li>调用事件源的setXxxListener(XxxListener)方法将事件监听器注册给被监听的对象</li>
</ol>


<p>View类的接口有</p>

<ul>
    <li>View.OnClickListener</li>
    <li>View.OnCreateContextMenuLister</li>
    <li>View.OnFocusChangeListener</li>
    <li>View.OnKeyListener</li>
    <li>View.OnLongClickListener</li>
    <li>View.OnTouchListener</li>
</ul>


<p>实现事件监听器的形式</p>

<ul>
    <li>内部类形式</li>
    <li>外部类形式</li>
    <li>Activity本身作为事件监听器类</li>
    <li>匿名内部类</li>（常用）
    <li>直接绑定到标签</li>
</ul>


<h2>基于回调的事件处理</h2>


<p>以View类为例，一些事件处理的回调方法</p>

<ul>
    <li>boolean onKeyDown(int keyCode,KeyEvent event)</li>
    <li>boolean onKeyLongPress(int keyCode,KeyEvent event)</li>
    <li>boolean onKeyShortcut(int keyCode,KeyEvent event)</li>
    <li>boolean onKeyUp(int keyCode,KeyEvent event)</li>
    <li>boolean onTouchEvent(MotionEvent event)</li>
    <li>boolean onTrackballEvent(MotionEvent event)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SimpleAdapter]]></title>
    <link href="http://dande618.github.com/blog/2013/01/11/adapter/"/>
    <updated>2013-01-11T10:27:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/01/11/adapter</id>
    <content type="html"><![CDATA[<p id="article">Android Adapter 是将数据绑定到UI 界面上的桥接类。 Adapter负责创建和显示每个项目的子View和提供对下层数据的访问。支持Adapter绑定的UI控件必须扩展Adapter View抽象类。创建自己的继承自AdapterView的控件和创建新的Adapter类来绑定它们是可能的。</p>


<!-- more -->


<p>{% img http://img14.poco.cn/mypoco/myphoto/20130111/09/430947902013011109012106.png 610 %}
{% img http://img14.poco.cn/mypoco/myphoto/20130111/09/4309479020130111090229016.jpg 610 %}</p>

<h2>ListView和ListAdapter</h2>


<p class="laiyuan">[转载]<a href="http://blog.sina.com.cn/s/blog_7db304660100x2f0.html">文章出处</a></p>


<p>{% codeblock lang:java %}
//新建一个ListView,也就是新建一个列表，在新建一个组件是会将一个Content传递给构造函数
listView = new ListView(this);
// 将ListView和ArrayAdapter进行绑定，listview会把ArrayAdapter里面的数据显示出来
// ArrayAdapter的第一个参数是Context，即上下文的引用
// 第二个参数为一个在R文件里定义的Layout，不过是系统的R文件
// simple_list_item_single_choice表明ListView里边的每一项都只有一个TextView
// 第三个参数为一个数组
listView.setAdapter(new ArrayAdapter<String>(this,
android.R.layout.simple_list_item_single_choice, data));
listView.setItemsCanFocus(true);
listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
// 将listView内容直接进行显示
setContentView(listView);
{% endcodeblock %}</p>

<h3>什么是ListAdapter?</h3>


<p class="para">ListAdapter继承于Adapter，它是ListView和其里面数据的适配器。也就是要让一个ListView显示出来需要三个东西：</p>


<ol>
    <li>ListView (需要被显示的列表)。</li>
    <li>Data, 和ListView绑定的数据，一般是一个Cursor或者一个字符串数组。</li>
    <li>ListAdapter,是data和ListView的桥梁，起一个适配器的作用。</li>
</ol>


<h3>什么是ArrayAdapter?</h3>


<p class="para">ArrayAdapter是ListAdapter的一个直接子类，意思是数组适配器。</p>


<p class="para">它的作用就是一个数组和ListView之间的桥梁。它将数组里定义的数据一一对应的显示在ListView里，通常有ArrayAdapter进行适配的ListView每一项通常只有一个TextView，而TextView里面显示的内容就是数组里面的对象调用toString()方法后生成的字符串。</p>


<h3>SimpleAdapter</h3>


<p class="para">SimpleAdapter也是ListAdapter的直接子类。通过SimpleAdapter可以让ListView当中的每一项里边的内容更加个性化。通常将ListView中某项的布局信息写在一个xml的布局文件当中。这个布局文件通过R.layout.file获得。</p>


<p class="para">ArrayAdapter的作用是数组和ListView间的桥梁；而SimpleAdapter的作用是ArrayList和ListView间的桥梁。</p>


<p class="para">注意，这个ArrayList里面的每一项都是一个Map<String,?>类型。ArrayList当中的每一项Map对象都和ListView当中的一项进行数据绑定和一一对应。</p>


<h3>Android系统默认的布局方式</h3>


<p class="para">Android.R.layout_simple_list_item_1, 每一项只有一个TextView.</p>


<p class="para">Android.R.layout_simple_list_item_2, 每一项只有两个TextView.</p>


<p class="para">Android.R.layout_simple_list_item_single_choice, 每一项有一个TextView，但是这一项可以被选择。</p>

]]></content>
  </entry>
  
</feed>
