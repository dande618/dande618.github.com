<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[初心]]></title>
  <link href="http://dande618.github.com/atom.xml" rel="self"/>
  <link href="http://dande618.github.com/"/>
  <updated>2013-04-27T20:12:21+08:00</updated>
  <id>http://dande618.github.com/</id>
  <author>
    <name><![CDATA[dande618]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android SQLite]]></title>
    <link href="http://dande618.github.com/blog/2013/04/27/SQLite/"/>
    <updated>2013-04-27T21:11:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/04/27/SQLite</id>
    <content type="html"><![CDATA[<p>SQLite是android内置的一个很小的关系型数据库。</p>

<!-- more -->




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">SQLiteDatabase</span> <span class="n">db</span><span class="o">;</span>
</span><span class='line'><span class="c1">//新建或打开数据库，使用绝对路径</span>
</span><span class='line'><span class="n">db</span> <span class="o">=</span> <span class="n">SQLiteDatabase</span><span class="o">.</span><span class="na">openOrCreateDatabase</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getFilesDir</span><span class="o">().</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;/my.db&quot;</span> <span class="o">,</span> <span class="kc">null</span><span class="o">);</span>       
</span></code></pre></td></tr></table></div></figure>


<p>获得SQLiteDatabase对象后，就可以通过SQLiteDatabase对象操作、管理数据库。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">db</span><span class="o">.</span><span class="na">execSQL</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span> <span class="c1">//sql为SQL语句</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者使用SQLiteDatabase的insert、update、delete、query语句来操作数据库。</p>

<h2>SQLiteOpenHelper</h2>

<p>SQLiteOpenHelper是一个辅助类来管理数据库的创建和版本。</p>

<p>可以通过继承这个类，实现它的一些方法来对数据库进行一些操作。
所有继承了这个类的类都必须实现下面这样的一个构造方法：
public DatabaseHelper(Context context, String name, CursorFactory factory, int version)
第一个参数：Context类型，上下文对象。
第二个参数：String类型，数据库的名称
第三个参数：CursorFactory类型
第四个参数：int类型，数据库版本
下面是这个类的几个方法：</p>

<p>方法名 返回类型 描述 备注
getReadableDatabase() synchronized SQLiteDatabase 创建或打开一个数据库 可以通过这两个方法返回的SQLiteDatabase对象对数据库进行一系列的操作，如新建一个表，插入一条数据等
getWritableDatabase() synchronized SQLiteDatabase 创建或打开一个可以读写的数据库
onCreate(SQLiteDatabase db) abstract void 第一次创建的时候调用
onOpen(SQLiteDatabase db) void 打开数据库
onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion) abstract void 升级数据库
close() synchronized void 关闭所有打开的数据库对象</p>

<h3>MyDataBaseAdapter.java</h3>

<br />




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">sqltest</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.content.ContentValues</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.content.Context</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.database.Cursor</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.database.SQLException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.database.sqlite.SQLiteDatabase</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.database.sqlite.SQLiteOpenHelper</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyDataBaseAdapter</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// 用于打印log</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TAG</span> <span class="o">=</span> <span class="s">&quot;MyDataBaseAdapter&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 表中一条数据的名称</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">KEY_ID</span> <span class="o">=</span> <span class="s">&quot;_id&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 表中一条数据的内容</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">KEY_NUM</span> <span class="o">=</span> <span class="s">&quot;num&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="c1">// 表中一条数据的id</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">KEY_DATA</span> <span class="o">=</span> <span class="s">&quot;data&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 数据库名称为data</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">DB_NAME</span> <span class="o">=</span> <span class="s">&quot;Examples1.db&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 数据库表名</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">DB_TABLE</span> <span class="o">=</span> <span class="s">&quot;table1&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 数据库版本</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">DB_VERSION</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 本地Context对象</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Context</span> <span class="n">mContext</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 创建一个表</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">DB_CREATE</span> <span class="o">=</span> <span class="s">&quot;CREATE TABLE &quot;</span> <span class="o">+</span> <span class="n">DB_TABLE</span> <span class="o">+</span> <span class="s">&quot; (&quot;</span>
</span><span class='line'>          <span class="o">+</span> <span class="n">KEY_ID</span> <span class="o">+</span> <span class="s">&quot; INTEGER PRIMARY KEY,&quot;</span> <span class="o">+</span> <span class="n">KEY_NUM</span> <span class="o">+</span> <span class="s">&quot; INTERGER,&quot;</span>
</span><span class='line'>          <span class="o">+</span> <span class="n">KEY_DATA</span> <span class="o">+</span> <span class="s">&quot; TEXT)&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 执行open（）打开数据库时，保存返回的数据库对象</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">SQLiteDatabase</span> <span class="n">mSQLiteDatabase</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 由SQLiteOpenHelper继承过来</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">DatabaseHelper</span> <span class="n">mDatabaseHelper</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">DatabaseHelper</span> <span class="kd">extends</span> <span class="n">SQLiteOpenHelper</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* 构造函数-创建一个数据库 */</span>
</span><span class='line'>      <span class="n">DatabaseHelper</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// 当调用getWritableDatabase()</span>
</span><span class='line'>          <span class="c1">// 或 getReadableDatabase()方法时</span>
</span><span class='line'>          <span class="c1">// 则创建一个数据库</span>
</span><span class='line'>          <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">DB_NAME</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">DB_VERSION</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* 创建一个表 */</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">SQLiteDatabase</span> <span class="n">db</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// 数据库没有表时创建一个</span>
</span><span class='line'>          <span class="n">db</span><span class="o">.</span><span class="na">execSQL</span><span class="o">(</span><span class="n">DB_CREATE</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* 升级数据库 */</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onUpgrade</span><span class="o">(</span><span class="n">SQLiteDatabase</span> <span class="n">db</span><span class="o">,</span> <span class="kt">int</span> <span class="n">oldVersion</span><span class="o">,</span> <span class="kt">int</span> <span class="n">newVersion</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">db</span><span class="o">.</span><span class="na">execSQL</span><span class="o">(</span><span class="s">&quot;DROP TABLE IF EXISTS notes&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">onCreate</span><span class="o">(</span><span class="n">db</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* 构造函数-取得Context */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">MyDataBaseAdapter</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">mContext</span> <span class="o">=</span> <span class="n">context</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 打开数据库，返回数据库对象</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">open</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">mDatabaseHelper</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DatabaseHelper</span><span class="o">(</span><span class="n">mContext</span><span class="o">);</span>
</span><span class='line'>      <span class="n">mSQLiteDatabase</span> <span class="o">=</span> <span class="n">mDatabaseHelper</span><span class="o">.</span><span class="na">getWritableDatabase</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 关闭数据库</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">mDatabaseHelper</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* 插入一条数据 */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">long</span> <span class="nf">insertData</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">,</span> <span class="n">String</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">ContentValues</span> <span class="n">initialValues</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ContentValues</span><span class="o">();</span>
</span><span class='line'>      <span class="n">initialValues</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">KEY_NUM</span><span class="o">,</span> <span class="n">num</span><span class="o">);</span>
</span><span class='line'>      <span class="n">initialValues</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">KEY_DATA</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="n">mSQLiteDatabase</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="n">DB_TABLE</span><span class="o">,</span> <span class="n">KEY_ID</span><span class="o">,</span> <span class="n">initialValues</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* 删除一条数据 */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">deleteData</span><span class="o">(</span><span class="kt">long</span> <span class="n">rowId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="n">mSQLiteDatabase</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">DB_TABLE</span><span class="o">,</span> <span class="n">KEY_ID</span> <span class="o">+</span> <span class="s">&quot;=&quot;</span> <span class="o">+</span> <span class="n">rowId</span><span class="o">,</span> <span class="kc">null</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* 通过Cursor查询所有数据 */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Cursor</span> <span class="nf">fetchAllData</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="n">mSQLiteDatabase</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="n">DB_TABLE</span><span class="o">,</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span> <span class="n">KEY_ID</span><span class="o">,</span> <span class="n">KEY_NUM</span><span class="o">,</span>
</span><span class='line'>              <span class="n">KEY_DATA</span> <span class="o">},</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* 查询指定数据 */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Cursor</span> <span class="nf">fetchData</span><span class="o">(</span><span class="kt">long</span> <span class="n">rowId</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">Cursor</span> <span class="n">mCursor</span> <span class="o">=</span> <span class="n">mSQLiteDatabase</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="kc">true</span><span class="o">,</span> <span class="n">DB_TABLE</span><span class="o">,</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">KEY_ID</span><span class="o">,</span> <span class="n">KEY_NUM</span><span class="o">,</span> <span class="n">KEY_DATA</span> <span class="o">},</span> <span class="n">KEY_ID</span> <span class="o">+</span> <span class="s">&quot;=&quot;</span> <span class="o">+</span> <span class="n">rowId</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span>
</span><span class='line'>              <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">mCursor</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">mCursor</span><span class="o">.</span><span class="na">moveToFirst</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">mCursor</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* 更新一条数据 */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">updateData</span><span class="o">(</span><span class="kt">long</span> <span class="n">rowId</span><span class="o">,</span> <span class="kt">int</span> <span class="n">num</span><span class="o">,</span> <span class="n">String</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">ContentValues</span> <span class="n">args</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ContentValues</span><span class="o">();</span>
</span><span class='line'>      <span class="n">args</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">KEY_NUM</span><span class="o">,</span> <span class="n">num</span><span class="o">);</span>
</span><span class='line'>      <span class="n">args</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">KEY_DATA</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="n">mSQLiteDatabase</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">DB_TABLE</span><span class="o">,</span> <span class="n">args</span><span class="o">,</span> <span class="n">KEY_ID</span> <span class="o">+</span> <span class="s">&quot;=&quot;</span> <span class="o">+</span> <span class="n">rowId</span><span class="o">,</span>
</span><span class='line'>              <span class="kc">null</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>MainAcitivity.java</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">sqltest</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.app.Activity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.database.Cursor</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Bundle</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.support.v4.widget.SimpleCursorAdapter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.Menu</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.ListAdapter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.ListView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">MyDataBaseAdapter</span> <span class="n">mdba</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>      <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>      <span class="n">mdba</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyDataBaseAdapter</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>      <span class="n">mdba</span><span class="o">.</span><span class="na">open</span><span class="o">();</span>
</span><span class='line'>      <span class="n">mdba</span><span class="o">.</span><span class="na">insertData</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="s">&quot;test1&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onCreateOptionsMenu</span><span class="o">(</span><span class="n">Menu</span> <span class="n">menu</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Inflate the menu; this adds items to the action bar if it is present.</span>
</span><span class='line'>      <span class="n">getMenuInflater</span><span class="o">().</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">menu</span><span class="o">.</span><span class="na">main</span><span class="o">,</span> <span class="n">menu</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;deprecation&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">show</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Cursor</span> <span class="n">cursor</span> <span class="o">=</span> <span class="n">mdba</span><span class="o">.</span><span class="na">fetchAllData</span><span class="o">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">cursor</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">ListAdapter</span> <span class="n">adapter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SimpleCursorAdapter</span><span class="o">(</span><span class="k">this</span><span class="o">,</span>
</span><span class='line'>                  <span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">simple_list_item_2</span><span class="o">,</span> <span class="n">cursor</span><span class="o">,</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span>
</span><span class='line'>                          <span class="n">MyDataBaseAdapter</span><span class="o">.</span><span class="na">KEY_ID</span><span class="o">,</span>
</span><span class='line'>                          <span class="n">MyDataBaseAdapter</span><span class="o">.</span><span class="na">KEY_DATA</span> <span class="o">},</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span>
</span><span class='line'>                          <span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">text1</span><span class="o">,</span> <span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">text2</span> <span class="o">});</span>
</span><span class='line'>          <span class="n">ListView</span> <span class="n">listView</span><span class="o">=(</span><span class="n">ListView</span><span class="o">)</span><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">list</span><span class="o">);</span>
</span><span class='line'>          <span class="n">listView</span><span class="o">.</span><span class="na">setAdapter</span><span class="o">(</span><span class="n">adapter</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL基础知识]]></title>
    <link href="http://dande618.github.com/blog/2013/04/26/SQL/"/>
    <updated>2013-04-26T22:22:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/04/26/SQL</id>
    <content type="html"><![CDATA[<p>DDL、DML和DCL的理解</p>

<p>【转载】<a href="http://www.2cto.com/database/201208/146501.html">http://www.2cto.com/database/201208/146501.html</a></p>

<!-- more -->


<h2>1、DDL</h2>

<h3>1-1、DDL的概述</h3>

<p>DDL（Data Definition Language 数据定义语言）用于操作对象和对象的属性，这种对象包括数据库本身，以及数据库对象，像：表、视图等等，DDL对这些对象和属性的管理和定义具体表现在Create、Drop和Alter上。特别注意：DDL操作的“对象”的概念，”对象“包括对象及对象的属性，而且对象最小也比记录大个层次。以表举例：Create创建数据表，Alter可以更改该表的字段，Drop可以删除这个表，从这里我们可以看到，DDL所站的高度，他不会对具体的数据进行操作。</p>

<h3>1-2、DDL的主要语句（操作）</h3>

<p>Create语句：可以创建数据库和数据库的一些对象。</p>

<p>Drop语句：可以删除数据表、索引、触发程序、条件约束以及数据表的权限等。</p>

<p>Alter语句：修改数据表定义及属性。</p>

<h3>1-3、DDL的操作对象（表）</h3>

<h4>1-3-1、表的概念</h4>

<p>表的创建就是用来存放数据用的，由于我们存放的数据的不通，所以我们需要定义些数据类型，以方便管理。</p>

<h4>1-3-2、表的属性</h4>

<p>主键属性：主键就是主键约束，只不过起的名字不同了，主键的起名偏向于虚的（就是描述描述这件事），主键约束起名偏向于实得（就是描述操作的实施），描述的都是同一件事，主键约束就是表中的一个属性；在一个表中最多可以有一个主键；一个主键可以定义在一个或多个字段；主键使一个或多个字段的值必须唯一且不为空，这样做可以通过该字段或该组字段中的值唯一的代表一条记录。</p>

<p>唯一属性：一个表中只能有一个主键属性，为了方表用户，提出唯一约束；唯一约束可以定义在一个或多个字段上；唯一约束使该字段或该组字段中的值唯一，可以为空，但是，不能重复。</p>

<p>外键属性：又叫外键，又叫外键约束，跟主键和主键约束的关系是一样的；外键约束针对的两个表，如果表A的主关键字是表B中的字段，则该字段称为表B的外键，表A称为主表，表B称为从表，但要注意，必须要计算机要知道你是这种关系。</p>

<p>核查、Null和缺省属性：核查属性又叫核查约束，Null属性又叫Null约束，缺省属性又叫缺省约束；这些名称是描述一件事，描述一种情况，这件事或这张情况我们当然可以人为的那样特意做（输入数据是注意就行），但是，他们的本意是实现自动化，也就是让计算机做这件事。</p>

<p>（你知道为什么建立主键和唯一约束的时候，会自动的创建索引吗？而且是唯一索引，想一想索引大多在那些字段上用，以及索引的作用就会知道了。像主键约束、唯一约束、非空约束、外键约束、核查约束和缺省约束这些操作都是使表具有某些特性，所以在这里我认为他们都是表的属性。）</p>

<h2>2、DML</h2>

<h3>2-1、DML的概述</h3>

<p>DML（Data Manipulation Language 数据操控语言）用于操作数据库对象中包含的数据，也就是说操作的单位是记录。</p>

<h3>2-2、DML的主要语句（操作）</h3>

<p>Insert语句：向数据表张插入一条记录。</p>

<p>Delete语句：删除数据表中的一条或多条记录，也可以删除数据表中的所有记录，但是，它的操作对象仍是记录。</p>

<p>Update语句：用于修改已存在表中的记录的内容。</p>

<h3>2-3、DML的操作对象——记录</h3>

<h4>2-3-1、注意</h4>

<p>当我们对记录进行Insert、Delete和Update操作的时候，一定要注意，一定要清楚DDL对其的一些操作。</p>

<h2>3、DCL</h2>

<h3>3-1、DCL的概述</h3>

<p>DCL（Data Control Language 数据控制语句）的操作是数据库对象的权限，这些操作的确定使数据更加的安全。</p>

<h3>3-2、DCL的主要语句（操作）</h3>

<p>Grant语句：允许对象的创建者给某用户或某组或所有用户（PUBLIC）某些特定的权限。</p>

<p>Revoke语句：可以废除某用户或某组或所有用户访问权限</p>

<h3>3-3、DCL的操作对象（用户）</h3>

<p>此时的用户指的是数据库用户。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ShareAction在AVD失效的问题]]></title>
    <link href="http://dande618.github.com/blog/2013/04/07/ShareButtonDonotWork/"/>
    <updated>2013-04-07T11:11:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/04/07/ShareButtonDonotWork</id>
    <content type="html"><![CDATA[<p>　　在虚拟机（AVD，Android Virtual Device）使用ActionBar／ActionBarSherlock）上的ShareAction分享按键，怎么点也点不出程式列表，但在手机上没有问题。</p>

<!-- more -->


<br />


<p><img class="center" src="http://img14.poco.cn/mypoco/myphoto/20130407/09/4309479020130407093427048.jpg" title="ShareAction" ></p>

<br />


<p>　　在网路上查找，确有人反映过这个问题，应该是一个BUG。</p>

<p>　　参见 <a href="http://code.google.com/p/android/issues/detail?id=25467">android.widget.ShareActionProvider does not work on the emulator</a></p>

<br />


<p><img class="center" src="http://img14.poco.cn/mypoco/myphoto/20130409/10/4309479020130409101555091.jpg" title="ShareActionProvider" ></p>

<p>　　此图是系统提供的ShareActionProvider类及相关对象，提供快速存取提供共享服务的Action。</p>

<p>　　整个类图主要包括ShareActionProvider、ActivityChooserModel、ActivityChooserView、ActivityChooserViewAdapter等对象。</p>

<p>　　派生自ActionProvider的具体类ShareActionProvider，用来实例化ActivityChooserModel、ActivityChooserView对象，并为ActivityChooserView对象设置数据模式，生成视图，操作和获取Model信息，根据Model信息创建活动菜单。</p>

<p>　　ActivityChooserModel、ActivityChooserView、ActivityChooserViewAdapter三者构成MVC模式，分别对应Model、View及采用Adapter模式的Control，ActivityChooserView通过ActivityChooserViewAdapter获取ActivityChooserModel中的活动信息，ActivityChooserModel本身派生自DataSetObservable，可以在ActivityChooserView对象中为ActivityChooserModel对象登记一个DataSetObserver类型的对象，ActivityChooserModel对象通过该对象向ActivityChooserView对象发送ActivityChooserModel对象中的数据变化通知。</p>

<p>　　ActivityChooserModel对于通过intent从包管理器中获得的符合intent条件的活动记录（以ActivityResolveInfo类型保存在数组列表中mActivites）的排序方法采用了策略模式，排序方法被封装成对象，在没有通过setActivitySorter方法设置排序方法时，采用默认排序方法，由DefaultSorter对象封装。DefaultSorter对象提供的排序方法是依据活动记录中的weight值进行排序，被排序的活动记录的weight值还依据记录在HistoricalRecord（HistoricalRecord中的活动通过读私有的XML类型的共享历史文件获得）列表中的活动顺序进行修改，依据HistoricalRecord列表的从后往前的顺序为mActivites数组中对应的对象增加weight值，活动历史记录中越往后的记录在mActivites列表中对应活动增加的权值越小，最新的相应记录增加的权值越大。</p>

<p>　　HistoryPersister线程对象用于把HistoricalRecord列表中的记录保存到历史文件中。HistoryLoader线程对象用于读取历史文件到HistoricalRecord列表中。DataModelPackageMonitor对象用于监视数据包，在数据包更新时同步活动记录列表mActivites。ActivityChooserMode对象还通过Map类型的HashMap保证一个相同的历史文件只能实例化一个ActivityChooserModel对象，是单例模式的具体应用。</p>

<br />


<br />


<p>在ActivityChooserView.java内的ActivityChooserViewAdapter类</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">boolean</span> <span class="n">mShowDefaultActivity</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(!</span><span class="n">mShowDefaultActivity</span> <span class="o">&amp;&amp;</span> <span class="n">mDataModel</span><span class="o">.</span><span class="na">getDefaultActivity</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="n">activityCount</span><span class="o">--;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<br />




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="k">if</span> <span class="o">(</span><span class="n">activityCount</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">historySize</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mDefaultActivityButton</span><span class="o">.</span><span class="na">setVisibility</span><span class="o">(</span><span class="n">VISIBLE</span><span class="o">);</span>
</span><span class='line'>            <span class="n">ResolveInfo</span> <span class="n">activity</span> <span class="o">=</span> <span class="n">mAdapter</span><span class="o">.</span><span class="na">getDefaultActivity</span><span class="o">();</span>
</span><span class='line'>            <span class="n">PackageManager</span> <span class="n">packageManager</span> <span class="o">=</span> <span class="n">mContext</span><span class="o">.</span><span class="na">getPackageManager</span><span class="o">();</span>
</span><span class='line'>            <span class="n">mDefaultActivityButtonImage</span><span class="o">.</span><span class="na">setImageDrawable</span><span class="o">(</span><span class="n">activity</span><span class="o">.</span><span class="na">loadIcon</span><span class="o">(</span><span class="n">packageManager</span><span class="o">));</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">mDefaultActionButtonContentDescription</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">CharSequence</span> <span class="n">label</span> <span class="o">=</span> <span class="n">activity</span><span class="o">.</span><span class="na">loadLabel</span><span class="o">(</span><span class="n">packageManager</span><span class="o">);</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">contentDescription</span> <span class="o">=</span> <span class="n">mContext</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span>
</span><span class='line'>                        <span class="n">mDefaultActionButtonContentDescription</span><span class="o">,</span> <span class="n">label</span><span class="o">);</span>
</span><span class='line'>                <span class="n">mDefaultActivityButton</span><span class="o">.</span><span class="na">setContentDescription</span><span class="o">(</span><span class="n">contentDescription</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Work-around for #415.</span>
</span><span class='line'>            <span class="n">mAdapter</span><span class="o">.</span><span class="na">setShowDefaultActivity</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mDefaultActivityButton</span><span class="o">.</span><span class="na">setVisibility</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">GONE</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>　　当打开程式时，如果只有一个响应intent的程式，activityCount成为0，button因而不能使用。</p>

<br />


<br />


<br />


<br />




<div style="float:right;width:38.2%;margin-left: 0.6em;margin-top: 0.6em;"><img src="http://img14.poco.cn/mypoco/myphoto/20130407/09/4309479020130407093549098.jpg" /></div>


<p>　　据分析，当只有一个（或零个）程式接受Intent.ACTION_SEND（或其他）的某个类型（如text/plain）时，就无法点出分享。而AVD初始时可能只有SMS（简讯息）可接受此Intent。如果再装载一个程式（如微博客户端），就可以正常使用ShareAction打开分享程式列表了。由于ShareAction会记住使用最多的程式，并显示在ActionBar上，所以使用过一次分享到SMS后卸载掉“微博”也是会显示SMS。但这并不解决问题。</p>

<p>　　参见 <a href="https://github.com/JakeWharton/ActionBarSherlock/issues/415">ShareActionProvider does not work if only one intent</a></p>

<br />


<p>　　附ShareAction实现的部分代码（在SherlockFragment内，覆盖onCreateOptionsMenu方法）</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">ShareActionProvider</span> <span class="n">mShareActionProvider</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreateOptionsMenu</span><span class="o">(</span><span class="n">Menu</span> <span class="n">menu</span><span class="o">,</span> <span class="n">MenuInflater</span> <span class="n">inflater</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="n">MenuItem</span> <span class="n">menuItem</span> <span class="o">=</span> <span class="n">menu</span><span class="o">.</span><span class="na">findItem</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">share</span><span class="o">);</span>
</span><span class='line'><span class="c1">// Get the provider and hold onto it to set/change the share intent. </span>
</span><span class='line'><span class="n">mShareActionProvider</span> <span class="o">=</span> <span class="o">(</span><span class="n">ShareActionProvider</span><span class="o">)</span> <span class="n">menuItem</span><span class="o">.</span><span class="na">getActionProvider</span><span class="o">();</span>
</span><span class='line'><span class="n">GoodsItem</span> <span class="n">item</span> <span class="o">=</span> <span class="n">GoodsItemManager</span><span class="o">.</span><span class="na">instance</span><span class="o">().</span><span class="na">getGoodsItems</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="n">mPosition</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Intent</span> <span class="n">shareIntent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">ACTION_SEND</span><span class="o">);</span>
</span><span class='line'><span class="n">shareIntent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">EXTRA_SUBJECT</span><span class="o">,</span> <span class="n">getResources</span><span class="o">().</span><span class="na">getString</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">share_subject</span><span class="o">));</span>
</span><span class='line'><span class="n">shareIntent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">EXTRA_TEXT</span><span class="o">,</span> <span class="n">Html</span><span class="o">.</span><span class="na">fromHtml</span><span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">getTitle</span><span class="o">()));</span>
</span><span class='line'><span class="n">shareIntent</span><span class="o">.</span><span class="na">setType</span><span class="o">(</span><span class="s">&quot;text/plain&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">mShareActionProvider</span><span class="o">.</span><span class="na">setShareIntent</span><span class="o">(</span><span class="n">shareIntent</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<br />


<p>　　menu下的xml文件中定义</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;item</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/share&quot;</span>
</span><span class='line'>        <span class="na">android:icon=</span><span class="s">&quot;@drawable/ic_action_share&quot;</span>
</span><span class='line'>        <span class="na">android:showAsAction=</span><span class="s">&quot;ifRoom&quot;</span>
</span><span class='line'>        <span class="na">android:actionProviderClass=</span><span class="s">&quot;com.actionbarsherlock.widget.ShareActionProvider&quot;</span>
</span><span class='line'>        <span class="na">android:title=</span><span class="s">&quot;@string/action_share&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/item&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<br />


<p>　　ActionBarSherlock在最近修复了这个问题，详见<a href="https://github.com/JakeWharton/ActionBarSherlock/issues/415">上文链接</a>。有兴趣的朋友可以下载最新代码，或者在调试时装载其他支持分享的程式！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【转载】convertView&setTag方法的一点理解  ]]></title>
    <link href="http://dande618.github.com/blog/2013/03/22/convertView/"/>
    <updated>2013-03-22T22:02:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/03/22/convertView</id>
    <content type="html"><![CDATA[<p>convertView&amp;setTag方法的一点理解</p>

<p>转载来源 <a href="http://blog.163.com/freemanls@126/blog/static/164585061201171210504864/">http://blog.163.com/freemanls@126/blog/static/164585061201171210504864/</a></p>

<!-- more -->


<h2>前言</h2>

<p>　　首先我们要知道setTag方法是干什么的，SDK解释为</p>

<p>Tags</p>

<blockquote><p>Unlike IDs, tags are not used to identify views. Tags are essentially an extra piece of information that can be associated with a view. They are most often used as a convenience to store data related to views in the views themselves rather than by putting them in a separate structure.</p></blockquote>

<p>　　Tag不像ID是用标示view的。Tag从本质上来讲是就是相关联的view的额外的信息。它们经常用来存储一些view的数据，这样做非常方便而不用存入另外的单独结构。</p>

<h2>convertView中的TAG</h2>

<p>1.对于使用了LayoutInflater对象进行View扩充的Tag的使用</p>

<p>　　在之前，在adapter中，我们在getView中是这么些的代码：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">View</span> <span class="nf">getView</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">,</span> <span class="n">View</span> <span class="n">convertView</span><span class="o">,</span> <span class="n">ViewGroup</span> <span class="n">parent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="n">ViewHolder</span> <span class="n">holder</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">convertView</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="n">holder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ViewHolder</span><span class="o">();</span>
</span><span class='line'><span class="n">convertView</span> <span class="o">=</span> <span class="n">inflater</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">vlist2</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="n">holder</span><span class="o">.</span><span class="na">img</span> <span class="o">=</span> <span class="o">(</span><span class="n">ImageView</span><span class="o">)</span> <span class="n">convertView</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">img</span><span class="o">);</span>
</span><span class='line'><span class="n">holder</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">convertView</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">title</span><span class="o">);</span>
</span><span class='line'><span class="n">holder</span><span class="o">.</span><span class="na">info</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span>
</span><span class='line'><span class="n">convertView</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">info</span><span class="o">);</span>
</span><span class='line'><span class="c1">// setTag的妙用</span>
</span><span class='line'><span class="n">convertView</span><span class="o">.</span><span class="na">setTag</span><span class="o">(</span><span class="n">holder</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'><span class="c1">// setTag的妙用</span>
</span><span class='line'><span class="n">holder</span> <span class="o">=</span> <span class="o">(</span><span class="n">ViewHolder</span><span class="o">)</span> <span class="n">convertView</span><span class="o">.</span><span class="na">getTag</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">//……略</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>　　注意标红的地方，他们是使用了Tag的。</p>

<p>　　首先我们要知道setTag方法是干什么的，他是给View对象的一个标签，标签可以是任何内容，我们这里把他设置成了一个对象，因为我们是把vlist2.xml的元素抽象出来成为一个类ViewHolder，用了setTag，这个标签就是ViewHolder实例化后对象的一个属性。我们之后对于ViewHolder实例化的对象holder的操作，都会因为java的引用机制而一直存活并改变convertView的内容，而不是每次都是去new一个。我们就这样达到的重用——我希望我说清楚了。如果有更简单的解释，请指教。</p>

<p>　　这是我们在Adapter中的使用，那么我们在这里不使用Tag标签会怎么样呢？</p>

<p>　　我们试想，如果我们不用Tag标签，那么我们的对象如何与convertView缓存结合并达到合理的效率利用？貌似答案并不明朗——所以使用Tag是比较明智的做法。</p>

<p>2.对于没有使用LayoutInflater对象进行View扩充的Tag的使用。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">convertView</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="n">view</span> <span class="o">=</span> <span class="n">convertView</span><span class="o">;</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'><span class="n">view</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Xxx</span><span class="o">(...);</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>　　这是我们的程序，我们看到，貌似没有用Tag——是的，当没有使用LayoutInflater进行View的扩充的时候，是没有必要用的，虽然也可以用。</p>

<p>3.对于其他View的Tag使用</p>

<p>　　我们可以对所有的View对象进行操作，至于怎么用，就看作者怎么想的了，下面举例说一个View的子类button对于tag的一个使用。</p>

<p>　　直接贴代码了：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ButtonTagTestActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="kd">implements</span> <span class="n">OnClickListener</span> <span class="o">{</span>
</span><span class='line'><span class="cm">/** Called when the activity is first created. */</span>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'><span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">main</span><span class="o">);</span>
</span><span class='line'><span class="n">Button</span> <span class="n">button1</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">button1</span><span class="o">);</span>
</span><span class='line'><span class="n">Button</span> <span class="n">button2</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">button2</span><span class="o">);</span>
</span><span class='line'><span class="n">Button</span> <span class="n">button3</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">button3</span><span class="o">);</span>
</span><span class='line'><span class="n">button1</span><span class="o">.</span><span class="na">setTag</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'><span class="n">button2</span><span class="o">.</span><span class="na">setTag</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'><span class="n">button3</span><span class="o">.</span><span class="na">setTag</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
</span><span class='line'><span class="n">button1</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">arg0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="c1">// TODO Auto-generated method stub</span>
</span><span class='line'><span class="kt">int</span> <span class="n">tag</span> <span class="o">=</span> <span class="o">(</span><span class="n">Integer</span><span class="o">)</span> <span class="n">arg0</span><span class="o">.</span><span class="na">getTag</span><span class="o">();</span>
</span><span class='line'><span class="k">switch</span> <span class="o">(</span><span class="n">tag</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="k">case</span> <span class="mi">1</span><span class="o">:</span> <span class="o">{</span>
</span><span class='line'><span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="s">&quot;我是button1&quot;</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'><span class="k">break</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">case</span> <span class="mi">2</span><span class="o">:</span> <span class="o">{</span>
</span><span class='line'><span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="s">&quot;我是button2&quot;</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'><span class="k">break</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">case</span> <span class="mi">3</span><span class="o">:</span> <span class="o">{</span>
</span><span class='line'><span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="s">&quot;我是button3&quot;</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'><span class="k">break</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">default</span><span class="o">:</span> <span class="o">{</span>
</span><span class='line'><span class="k">break</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>　　Xml页面代码就不贴了。这个例子是点击界面上的3个button然后会显示用户点击的按钮。我们的程序是实现了页面全局监听，在监听前设置了每个button的tag，之后我们在switch的时候，使用getTag取出的标签来看是什么操作。</p>

<p>　　这样做的好处是可以将监听集中管理，提高代码的易读性——当然，这是我的自我理解。</p>

<h2>后记</h2>

<p>　　看了这么多的实例，我想已经明白了Tag以及convertView。</p>

<p>　　对我们知道了Tag的作用就是设置标签，标签可以是任意玩意。</p>

<p>　　以及convertView是如何在程序中使代码运行变的效率的：利用缓存convertView尽可能少实例化同样结构体的对象；</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【转载】android多种方式实现异步加载图片 ]]></title>
    <link href="http://dande618.github.com/blog/2013/03/14/threadpool/"/>
    <updated>2013-03-14T14:12:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/03/14/threadpool</id>
    <content type="html"><![CDATA[<p>转载来源 <a href="http://www.cnblogs.com/Jaylong/archive/2012/08/08/handler.html">http://www.cnblogs.com/Jaylong/archive/2012/08/08/handler.html</a></p>

<!-- more -->


<p>如果异步加载网络图片，要在非UI线程中进行。通常有以下四种方式：</p>

<p>1.handler+runnable方式：</p>

<p>在activity中定义handler,然后用handler.post（Runnable）方法，此时会在主线程中执行，如果是sdk3.0以上会阻塞UI线程，报异常</p>

<p>2.handler+thread+message模式：</p>

<p>在handler中重写handMessage方法，加载网络图片的操作在thread中执行，通过handler发送消息，在handlerMessage中更新UI</p>

<p>3.handler+threadpool(线程池)+message</p>

<p>定义一个线程池，存放5个线程，然后使用handler的post方法执行UI更新操作</p>

<p>4.handler+threadpool+message+softreference缓存</p>

<p>先从缓存中加载图片，如果没有，就从网络中加载，然后保存到缓存，其他步骤同3</p>

<p>获取网络图片的相关代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.allen.utils;
</span><span class='line'>
</span><span class='line'>import java.io.IOException;
</span><span class='line'>import java.io.InputStream;
</span><span class='line'>import java.lang.ref.SoftReference;
</span><span class='line'>import java.net.HttpURLConnection;
</span><span class='line'>import java.net.MalformedURLException;
</span><span class='line'>import java.net.URL;
</span><span class='line'>import java.util.Map;
</span><span class='line'>
</span><span class='line'>import android.graphics.Bitmap;
</span><span class='line'>import android.graphics.BitmapFactory;
</span><span class='line'>import android.graphics.drawable.Drawable;
</span><span class='line'>import android.util.Log;
</span><span class='line'>
</span><span class='line'>public class Utils {    
</span><span class='line'>    /**
</span><span class='line'>     * 获取网络中图片资源
</span><span class='line'>     * @param src 图片地址
</span><span class='line'>     * @return drawable对象
</span><span class='line'>     */
</span><span class='line'>    public static Drawable loadImage(String src){
</span><span class='line'>        URL url=null;
</span><span class='line'>        try {
</span><span class='line'>            url = new URL(src);
</span><span class='line'>        } catch (MalformedURLException e) {
</span><span class='line'>            Log.e("-Utils-->MalformedURLExcetion--", e.toString());
</span><span class='line'>        }
</span><span class='line'>        InputStream is=null;
</span><span class='line'>        try {
</span><span class='line'>            is = url.openStream();
</span><span class='line'>        } catch (IOException e) {
</span><span class='line'>            Log.e("-Utils-->IOException--", e.toString());
</span><span class='line'>        }
</span><span class='line'>        Drawable drawable=Drawable.createFromStream(is, "img");
</span><span class='line'>        return drawable;
</span><span class='line'>    }
</span><span class='line'>    /**  
</span><span class='line'>     * 从网络上下载  
</span><span class='line'>     * @param url  
</span><span class='line'>     * @return  
</span><span class='line'>     */  
</span><span class='line'>    public static Bitmap getBitMapFromUrl(String url) {   
</span><span class='line'>        Bitmap bitmap = null;   
</span><span class='line'>        URL u =null;   
</span><span class='line'>        HttpURLConnection conn = null;   
</span><span class='line'>        InputStream is = null;   
</span><span class='line'>        try {   
</span><span class='line'>            u = new URL(url);   
</span><span class='line'>            conn = (HttpURLConnection)u.openConnection();   
</span><span class='line'>            is = conn.getInputStream();   
</span><span class='line'>            bitmap = BitmapFactory.decodeStream(is);   
</span><span class='line'>        } catch (Exception e) {   
</span><span class='line'>            e.printStackTrace();   
</span><span class='line'>        }   
</span><span class='line'>        return bitmap;   
</span><span class='line'>    }   
</span><span class='line'>
</span><span class='line'>    /**  
</span><span class='line'>     * 从缓存中读取  
</span><span class='line'>     * @param url  
</span><span class='line'>     * @return  
</span><span class='line'>     * @throws Exception   
</span><span class='line'>     */  
</span><span class='line'>    public static Bitmap getImgFromCache(String url,Map&lt;String,SoftReference&lt;Bitmap>> imgCache) throws Exception {   
</span><span class='line'>        Bitmap bitmap = null;   
</span><span class='line'>        //从内存中读取   
</span><span class='line'>        if(imgCache.containsKey(url)) {   
</span><span class='line'>            synchronized (imgCache) {   
</span><span class='line'>                SoftReference&lt;Bitmap> bitmapReference = imgCache.get(url);   
</span><span class='line'>                if(null != bitmapReference) {   
</span><span class='line'>                    bitmap = bitmapReference.get();                                  
</span><span class='line'>                }   
</span><span class='line'>            }   
</span><span class='line'>        } else {//從網絡中下載  
</span><span class='line'>            bitmap = getBitMapFromUrl(url);   
</span><span class='line'>            //将图片保存进内存中   
</span><span class='line'>            imgCache.put(url, new SoftReference&lt;Bitmap>(bitmap));             
</span><span class='line'>        }   
</span><span class='line'>        return bitmap;   
</span><span class='line'>    }   
</span><span class='line'>   
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>所有源码下载：<a href="http://files.cnblogs.com/Jaylong/loadImage.zip">http://files.cnblogs.com/Jaylong/loadImage.zip</a>；</p>

<p>当然还有其他的方式，比如使用anysctask，或者timer，timertask……</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【转载】Android组合控件 ]]></title>
    <link href="http://dande618.github.com/blog/2013/03/12/attr/"/>
    <updated>2013-03-12T19:22:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/03/12/attr</id>
    <content type="html"><![CDATA[<p>来源地址：<a href="http://blog.csdn.net/lincyang/article/details/7421734">http://blog.csdn.net/lincyang/article/details/7421734</a></p>

<!-- more -->


<p>组合控件是自定义控件的一种，只不过它是由其他几个原生控件组合而成，故名组合控件。</p>

<p>在实际项目中，GUI会遇到一些可以提取出来做成自定义控件情况。</p>

<p>一个自定义控件的好处就是把一些需要模块化的UI和逻辑放在一起，做到了高内聚，向其他模块提供接口并很少
 依赖外界，这样就是低耦合。一个自定义控件就是一个封闭的王国，这里由你掌控。</p>

<p>上述是我自己的一个体会，想必大家也会常做自定义控件吧，就像逻辑部分的模块化一样。</p>

<p>下面我要做一个例子，请看完成图。</p>

<p><img src="http://my.csdn.net/uploads/201204/02/1333352187_6116.png" alt="示例图" /></p>

<p>下面一排图片加文字就是组合控件了，我是怎么做的呢？</p>

<p>其实这里用到了两个组合控件，一个是图片+文字，我把它叫一个Item，而三个在一起就是另一个控件了。</p>

<p>重点看这个Item，它有自己的属性如图片、文字、图片大小、文字大小、不透明度等等。这些把它定义在attr文件中，然后在xml文件中</p>

<p>配置，就像我们用原生控件一样。</p>

<p>先看attr文件。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="utf-8"?>  
</span><span class='line'>    &lt;resources>  
</span><span class='line'>            &lt;declare-styleable name="LevelMenuItem">  
</span><span class='line'>            &lt;attr name="text" format="string" />  
</span><span class='line'>            &lt;attr name="text_color" format="color"/>  
</span><span class='line'>            &lt;attr name="text_size" format="dimension" />          
</span><span class='line'>            &lt;attr name="image_src" format="reference"/>  
</span><span class='line'>            &lt;attr name="image_bg" format="reference"/>  
</span><span class='line'>            &lt;attr name="image_alpha" format="integer" />  
</span><span class='line'>            &lt;attr name="image_height" format="dimension">&lt;/attr>  
</span><span class='line'>            &lt;attr name="image_width" format="dimension" />  
</span><span class='line'>        &lt;/declare-styleable>  
</span><span class='line'>    &lt;/resources></span></code></pre></td></tr></table></div></figure>


<p>这个文件在values下，和string文件同级。把你自己要定义的属性都写在这里吧。format是属性的“单位”，如果你要问有多少中format呀？答案在这里。
有了属性了，下面看看布局文件level_menu_item.xml。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="utf-8"?>  
</span><span class='line'>    &lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"  
</span><span class='line'>        android:layout_width="fill_parent"  
</span><span class='line'>        android:layout_height="fill_parent"  
</span><span class='line'>        android:orientation="vertical" >  
</span><span class='line'>            &lt;ImageView  
</span><span class='line'>                android:id="@+id/image_item"  
</span><span class='line'>                android:layout_width="fill_parent"  
</span><span class='line'>                android:layout_height="fill_parent"  
</span><span class='line'>                android:scaleType="fitCenter"  
</span><span class='line'>                />  
</span><span class='line'>             &lt;TextView  
</span><span class='line'>                android:id="@+id/tv_item"  
</span><span class='line'>                android:layout_width="fill_parent"  
</span><span class='line'>                android:layout_height="wrap_content"  
</span><span class='line'>                android:gravity="center_horizontal"  
</span><span class='line'>                android:textColor="#23ffffff"  
</span><span class='line'>                android:textSize="25sp"   
</span><span class='line'>             />      
</span><span class='line'>    &lt;/LinearLayout></span></code></pre></td></tr></table></div></figure>


<p>这里唯一值得一说的是文本的颜色。大家看见他是8位的，前两位是表示不透明度的，后六位是表示颜色的，三色，范围都是00～ff。</p>

<p>如果在java中设置颜色，需要这样。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>setTextColor(0x23ffffff);</span></code></pre></td></tr></table></div></figure>


<p>关于不透明度，一般美工会定义。有些要求不透明如30%这样的，可以用整型换算一下。00～ff对应十进制为0～255，那么30%就是255x0.3=76.5，用科学计算机换算为4c。
更多颜色相关请看《Android中设置文本颜色的三种办法》</p>

<p>然后我们就要写一个类，我这继承子线性布局。有两个构造函数，我们主要在两个参数的函数中工作。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class LevelMenuItem extends LinearLayout {  
</span><span class='line'>          
</span><span class='line'>        public LevelMenuItem(Context context, AttributeSet attrs) {  
</span><span class='line'>            super(context, attrs);  
</span><span class='line'>              
</span><span class='line'>        }</span></code></pre></td></tr></table></div></figure>


<p>这个类中我们要完成的工作是，初始化控件属性、提供外部修改属性的接口、控件点击的回调接口。</p>

<p>此类完整代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.linc.game;  
</span><span class='line'>      
</span><span class='line'>    import android.content.Context;  
</span><span class='line'>    import android.content.res.TypedArray;  
</span><span class='line'>    import android.util.AttributeSet;  
</span><span class='line'>    import android.view.LayoutInflater;  
</span><span class='line'>    import android.view.View;  
</span><span class='line'>    import android.widget.ImageView;  
</span><span class='line'>    import android.widget.LinearLayout;  
</span><span class='line'>    import android.widget.TextView;  
</span><span class='line'>    /** 
</span><span class='line'>     * 自定义一个关卡 
</span><span class='line'>     * 共有7个属性，看attr文件 
</span><span class='line'>     * 在程序中提供修改这7个属性的接口， 
</span><span class='line'>     * 一个自定义控件的任务就算完成。 
</span><span class='line'>     * 一个自定义控件的好处就是把一些需要模块化的 
</span><span class='line'>     * UI和逻辑放在一起，做到了高内聚，向其他模块提供接口并很少 
</span><span class='line'>     * 依赖外界，这样就是低耦合。一个自定义控件就是一个封闭的王国， 
</span><span class='line'>     * 这里由你掌控。 
</span><span class='line'>     *  
</span><span class='line'>     * 编写时，如果遇到在attr里写好属性，但是在这里认不出来， 
</span><span class='line'>     * 就clean一下项目。切记。 
</span><span class='line'>     *  
</span><span class='line'>     * @author linc 
</span><span class='line'>     * 
</span><span class='line'>     */  
</span><span class='line'>    public class LevelMenuItem extends LinearLayout {  
</span><span class='line'>        private TextView mTextView = null;  
</span><span class='line'>        private ImageView mImageView = null;  
</span><span class='line'>          
</span><span class='line'>        public LevelMenuItem(Context context) {  
</span><span class='line'>            super(context);  
</span><span class='line'>        }  
</span><span class='line'>        public LevelMenuItem(Context context, AttributeSet attrs) {  
</span><span class='line'>            super(context, attrs);  
</span><span class='line'>              
</span><span class='line'>            LayoutInflater layoutInflater = (LayoutInflater) context.  
</span><span class='line'>                            getSystemService(Context.LAYOUT_INFLATER_SERVICE);  
</span><span class='line'>            layoutInflater.inflate(R.layout.level_menu_item, this);  
</span><span class='line'>              
</span><span class='line'>            TypedArray typedArray = context.obtainStyledAttributes(attrs  
</span><span class='line'>                    ,R.styleable.LevelMenuItem);  
</span><span class='line'>              
</span><span class='line'>            initWidget(typedArray);  
</span><span class='line'>        }  
</span><span class='line'>        private void initWidget(TypedArray typedArray)  
</span><span class='line'>        {  
</span><span class='line'>            mTextView = (TextView)findViewById(R.id.tv_item);  
</span><span class='line'>            String textString = typedArray.getString(R.styleable.LevelMenuItem_text);  
</span><span class='line'>            int textColor = typedArray.getColor(R.styleable.LevelMenuItem_text_color,  
</span><span class='line'>                    0xffffffff);  
</span><span class='line'>            float textSize = typedArray.getDimension(R.styleable.LevelMenuItem_text_size,  
</span><span class='line'>                    20);  
</span><span class='line'>            mTextView.setText(textString);  
</span><span class='line'>            mTextView.setTextColor(textColor);  
</span><span class='line'>            mTextView.setTextSize(textSize);  
</span><span class='line'>              
</span><span class='line'>            mImageView = (ImageView)findViewById(R.id.image_item);  
</span><span class='line'>            int imageHeight = (int) typedArray.getDimension(R.styleable.LevelMenuItem_image_height, 25);  
</span><span class='line'>            int imageWidth = (int) typedArray.getDimension(R.styleable.LevelMenuItem_image_width, 25);  
</span><span class='line'>            int imageSrc = typedArray.getResourceId(R.styleable.LevelMenuItem_image_src, 0);  
</span><span class='line'>            int imageBg = typedArray.getResourceId(R.styleable.LevelMenuItem_image_bg, 0);  
</span><span class='line'>            int imageAlpha = typedArray.getInt(R.styleable.LevelMenuItem_image_alpha, 255);  
</span><span class='line'>            mImageView.setAlpha(imageAlpha);  
</span><span class='line'>            mImageView.setImageResource(imageSrc);  
</span><span class='line'>            mImageView.setBackgroundResource(imageBg);  
</span><span class='line'>            LayoutParams layoutParams = new LayoutParams(imageWidth, imageHeight);  
</span><span class='line'>            mImageView.setLayoutParams(layoutParams);  
</span><span class='line'>              
</span><span class='line'>            typedArray.recycle();  
</span><span class='line'>        }  
</span><span class='line'>        /** 
</span><span class='line'>         * 设置此控件的文本 
</span><span class='line'>         * @param text 
</span><span class='line'>         */  
</span><span class='line'>        public void setText(String text)  
</span><span class='line'>        {  
</span><span class='line'>            mTextView.setText(text);  
</span><span class='line'>        }  
</span><span class='line'>        /** 
</span><span class='line'>         * 设置文字颜色 
</span><span class='line'>         * @param textColor 
</span><span class='line'>         */  
</span><span class='line'>        public void setTextColor(int textColor)  
</span><span class='line'>        {  
</span><span class='line'>            mTextView.setTextColor(textColor);  
</span><span class='line'>        }  
</span><span class='line'>        /** 
</span><span class='line'>         * 设置字体大小 
</span><span class='line'>         * @param textSize 
</span><span class='line'>         */  
</span><span class='line'>        public void setTextSize(int textSize)  
</span><span class='line'>        {  
</span><span class='line'>            mTextView.setTextSize(textSize);  
</span><span class='line'>        }  
</span><span class='line'>        /** 
</span><span class='line'>         * 设置图片 
</span><span class='line'>         * @param resId 
</span><span class='line'>         */  
</span><span class='line'>        public void setImageResource(int resId)  
</span><span class='line'>        {  
</span><span class='line'>            mImageView.setImageResource(resId);  
</span><span class='line'>        }  
</span><span class='line'>        /** 
</span><span class='line'>         * 设置图片背景 
</span><span class='line'>         */  
</span><span class='line'>        public void setBackgroundResource(int resId)  
</span><span class='line'>        {  
</span><span class='line'>            mImageView.setBackgroundResource(resId);  
</span><span class='line'>        }     
</span><span class='line'>        /** 
</span><span class='line'>         * 设置图片的不透名度 
</span><span class='line'>         * @param alpha 
</span><span class='line'>         */  
</span><span class='line'>        public void setImageAlpha(int alpha)  
</span><span class='line'>        {  
</span><span class='line'>            mImageView.setAlpha(alpha);  
</span><span class='line'>        }  
</span><span class='line'>        /** 
</span><span class='line'>         * 设置图片的大小 
</span><span class='line'>         * 这里面需要使用LayoutParams这个布局参数来设置 
</span><span class='line'>         * @param width 
</span><span class='line'>         * @param height 
</span><span class='line'>         */  
</span><span class='line'>        public void setImageSize(int width,int height)  
</span><span class='line'>        {  
</span><span class='line'>            LayoutParams layoutParams = new LayoutParams(width, height);  
</span><span class='line'>            mImageView.setLayoutParams(layoutParams);  
</span><span class='line'>        }  
</span><span class='line'>        /** 
</span><span class='line'>         * image点击事件的回调 
</span><span class='line'>         * @param listener 
</span><span class='line'>         */  
</span><span class='line'>        public void setOnClickListener(OnItemClickListener listener)  
</span><span class='line'>        {  
</span><span class='line'>            mImageView.setOnClickListener(new View.OnClickListener() {  
</span><span class='line'>                @Override  
</span><span class='line'>                public void onClick(View v) {  
</span><span class='line'>                    listener.onImageClick();  
</span><span class='line'>                }  
</span><span class='line'>            });  
</span><span class='line'>        }  
</span><span class='line'>        /** 
</span><span class='line'>         * 点击事件接口 
</span><span class='line'>         * @author linc 
</span><span class='line'>         * 
</span><span class='line'>         */  
</span><span class='line'>        public interface OnItemClickListener  
</span><span class='line'>        {  
</span><span class='line'>            public void onImageClick();  
</span><span class='line'>        }  
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>好，一个完整的组合控件就做好了，那么，我们如何使用呢？</p>

<p>我要在LevelMenu中用它。xml文件如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="utf-8"?>  
</span><span class='line'>    &lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"  
</span><span class='line'>        xmlns:linc="http://schemas.android.com/apk/res/com.linc.game"  
</span><span class='line'>        android:layout_width="fill_parent"  
</span><span class='line'>        android:layout_height="fill_parent"  
</span><span class='line'>        android:orientation="horizontal">      
</span><span class='line'>        &lt;com.linc.game.LevelMenuItem  
</span><span class='line'>            android:id="@+id/item1"  
</span><span class='line'>            android:layout_width="70dp"  
</span><span class='line'>            android:layout_height="80dp"  
</span><span class='line'>            linc:text="@string/item1"  
</span><span class='line'>            linc:text_size="14sp"  
</span><span class='line'>            linc:text_color="#80fa8072"  
</span><span class='line'>            linc:image_src="@drawable/orange_button_selector"  
</span><span class='line'>            linc:image_alpha="128"  
</span><span class='line'>            linc:image_height="48dp"  
</span><span class='line'>            linc:image_width="48dp"  
</span><span class='line'>            />  
</span><span class='line'>        &lt;com.linc.game.LevelMenuItem  
</span><span class='line'>            android:id="@+id/item2"  
</span><span class='line'>            android:layout_marginLeft="20dp"  
</span><span class='line'>            android:layout_width="70dp"  
</span><span class='line'>            android:layout_height="80dp"  
</span><span class='line'>            linc:text="@string/item2"  
</span><span class='line'>            linc:text_size="14sp"  
</span><span class='line'>            linc:text_color="#ffeee8aa"  
</span><span class='line'>            linc:image_src="@drawable/red_button_selector"  
</span><span class='line'>            linc:image_alpha="255"  
</span><span class='line'>            linc:image_height="48dp"  
</span><span class='line'>            linc:image_width="48dp"  
</span><span class='line'>            />     
</span><span class='line'>        &lt;com.linc.game.LevelMenuItem  
</span><span class='line'>            android:id="@+id/item3"  
</span><span class='line'>            android:layout_marginLeft="20dp"  
</span><span class='line'>            android:layout_width="70dp"  
</span><span class='line'>            android:layout_height="80dp"  
</span><span class='line'>            linc:text="@string/item3"  
</span><span class='line'>            linc:text_size="14sp"  
</span><span class='line'>            linc:text_color="#80cd853f"  
</span><span class='line'>            linc:image_src="@drawable/yellow_button_selector"  
</span><span class='line'>            linc:image_alpha="128"  
</span><span class='line'>            linc:image_height="48dp"  
</span><span class='line'>            linc:image_width="48dp"  
</span><span class='line'>            />         
</span><span class='line'>    &lt;/LinearLayout></span></code></pre></td></tr></table></div></figure>


<p>加入自己包名的索引</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>xmlns:linc="http://schemas.android.com/apk/res/com.linc.game"</span></code></pre></td></tr></table></div></figure>


<p>剩下的就一目了然了。</p>

<p>LevelMenu.java</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.linc.game;  
</span><span class='line'>      
</span><span class='line'>    import com.linc.game.LevelMenuItem.OnItemClickListener;  
</span><span class='line'>    import android.content.Context;  
</span><span class='line'>    import android.util.AttributeSet;  
</span><span class='line'>    import android.util.Log;  
</span><span class='line'>    import android.view.LayoutInflater;  
</span><span class='line'>    import android.widget.LinearLayout;  
</span><span class='line'>      
</span><span class='line'>    public class LevelMenu extends LinearLayout {  
</span><span class='line'>        private LevelMenuItem item1,item2,item3;  
</span><span class='line'>          
</span><span class='line'>        public LevelMenu(Context context) {  
</span><span class='line'>            super(context);  
</span><span class='line'>              
</span><span class='line'>        }  
</span><span class='line'>      
</span><span class='line'>          
</span><span class='line'>        public LevelMenu(Context context, AttributeSet attrs) {  
</span><span class='line'>            super(context, attrs);  
</span><span class='line'>            LayoutInflater layoutInflater = (LayoutInflater) context.  
</span><span class='line'>                getSystemService(Context.LAYOUT_INFLATER_SERVICE);  
</span><span class='line'>            layoutInflater.inflate(R.layout.level_menu, this);  
</span><span class='line'>            initWidget();  
</span><span class='line'>        }  
</span><span class='line'>        private void initWidget()  
</span><span class='line'>        {  
</span><span class='line'>            item1 = (LevelMenuItem)findViewById(R.id.item1);  
</span><span class='line'>            item2 = (LevelMenuItem)findViewById(R.id.item2);  
</span><span class='line'>            item3 = (LevelMenuItem)findViewById(R.id.item3);  
</span><span class='line'>              
</span><span class='line'>            item1.setOnClickListener(new OnItemClickListener() {  
</span><span class='line'>                @Override  
</span><span class='line'>                public void onImageClick() {  
</span><span class='line'>                    Log.e("dfjdkfjd","dfdfd");  
</span><span class='line'>                }  
</span><span class='line'>            });  
</span><span class='line'>        }  
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>在处理图片点击事件的时候，我用到了选择器（selector），这是我们实际开发中最常用的小技巧了。它能描述的状态很多，各位看官可以去查查。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="utf-8"?>  
</span><span class='line'>    &lt;selector xmlns:android="http://schemas.android.com/apk/res/android" >  
</span><span class='line'>        &lt;item android:state_pressed="true"  
</span><span class='line'>            android:drawable="@drawable/button_push"/>  
</span><span class='line'>        &lt;item android:drawable="@drawable/orange_button"/>  
</span><span class='line'>    &lt;/selector></span></code></pre></td></tr></table></div></figure>


<p>好，组合控件的例子先到这里，实际功能在下一个实战技巧中演练。</p>

<p>大家在做自定义控件时需要注意的是：</p>

<p>1、自定义控件类不能是是抽象类</p>

<p>2、要用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(Context context, AttributeSet attrs)</span></code></pre></td></tr></table></div></figure>


<p>这个构造函数</p>

<p>否则报错：android.view.InflateException: Binary XML file line #15: Error inflating cla。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SideNavigation＆ActionBarSherlock]]></title>
    <link href="http://dande618.github.com/blog/2013/03/12/SideNavigation/"/>
    <updated>2013-03-12T19:22:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/03/12/SideNavigation</id>
    <content type="html"><![CDATA[<p>两个有用的开源项目</p>

<!-- more -->


<h2>ActionBarSherlock　<span style="font-size:small"><a href="http://actionbarsherlock.com/">http://actionbarsherlock.com/</a></span></h2>

<p>ActionBarSherlock可以让2.x的系统也能使用actionbar。</p>

<p>如果你在3.0以上的机子上使用，那么它会调用系统原生的actionbar。另外它的使用方法和系统自身的方法相当相似。</p>

<h2>SideNavigation　<span style="font-size:small"><a href="https://github.com/johnkil/SideNavigation">https://github.com/johnkil/SideNavigation</a></span></h2>

<p>一个侧边栏导航组件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class MainActivity implements ISideNavigationCallback</span></code></pre></td></tr></table></div></figure>


<p>1.添加组件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;com.devspark.sidenavigation.SideNavigationView
</span><span class='line'>        android:id="@+id/side_navigation_view"
</span><span class='line'>        android:layout_width="match_parent"
</span><span class='line'>        android:layout_height="match_parent" /></span></code></pre></td></tr></table></div></figure>


<p>要在RelativeLayout的最后添加，使得该组件最后加载，而在其他组件的上面，不会被覆盖。</p>

<p>2.创建定义侧边栏的menu文件，例</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="utf-8"?>
</span><span class='line'>&lt;menu xmlns:android="http://schemas.android.com/apk/res/android" >
</span><span class='line'>
</span><span class='line'>    &lt;item
</span><span class='line'>        android:id="@+id/side_navigation_menu_item1"
</span><span class='line'>        android:icon="@drawable/ic_android1"
</span><span class='line'>        android:title="@string/title1"/>
</span><span class='line'>    &lt;item
</span><span class='line'>        android:id="@+id/side_navigation_menu_item2"
</span><span class='line'>        android:icon="@drawable/ic_android2"
</span><span class='line'>        android:title="@string/title2"/>
</span><span class='line'>    &lt;item
</span><span class='line'>        android:id="@+id/side_navigation_menu_item3"
</span><span class='line'>        android:icon="@drawable/ic_android3"
</span><span class='line'>        android:title="@string/title3"/>
</span><span class='line'>    &lt;item
</span><span class='line'>        android:id="@+id/side_navigation_menu_item4"
</span><span class='line'>        android:icon="@drawable/ic_android4"
</span><span class='line'>        android:title="@string/title4"/>
</span><span class='line'>    &lt;item
</span><span class='line'>        android:id="@+id/side_navigation_menu_item5"
</span><span class='line'>        android:icon="@drawable/ic_android5"
</span><span class='line'>        android:title="@string/title5"/>
</span><span class='line'>&lt;/menu></span></code></pre></td></tr></table></div></figure>


<p>3.在onCreate加入</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Override
</span><span class='line'>protected void onCreate(Bundle savedInstanceState) {
</span><span class='line'>    super.onCreate(savedInstanceState);
</span><span class='line'>    setContentView(R.layout.activity_main);
</span><span class='line'>    // other code
</span><span class='line'>
</span><span class='line'>    sideNavigationView = (SideNavigationView) findViewById(R.id.side_navigation_view);
</span><span class='line'>    sideNavigationView.setMenuItems(R.menu.side_navigation_menu);
</span><span class='line'>    sideNavigationView.setMenuClickCallback(this);
</span><span class='line'>    sideNavigationView.setMode(Mode.LEFT);
</span><span class='line'>
</span><span class='line'>    getActionBar().setDisplayHomeAsUpEnabled(true);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>4.重写onOptionsItemSelected()</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Override
</span><span class='line'>public boolean onOptionsItemSelected(MenuItem item) {
</span><span class='line'>    switch (item.getItemId()) {
</span><span class='line'>    case android.R.id.home:
</span><span class='line'>        sideNavigationView.toggleMenu();
</span><span class='line'>        break;
</span><span class='line'>    default:
</span><span class='line'>        return super.onOptionsItemSelected(item);
</span><span class='line'>    }
</span><span class='line'>    return true;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>具体例子可以看SideNavigation和ActionBarSherlock的simple。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[goagent]]></title>
    <link href="http://dande618.github.com/blog/2013/03/04/goagent/"/>
    <updated>2013-03-04T23:33:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/03/04/goagent</id>
    <content type="html"><![CDATA[<p>goagent是国内很多朋友常用的免费代理工具，也是使用最广泛的谷歌应用之一，今天我们就来分享下goagent下载以及使用的相关事宜。首先介绍一下goagent，它是使用Python和Google App EngineSDK编写的，可以在 Windows，Mac，Linux，Android，iPod Touch，iPhone，iPad，webOS，OpenWrt，Maemo 等平台上使用。</p>

<!-- more -->


<ol>
<li><p>goagent 下载地址 <a href="https://code.google.com/p/goagent/">https://code.google.com/p/goagent/</a> （下载对应平台<strong>最新</strong>版本）</p></li>
<li><p>申请 Google Appengine 并创建 appid <a href="https://code.google.com/p/goagent/wiki/InstallGuide">https://code.google.com/p/goagent/wiki/InstallGuide</a></p></li>
<li><p>修改 local\proxy.ini 中的 gae 下的 appid = goagent 为你的appid</p></li>
<li><p>运行 server\uploader.bat 上传</p></li>
<li><p>运行 goagent.exe</p></li>
<li><p>使用chrome浏览器，安装 SwitchySharp 插件，然后导入设置： <a href="https://goagent.googlecode.com/files/SwitchyOptions.bak">https://goagent.googlecode.com/files/SwitchyOptions.bak</a></p></li>
<li><p>在右上图标出选择 goagent 即可</p></li>
</ol>


<blockquote><p>goagent对用户是有流量限制的，目前为每帐号每天1GB</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【摘抄】JAVA多线程]]></title>
    <link href="http://dande618.github.com/blog/2013/03/01/Thread/"/>
    <updated>2013-03-01T22:22:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/03/01/Thread</id>
    <content type="html"><![CDATA[<p>一个进程就是一个执行中的程序，而每一个进程都有自己独立的一块内存空间、一组系统资源。在进程概念中，每一个进程的内部数据和状态都是完全独立的。</p>

<p>线程与进程相似，是一段完成某个特定功能的代码，是程序中单个顺序的流控制；但与进程不同的是，同类的多个线程是共享一块内存空间和一组系统资源，而线程本身的数据通常只有微处理器的寄存器数据，以及一个供程序执行时使用的堆栈。所以系统在产生一个线程，或者在各个线程之间切换时，负担要比进程小的多，正因如此，线程被称为轻负荷进程（light-weight process）。一个进程中可以包含多个线程。</p>

<p>一个线程是一个程序内部的顺序控制流。</p>

<!-- more -->


<ol>
<li><p>进程：每个进程都有独立的代码和数据空间（进程上下文），进程切换的开销大。</p></li>
<li><p>线程：轻量的进程，同一类线程共享代码和数据空间，每个线程有独立的运行栈和程序计数器（PC），线程切换的开销小。</p></li>
<li><p>多进程：在操作系统中，能同时运行多个任务程序。</p></li>
<li><p>多线程：在同一应用程序中，有多个顺序流同时执行。</p></li>
</ol>


<p>Java的线程是通过java.lang.Thread类来实现的。当我们生成一个Thread类的对象之后,一个新的线程就产生了。</p>

<p>任何实现接口Runnable的对象都可以作为一个线程的目标对象，类Thread本身也实现了接口Runnable，因此我们可以通过两种方法实现线程体。</p>

<p>（一）定义一个线程类，它继承线程类Thread并重写其中的方法 run（），这时在初始化这个类的实例时，目标target可为null，表示由这个实例对来执行线程体。由于Java只支持单重继承，用这种方法定义的类不能再继承其它父类。</p>

<p>（二）提供一个实现接口Runnable的类作为一个线程的目标对象，在初始化一个Thread类或者Thread子类的线程对象时，把目标对象传递给这个线程实例，由该目标对象提供线程体 run（）。这时，实现接口Runnable的类仍然可以继承其它父类。</p>

<p>每个线程都是通过某个特定Thread对象的方法run( )来完成其操作的，方法run( )称为线程体。</p>

<ol>
<li>创建状态(new Thread)</li>
</ol>


<p>执行下列语句时，线程就处于创建状态：</p>

<p>Thread myThread = new MyThreadClass( );</p>

<p>当一个线程处于创建状态时，它仅仅是一个空的线程对象，系统不为它分配资源。</p>

<ol>
<li>可运行状态( Runnable )</li>
</ol>


<p>Thread myThread = new MyThreadClass( );</p>

<p>myThread.start( );</p>

<p>当一个线程处于可运行状态时，系统为这个线程分配了它需的系统资源，安排其运行并调用线程运行方法，这样就使得该线程处于可运行( Runnable )状态。需要注意的是这一状态并不是运行中状态（Running )，因为线程也许实际上并未真正运行。由于很多计算机都是单处理器的，所以要在同一时刻运行所有的处于可运行状态的线程是不可能的，Java的运行系统必须实现调度来保证这些线程共享处理器。</p>

<ol>
<li>不可运行状态（Not Runnable）</li>
</ol>


<p>进入不可运行状态的原因有如下几条：</p>

<p>1) 调用了sleep（）方法;</p>

<p>2) 调用了suspend（）方法;</p>

<p>3) 为等候一个条件变量，线程调用wait（）方法;</p>

<p>4) 输入输出流中发生线程阻塞;</p>

<p>不可运行状态也称为阻塞状态（Blocked）。因为某种原因（输入/输出、等待消息或其它阻塞情况），系统不能执行线程的状态。这时即使处理器空闲，也不能执行该线程。</p>

<ol>
<li>死亡状态（Dead）</li>
</ol>


<p>线程的终止一般可通过两种方法实现：自然撤消（线程执行完）或是被停止（调用stop()方法）。目前不推荐通过调用stop()来终止线程的执行，而是让线程执行完。</p>

<ol>
<li>使用Runnable接口　</li>
</ol>


<p>1) 可以将CPU，代码和数据分开，形成清晰的模型;</p>

<p>2) 还可以从其他类继承;</p>

<p>3) 保持程序风格的一致性。</p>

<ol>
<li>直接继承Thread类</li>
</ol>


<p>1) 不能再从其他类继承;</p>

<p>2) 编写简单，可以直接操纵线程，无需使用Thread.currentThread()。</p>

<h2>多线程的互斥与同步</h2>

<h3>互斥锁</h3>

<p>为解决操作的不完整性问题，在Java 语言中，引入了对象互斥锁的概念，来保证共享数据操作的完整性。每个对象都对应于一个可称为&#8221; 互斥锁&#8221; 的标记，这个标记用来保证在任一时刻，只能有一个线程访问该对象。 关键字synchronized 来与对象的互斥锁联系。当某个对象用synchronized 修饰时，表明该对象在任一时刻只能由一个线程访问。</p>

<h3>多线程的同步</h3>

<p>通过运用wait()和notify()方法来实现线程的同步，在同步中还会用到notifyAll()方法，一般来说，每个共享对象的互斥锁存在两个队列，一个是锁等待队列，另一个是锁申请队列，锁申请队列中的第一个线程可以对该共享对象进行操作，而锁等待队列中的线程在某些情况下将移入到锁申请队列。下面比较一下wait()、notify()和notifyAll()方法：</p>

<p>(1) wait,nofity,notifyAll必须在已经持有锁的情况下执行,所以它们只能出现在synchronized作用的范围内，也就是出现在用synchronized修饰的方法或类中。</p>

<p>(2) wait的作用:释放已持有的锁,进入等待队列.</p>

<p>(3) notify的作用:唤醒wait队列中的第一个线程并把它移入锁申请队列.</p>

<p>(4) notifyAll的作用:唤醒wait队列中的所有的线程并把它们移入锁申请队列.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android使用淘宝开放平台API]]></title>
    <link href="http://dande618.github.com/blog/2013/02/28/TOP/"/>
    <updated>2013-02-28T22:22:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/02/28/TOP</id>
    <content type="html"><![CDATA[<p>淘宝开放平台：<a href="http://open.taobao.com/index.htm">http://open.taobao.com/index.htm</a></p>

<!-- more -->


<p>API在线文档：<a href="http://open.taobao.com/doc/category_list.htm?spm=0.0.0.0.Zt7VwY&amp;id=102">http://open.taobao.com/doc/category_list.htm?spm=0.0.0.0.Zt7VwY&amp;id=102</a></p>

<p>API在线测试工具：<a href="http://api.taobao.com/apitools/apiTools.htm">http://api.taobao.com/apitools/apiTools.htm</a></p>

<p>android环境搭建：见安卓SDK内的文档</p>

<h3>使用REST API</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">TopParameters</span> <span class="n">params</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TopParameters</span><span class="o">();</span>
</span><span class='line'><span class="n">params</span><span class="o">.</span><span class="na">setMethod</span><span class="o">(</span><span class="s">&quot;taobao.taobaoke.items.get&quot;</span><span class="o">);</span><span class="c1">//调用的API</span>
</span><span class='line'><span class="n">params</span><span class="o">.</span><span class="na">addFields</span><span class="o">(</span><span class="s">&quot;pic_url&quot;</span><span class="o">,</span> <span class="s">&quot;title&quot;</span><span class="o">);</span><span class="c1">//返回参数</span>
</span><span class='line'><span class="n">params</span><span class="o">.</span><span class="na">addParam</span><span class="o">(</span><span class="s">&quot;keyword&quot;</span><span class="o">,</span> <span class="s">&quot;android&quot;</span><span class="o">);</span><span class="c1">//设定输入参数</span>
</span><span class='line'><span class="c1">//API不必要userId时，userId可为NULL，必要时要先授权</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="na">api</span><span class="o">(</span><span class="n">params</span><span class="o">,</span> <span class="n">userId</span><span class="o">,</span> <span class="k">new</span> <span class="n">TopApiListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onComplete</span><span class="o">(</span><span class="n">JSONObject</span> <span class="n">json</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="c1">//do something</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onError</span><span class="o">(</span><span class="n">ApiError</span> <span class="n">error</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="c1">//do something</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onException</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="c1">//do something</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">},</span> <span class="kc">true</span><span class="o">);</span><span class="c1">//true表示异步</span>
</span></code></pre></td></tr></table></div></figure>


<p>onComplete()接受返回的JSONObject，然后可以对JSONObject进行处理，获得所需的数据。</p>

<p>比如：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">JSONArray</span> <span class="n">items</span> <span class="o">=</span> <span class="n">json</span>
</span><span class='line'><span class="o">.</span><span class="na">getJSONObject</span><span class="o">(</span><span class="s">&quot;taobaoke_items_get_response&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">.</span><span class="na">getJSONObject</span><span class="o">(</span><span class="s">&quot;taobaoke_items&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">.</span><span class="na">getJSONArray</span><span class="o">(</span><span class="s">&quot;taobaoke_item&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">setImage</span><span class="o">(</span><span class="n">items</span><span class="o">.</span><span class="na">getJSONObject</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;pic_url&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Android中的JSON详细总结：<a href="http://shazhuzhu1.iteye.com/blog/974758">http://shazhuzhu1.iteye.com/blog/974758</a></p>

<h3>异步加载TextView</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">setText</span><span class="o">(</span><span class="kd">final</span> <span class="n">TextView</span> <span class="n">textView</span><span class="o">,</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">ret</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="n">runOnUiThread</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="n">textView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">ret</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>异步加载网络图片资源</h3>

<p>使用的类来自</p>

<p><a href="http://www.linuxidc.com/Linux/2011-12/48664.htm">http://www.linuxidc.com/Linux/2011-12/48664.htm</a></p>

<p>AsyncImageLoader.java</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[冒泡排序]]></title>
    <link href="http://dande618.github.com/blog/2013/02/27/BubbleSort/"/>
    <updated>2013-02-27T13:22:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/02/27/BubbleSort</id>
    <content type="html"><![CDATA[<h3>问题</h3>

<p>　　有一数组a，长度为n，把数组中的元素从小到大重新排列</p>

<h3>思路</h3>

<p>　　从0到n-1，两两比较数组中的元素，如果前者大于后者，则交换之(如a[0]>a[1]，则交换a[0]和a[1])。作一趟冒泡排序后，最大值就在最后一个位置a[n-1]上了。然后对余下的0到n-2个元素作第二趟冒泡排序，次最大值就去到倒数第二个位置a[n-2]上了，如此类推。</p>

<!-- more -->


<h3>JAVA代码</h3>

<p>　　传入参数：未排序的数组</p>

<p>　　返回参数：排序后的数组</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">sort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span><span class="o">[]</span> <span class="n">sortedArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">length</span><span class="o">];</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">sortedArray</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">temp</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">boolean</span> <span class="n">isSort</span><span class="o">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">isSort</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>          <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">length</span> <span class="o">-</span> <span class="n">i</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">sortedArray</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">sortedArray</span><span class="o">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">temp</span> <span class="o">=</span> <span class="n">sortedArray</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
</span><span class='line'>                  <span class="n">sortedArray</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">sortedArray</span><span class="o">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
</span><span class='line'>                  <span class="n">sortedArray</span><span class="o">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
</span><span class='line'>                  <span class="n">isSort</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(!</span><span class="n">isSort</span><span class="o">)</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span> <span class="c1">// 如果没有发生交换，则退出循环</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">sortedArray</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>　　由于JAVA数组是引用类型，为了保护原数组，开始时将原数组赋值给另一数组，对后者进行排序。</p>

<p>　　复杂度是O(n<sup>2)。</sup></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【转载】Android的线程使用来更新UI----Thread、Handler、Looper、TimerTask等]]></title>
    <link href="http://dande618.github.com/blog/2013/02/23/Runnable/"/>
    <updated>2013-02-23T21:29:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/02/23/Runnable</id>
    <content type="html"><![CDATA[<p>文章来源：<a href="http://www.cnblogs.com/playing/archive/2011/03/24/1993583.html">http://www.cnblogs.com/playing/archive/2011/03/24/1993583.html</a></p>

<!-- more -->


<h2>方法一：(java习惯，在android不推荐使用）</h2>

<p>刚刚开始接触android线程编程的时候，习惯好像java一样，试图用下面的代码解决问题</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span> <span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="n">myView</span><span class="o">.</span><span class="na">invalidate</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}).</span><span class="na">start</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以实现功能，刷新UI界面。但是这样是不行的，因为它违背了单线程模型：Android UI操作并不是线程安全的并且这些操作必须在UI线程中执行。</p>

<h2>方法二：（Thread+Handler)</h2>

<p>查阅了文档和apidemo后，发觉常用的方法是利用Handler来实现UI线程的更新的。</p>

<p>Handler来根据接收的消息，处理UI更新。Thread线程发出Handler消息，通知更新UI。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Handler</span> <span class="n">myHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleMessage</span><span class="o">(</span><span class="n">Message</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="k">switch</span> <span class="o">(</span><span class="n">msg</span><span class="o">.</span><span class="na">what</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="k">case</span> <span class="n">TestHandler</span><span class="o">.</span><span class="na">GUIUPDATEIDENTIFIER</span><span class="o">:</span>
</span><span class='line'><span class="n">myBounceView</span><span class="o">.</span><span class="na">invalidate</span><span class="o">();</span>
</span><span class='line'><span class="k">break</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">super</span><span class="o">.</span><span class="na">handleMessage</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">myThread</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="k">while</span> <span class="o">(!</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">isInterrupted</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="n">Message</span> <span class="n">message</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Message</span><span class="o">();</span>
</span><span class='line'><span class="n">message</span><span class="o">.</span><span class="na">what</span> <span class="o">=</span> <span class="n">TestHandler</span><span class="o">.</span><span class="na">GUIUPDATEIDENTIFIER</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">TestHandler</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">myHandler</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'><span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">interrupt</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上方法demo看:http://rayleung.javaeye.com/blog/411860</p>

<h2>方法三：（java习惯，不推荐）</h2>

<p>在Android平台中需要反复按周期执行方法可以使用Java上自带的TimerTask类，TimerTask相对于Thread来说对于资源消耗的更低，除了使用Android自带的AlarmManager使用Timer定时器是一种更好的解决方法。 我们需要引入import java.util.Timer; 和 import java.util.TimerTask;</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JavaTimer</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="n">Timer</span> <span class="n">timer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Timer</span><span class="o">();</span>
</span><span class='line'><span class="n">TimerTask</span> <span class="n">task</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TimerTask</span><span class="o">(){</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="n">setTitle</span><span class="o">(</span><span class="s">&quot;hear me?&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'><span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">main</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">timer</span><span class="o">.</span><span class="na">schedule</span><span class="o">(</span><span class="n">task</span><span class="o">,</span> <span class="mi">10000</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>方法四：(TimerTask + Handler)</h2>

<p>实际上这样做是不行的，这跟Android的线程安全有关！应该通过配合Handler来实现timer功能的！</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestTimer</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="n">Timer</span> <span class="n">timer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Timer</span><span class="o">();</span>
</span><span class='line'><span class="n">Handler</span> <span class="n">handler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">(){</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleMessage</span><span class="o">(</span><span class="n">Message</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="k">switch</span> <span class="o">(</span><span class="n">msg</span><span class="o">.</span><span class="na">what</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'><span class="n">setTitle</span><span class="o">(</span><span class="s">&quot;hear me?&quot;</span><span class="o">);</span>
</span><span class='line'><span class="k">break</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">super</span><span class="o">.</span><span class="na">handleMessage</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">TimerTask</span> <span class="n">task</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TimerTask</span><span class="o">(){</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="n">Message</span> <span class="n">message</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Message</span><span class="o">();</span>
</span><span class='line'><span class="n">message</span><span class="o">.</span><span class="na">what</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="n">handler</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'><span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">main</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">timer</span><span class="o">.</span><span class="na">schedule</span><span class="o">(</span><span class="n">task</span><span class="o">,</span> <span class="mi">10000</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>方法五：( Runnable + Handler.postDelayed(runnable,time) )</p>

<p>在Android里定时更新 UI，通常使用的是 java.util.Timer, java.util.TimerTask, android.os.Handler组合。实际上Handler 自身已经提供了定时的功能。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">Handler</span> <span class="n">handler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">Runnable</span> <span class="n">myRunnable</span><span class="o">=</span> <span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">run</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="n">handler</span><span class="o">.</span><span class="na">postDelayed</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="mi">1000</span><span class="o">);</span>
</span><span class='line'><span class="n">count</span><span class="o">++;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">tvCounter</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;Count: &quot;</span> <span class="o">+</span> <span class="n">count</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在其他地方调用</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">handler</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="n">myRunnable</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">handler</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="n">myRunnable</span><span class="o">,</span><span class="n">time</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>案例看：http://shaobin0604.javaeye.com/blog/515820</p>

<p>====================================================================</p>

<h2>知识点总结补充：</h2>

<p>　　很多初入Android或Java开发的新手对Thread、Looper、Handler和Message仍然比较迷惑，衍生的有HandlerThread、java.util.concurrent、Task、AsyncTask由于目前市面上的书籍等资料都没有谈到这些问题，今天就这一问题做更系统性的总结。我们创建的Service、Activity以及Broadcast均是一个主线程处理，这里我们可以理解为UI线程。但是在操作一些耗时操作时，比如I/O读写的大文件读写，数据库操作以及网络下载需要很长时间，为了不阻塞用户界面，出现ANR的响应提示窗口，这个时候我们可以考虑使用Thread线程来解决。</p>

<p>　　对于从事过J2ME开发的程序员来说Thread比较简单，直接匿名创建重写run方法，调用start方法执行即可。或者从Runnable接口继承，但对于Android平台来说UI控件都没有设计成为线程安全类型，所以需要引入一些同步的机制来使其刷新，这点Google在设计Android时倒是参考了下Win32的消息处理机制。</p>

<ol>
<li><p>对于线程中的刷新一个View为基类的界面，可以使用postInvalidate()方法在线程中来处理，其中还提供了一些重写方法比如postInvalidate(int left,int top,int right,int bottom) 来刷新一个矩形区域，以及延时执行，比如postInvalidateDelayed(long delayMilliseconds)或postInvalidateDelayed(long delayMilliseconds,int left,int top,int right,int bottom) 方法，其中第一个参数为毫秒</p></li>
<li><p>当然推荐的方法是通过一个Handler来处理这些，可以在一个线程的run方法中调用handler对象的 postMessage或sendMessage方法来实现，Android程序内部维护着一个消息队列，会轮训处理这些，如果你是Win32程序员可以很好理解这些消息处理，不过相对于Android来说没有提供 PreTranslateMessage这些干涉内部的方法。</p></li>
<li><p>Looper又是什么呢? ，其实Android中每一个Thread都跟着一个Looper，Looper可以帮助Thread维护一个消息队列，但是Looper和Handler没有什么关系，我们从开源的代码可以看到Android还提供了一个Thread继承类HanderThread可以帮助我们处理，在HandlerThread对象中可以通过getLooper方法获取一个Looper对象控制句柄，我们可以将其这个Looper对象映射到一个Handler中去来实现一个线程同步机制，Looper对象的执行需要初始化Looper.prepare方法就是昨天我们看到的问题，同时推出时还要释放资源，使用Looper.release方法。</p></li>
<li><p>Message 在Android是什么呢? 对于Android中Handler可以传递一些内容，通过Bundle对象可以封装String、Integer以及Blob二进制对象，我们通过在线程中使用Handler对象的sendEmptyMessage或sendMessage方法来传递一个Bundle对象到Handler处理器。对于Handler类提供了重写方法handleMessage(Message msg) 来判断，通过msg.what来区分每条信息。将Bundle解包来实现Handler类更新UI线程中的内容实现控件的刷新操作。相关的Handler对象有关消息发送sendXXXX相关方法如下，同时还有postXXXX相关方法，这些和Win32中的道理基本一致，一个为发送后直接返回，一个为处理后才返回 .</p></li>
<li><p>java.util.concurrent对象分析，对于过去从事Java开发的程序员不会对Concurrent对象感到陌生吧，他是JDK 1.5以后新增的重要特性作为掌上设备，我们不提倡使用该类，考虑到Android为我们已经设计好的Task机制，这里不做过多的赘述，相关原因参考下面的介绍:</p></li>
<li><p>在Android中还提供了一种有别于线程的处理方式，就是Task以及AsyncTask，从开源代码中可以看到是针对Concurrent的封装，开发人员可以方便的处理这些异步任务。</p></li>
</ol>


<p>摘录自：<a href="http://www.android123.com.cn/androidkaifa/422.html">http://www.android123.com.cn/androidkaifa/422.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二分查找演示程序]]></title>
    <link href="http://dande618.github.com/blog/2013/02/18/BinarySearchDemo/"/>
    <updated>2013-02-18T22:00:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/02/18/BinarySearchDemo</id>
    <content type="html"><![CDATA[<h2>二分查找介绍</h2>

<p>　　二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；其缺点是要求待查表为有序表，且插入删除困难。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。</p>

<!-- more -->


<h2>二分查找原理</h2>

<p>　　首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。</p>

<h2>演示程序</h2>

<ol>
<li><p>给出一组固定升序排列的数组</p></li>
<li><p>用户输入查找数字（限定0-9之间）</p></li>
<li><p>点击按键逐次查找，显示查找次数和边界值变化</p></li>
<li><p>查找完成后可复位成初始状态</p></li>
</ol>


<h2>程序代码分析</h2>

<h3>初始化</h3>

<p>　　给出数组和初始数值。其中mLow为上边界，mHigh为上边界，mMiddle为中间值。mTimes为计次变量。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">final</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">src</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span> <span class="o">};</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">mLow</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">mHigh</span> <span class="o">=</span> <span class="n">src</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">mTimes</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">mMiddle</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>设置屏幕、组件，绑定监听器</strong></p>

<p>　　批量设置textview的方法</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">TextView</span><span class="o">[]</span> <span class="n">tv</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="n">Integer</span><span class="o">[]</span> <span class="n">view</span> <span class="o">=</span> <span class="o">{</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">num0</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">num1</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">num2</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">num3</span><span class="o">,</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">num4</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">num5</span> <span class="o">};</span>
</span><span class='line'>  <span class="n">tv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TextView</span><span class="o">[</span><span class="mi">6</span><span class="o">];</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">tv</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">view</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class='line'>      <span class="n">tv</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">setText</span><span class="o">(</span><span class="n">src</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="s">&quot;&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>设置“搜索”按键的监听类</h3>

<p><strong>判断计次变量mTimes</strong></p>

<p>　　为-1时表示查询结束，按查询键不再反应。</p>

<p><strong>mLow与mHigh相比较</strong></p>

<p>　　如果mLow大于mHigh，则说明未查找到，查找结束。</p>

<p>　　如果mLow小于mHigh，则令mMiddle为二者和的一半。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="k">if</span> <span class="o">(</span><span class="n">mLow</span> <span class="o">&lt;=</span> <span class="n">mHigh</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mMiddle</span> <span class="o">=</span> <span class="o">(</span><span class="n">mLow</span> <span class="o">+</span> <span class="n">mHigh</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>mMiddle与目标查询值des相比较</strong></p>

<p>■ 相等，则找到</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">des</span> <span class="o">==</span> <span class="n">src</span><span class="o">[</span><span class="n">mMiddle</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//显示完成</span>
</span><span class='line'>  <span class="n">mTimes</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>■ mMiddle大，则目标在左侧，令mHigh为mMiddle-1</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">des</span> <span class="o">&lt;</span> <span class="n">src</span><span class="o">[</span><span class="n">mMiddle</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">mHigh</span> <span class="o">=</span> <span class="n">mMiddle</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  <span class="n">mTimes</span><span class="o">++;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>■ mMiddle小，则目标在右侧，令mLow为mMiddle+1</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">else</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">mLow</span> <span class="o">=</span> <span class="n">mMiddle</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  <span class="n">mTimes</span><span class="o">++;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>设置“复位”按键的监听类</h3>

<p>　　属性、组件文字还原至初始值</p>

<h3>其他细节备忘</h3>

<ol>
<li>查找第一次时将editview设为不可获得焦点（不可编辑），按复位时还原。</li>
</ol>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">editText</span><span class="o">.</span><span class="na">setFocusable</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>获得editview内用户输入的值</li>
</ol>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">des</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">editText</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>判断输入为空时提示</li>
</ol>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">editText</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">result</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;请输入要查询的数字&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>查找成功变色（颜色0xFF0000FF，0x是代表颜色整数的标记，FF是表示透明度，0000FF表示颜色）</li>
</ol>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">tv</span><span class="o">[</span><span class="n">mMiddle</span><span class="o">].</span><span class="na">setTextColor</span><span class="o">(</span><span class="mh">0xFF0000FF</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<hr>


<br/>


<p><img style="width:600px;" src="http://img14.poco.cn/mypoco/myphoto/20130218/21/4309479020130218213456040.png"  alt="图" /></p>

<br/>


<hr>


<br/>


<p>源码地址：<a href="https://github.com/dande618/BinarySearchDemo.git">https://github.com/dande618/BinarySearchDemo.git</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[markdown]]></title>
    <link href="http://dande618.github.com/blog/2013/02/15/markdown/"/>
    <updated>2013-02-15T19:00:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/02/15/markdown</id>
    <content type="html"><![CDATA[<div style="float:left;padding-right:20px"><img src="http://mouapp.com/Mou_128.png"/></div>


<p>Markdown是什么？</p>


<p>Markdown 是一种轻量级标记语言，创始人为John Gruber和Aaron Swartz。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。</p>


<p>摘自维基百科Markdown条。</p>


<!-- more -->


<p>Markdown有啥好处？</p>

<p>正如上文所述，Markdown具有：</p>

<ol>
<li><p>易学易用；</p></li>
<li><p>方便转换为HTML等其他格式；</p></li>
<li><p>支持广泛，便于维护；</p></li>
</ol>


<p>等等特性。</p>

<h2>以下摘自 Markdown 语法说明 (简体中文版)</h2>

<p><a href="http://wowubuntu.com/markdown/index.html">源地址</a></p>

<p>Markdown 语法:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>A First Level Header
</span><span class='line'>====================
</span><span class='line'>A Second Level Header
</span><span class='line'>---------------------
</span><span class='line'>
</span><span class='line'>Now is the time for all good men to come to
</span><span class='line'>the aid of their country. This is just a
</span><span class='line'>regular paragraph.
</span><span class='line'>
</span><span class='line'>The quick brown fox jumped over the lazy
</span><span class='line'>dog's back.
</span><span class='line'>### Header 3
</span><span class='line'>
</span><span class='line'>> This is a blockquote.
</span><span class='line'>> 
</span><span class='line'>> This is the second paragraph in the blockquote.
</span><span class='line'>>
</span><span class='line'>> ## This is an H2 in a blockquote</span></code></pre></td></tr></table></div></figure>


<p>输出 HTML 为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;h1>A First Level Header&lt;/h1>
</span><span class='line'>&lt;h2>A Second Level Header&lt;/h2>
</span><span class='line'>&lt;p>Now is the time for all good men to come to
</span><span class='line'>the aid of their country. This is just a
</span><span class='line'>regular paragraph.&lt;/p>
</span><span class='line'>&lt;p>The quick brown fox jumped over the lazy
</span><span class='line'>dog's back.&lt;/p>
</span><span class='line'>&lt;h3>Header 3&lt;/h3>
</span><span class='line'>&lt;blockquote>
</span><span class='line'>&lt;p>This is a blockquote.&lt;/p>
</span><span class='line'>&lt;p>This is the second paragraph in the blockquote.&lt;/p>
</span><span class='line'>&lt;h2>This is an H2 in a blockquote&lt;/h2>
</span><span class='line'>&lt;/blockquote></span></code></pre></td></tr></table></div></figure>


<h2>修辞和强调</h2>

<p>Markdown 使用星号和底线来标记需要强调的区段。</p>

<p>Markdown 语法:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Some of these words *are emphasized*.
</span><span class='line'>Some of these words _are emphasized also_.
</span><span class='line'>Use two asterisks for **strong emphasis**.
</span><span class='line'>Or, if you prefer, __use two underscores instead__.</span></code></pre></td></tr></table></div></figure>


<p>输出 HTML 为:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;p>Some of these words &lt;em>are emphasized&lt;/em>.
</span><span class='line'>Some of these words &lt;em>are emphasized also&lt;/em>.&lt;/p>
</span><span class='line'>&lt;p>Use two asterisks for &lt;strong>strong emphasis&lt;/strong>.
</span><span class='line'>Or, if you prefer, &lt;strong>use two underscores instead&lt;/strong>.&lt;/p></span></code></pre></td></tr></table></div></figure>


<h2>列表</h2>

<p>无序列表使用星号、加号和减号来做为列表的项目标记，这些符号是都可以使用的，使用星号：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* Candy.
</span><span class='line'>* Gum.
</span><span class='line'>* Booze.</span></code></pre></td></tr></table></div></figure>


<p>有序的列表则是使用一般的数字接着一个英文句点作为项目标记：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. Red
</span><span class='line'>2. Green
</span><span class='line'>3. Blue</span></code></pre></td></tr></table></div></figure>


<h2>链接</h2>

<p>Markdown 支援两种形式的链接语法： 行内 和 参考 两种形式，两种都是使用角括号来把文字转成连结。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>This is an [example link](http://example.com/ "With a Title").</span></code></pre></td></tr></table></div></figure>


<p>参考形式的链接让你可以为链接定一个名称，之后你可以在文件的其他地方定义该链接的内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>I get 10 times more traffic from [Google][1] than from
</span><span class='line'>[Yahoo][2] or [MSN][3].
</span><span class='line'>
</span><span class='line'>[1]: http://google.com/ "Google"
</span><span class='line'>[2]: http://search.yahoo.com/ "Yahoo Search"
</span><span class='line'>[3]: http://search.msn.com/ "MSN Search"</span></code></pre></td></tr></table></div></figure>


<h2>自动链接</h2>

<p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;http://example.com/></span></code></pre></td></tr></table></div></figure>


<p>Markdown 会转为：</p>

<h2>图片</h2>

<p>图片的语法和链接很像。</p>

<p>行内形式（title 是选择性的）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>![alt text](/path/to/img.jpg "Title")</span></code></pre></td></tr></table></div></figure>


<p>参考形式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>![alt text][id]
</span><span class='line'>[id]: /path/to/img.jpg "Title"</span></code></pre></td></tr></table></div></figure>


<h2>区块引用 Blockquotes</h2>

<p>Markdown 标记区块引用是使用类似 email 中用 > 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 > ：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
</span><span class='line'>> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
</span><span class='line'>> Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
</span><span class='line'>> 
</span><span class='line'>> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
</span><span class='line'>> id sem consectetuer libero luctus adipiscing.</span></code></pre></td></tr></table></div></figure>


<h2>分隔线</h2>

<p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* * *
</span><span class='line'>
</span><span class='line'>***
</span><span class='line'>
</span><span class='line'>*****
</span><span class='line'>
</span><span class='line'>- - -
</span><span class='line'>
</span><span class='line'>---------------------------------------</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[正则表达式]]></title>
    <link href="http://dande618.github.com/blog/2013/02/15/regex/"/>
    <updated>2013-02-15T16:00:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/02/15/regex</id>
    <content type="html"><![CDATA[<p>　　在计算机科学中，是指一个用来描述或者匹配一系列符合某个句法规则的字符串的单个字符串。在很多文本编辑器或其他工具里，正则表达式通常被用来检索和/或替换那些符合某个模式的文本内容。许多程序设计语言都支持利用正则表达式进行字符串操作。</p></p>

<br/>


<!-- more -->


<table class="mytable"><tr><td class="mytable">元字符 
</td><td class="mytable">描述
</td></tr><tr><td class="mytable">\
</td><td class="mytableb">将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“\n”匹配字符“n”。“&#92;n”匹配一个换行符。序列“&#92;”匹配“\”而“\(”则匹配“(”。
</td></tr><tr><td class="mytable">^
</td><td class="mytableb">匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“\n”或“\r”之后的位置。
</td></tr><tr><td class="mytable">$
</td><td class="mytableb">匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“\n”或“\r”之前的位置。
</td></tr><tr><td class="mytable">*
</td><td class="mytableb">匹配前面的子表达式零次或多次。例如，zo*能匹配“z”以及“zoo”。*等价于{0,}。
</td></tr><tr><td class="mytable">+
</td><td class="mytableb">匹配前面的子表达式一次或多次。例如，“zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}。
</td></tr><tr><td class="mytable">?
</td><td class="mytableb">匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“does”或“does”中的“do”。?等价于{0,1}。
</td></tr><tr><td class="mytable">{n}
</td><td class="mytableb">n是一个非负整数。匹配确定的n次。例如，“o{2}”不能匹配“Bob”中的“o”，但是能匹配“food”中的两个o。
</td></tr><tr><td class="mytable">{n,}
</td><td class="mytableb">n是一个非负整数。至少匹配n次。例如，“o{2,}”不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。“o{1,}”等价于“o+”。“o{0,}”则等价于“o*”。
</td></tr><tr><td class="mytable">{n,m}
</td><td class="mytableb">m和n均为非负整数，其中n&lt;=m。最少匹配n次且最多匹配m次。例如，“o{1,3}”将匹配“fooooood”中的前三个o。“o{0,1}”等价于“o?”。请注意在逗号和两个数之间不能有空格。
</td></tr><tr><td class="mytable">?
</td><td class="mytableb">当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“oooo”，“o+?”将匹配单个“o”，而“o+”将匹配所有“o”。
</td></tr><tr><td class="mytable">.点
</td><td class="mytableb">匹配除“\n”之外的任何单个字符。要匹配包括“\n”在内的任何字符，请使用像“&#91;\s\S&#93;”的模式。
</td></tr><tr><td class="mytable">(pattern)
</td><td class="mytableb">匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“\(”或“\)”。
</td></tr><tr><td class="mytable">(?:pattern)
</td><td class="mytableb">匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“(|)”来组合一个模式的各个部分是很有用。例如“industr(?:y|ies)”就是一个比“industry|industries”更简略的表达式。
</td></tr><tr><td class="mytable">(?=pattern)
</td><td class="mytableb">正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“Windows(?=95|98|NT|2000)”能匹配“Windows2000”中的“Windows”，但不能匹配“Windows3.1”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。
</td></tr><tr><td class="mytable">(?!pattern)
</td><td class="mytableb">正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“Windows(?!95|98|NT|2000)”能匹配“Windows3.1”中的“Windows”，但不能匹配“Windows2000”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。
</td></tr><tr><td class="mytable">(?&lt;=pattern)
</td><td class="mytableb">反向肯定预查，与正向肯定预查类似，只是方向相反。例如，“(?&lt;=95|98|NT|2000)Windows”能匹配“2000Windows”中的“Windows”，但不能匹配“3.1Windows”中的“Windows”。
</td></tr><tr><td class="mytable">(?&lt;!pattern)
</td><td class="mytableb">反向否定预查，与正向否定预查类似，只是方向相反。例如“(?&lt;!95|98|NT|2000)Windows”能匹配“3.1Windows”中的“Windows”，但不能匹配“2000Windows”中的“Windows”。
</td></tr><tr><td class="mytable">x|y
</td><td class="mytableb">匹配x或y。例如，“z|food”能匹配“z”或“food”。“(z|f)ood”则匹配“zood”或“food”。
</td></tr><tr><td class="mytable">&#91;xyz&#93;
</td><td class="mytableb">字符集合。匹配所包含的任意一个字符。例如，“&#91;abc&#93;”可以匹配“plain”中的“a”。
</td></tr><tr><td class="mytable">&#91;^xyz&#93;
</td><td class="mytableb">负值字符集合。匹配未包含的任意字符。例如，“&#91;^abc&#93;”可以匹配“plain”中的“plin”。
</td></tr><tr><td class="mytable">&#91;a-z&#93;
</td><td class="mytableb">字符范围。匹配指定范围内的任意字符。例如，“&#91;a-z&#93;”可以匹配“a”到“z”范围内的任意小写字母字符。
</td></tr><tr><td class="mytable">&#91;^a-z&#93;
</td><td class="mytableb">负值字符范围。匹配任何不在指定范围内的任意字符。例如，“&#91;^a-z&#93;”可以匹配任何不在“a”到“z”范围内的任意字符。
</td></tr><tr><td class="mytable">\b
</td><td class="mytableb">匹配一个单词边界，也就是指单词和空格间的位置。例如，“er\b”可以匹配“never”中的“er”，但不能匹配“verb”中的“er”。
</td></tr><tr><td class="mytable">\B
</td><td class="mytableb">匹配非单词边界。“er\B”能匹配“verb”中的“er”，但不能匹配“never”中的“er”。
</td></tr><tr><td class="mytable">\cx
</td><td class="mytableb">匹配由x指明的控制字符。例如，\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“c”字符。
</td></tr><tr><td class="mytable">\d
</td><td class="mytableb">匹配一个数字字符。等价于&#91;0-9&#93;。
</td></tr><tr><td class="mytable">\D
</td><td class="mytableb">匹配一个非数字字符。等价于&#91;^0-9&#93;。
</td></tr><tr><td class="mytable">\f
</td><td class="mytableb">匹配一个换页符。等价于\x0c和\cL。
</td></tr><tr><td class="mytable">\n
</td><td class="mytableb">匹配一个换行符。等价于\x0a和\cJ。
</td></tr><tr><td class="mytable">\r
</td><td class="mytableb">匹配一个回车符。等价于\x0d和\cM。
</td></tr><tr><td class="mytable">\s
</td><td class="mytableb">匹配任何空白字符，包括空格、制表符、换页符等等。等价于&#91; \f\n\r\t\v&#93;。
</td></tr><tr><td class="mytable">\S
</td><td class="mytableb">匹配任何非空白字符。等价于&#91;^ \f\n\r\t\v&#93;。
</td></tr><tr><td class="mytable">\t
</td><td class="mytableb">匹配一个制表符。等价于\x09和\cI。
</td></tr><tr><td class="mytable">\v
</td><td class="mytableb">匹配一个垂直制表符。等价于\x0b和\cK。
</td></tr><tr><td class="mytable">\w
</td><td class="mytableb">匹配包括下划线的任何单词字符。等价于“&#91;A-Za-z0-9_&#93;”。
</td></tr><tr><td class="mytable">\W
</td><td class="mytableb">匹配任何非单词字符。等价于“&#91;^A-Za-z0-9_&#93;”。
</td></tr><tr><td class="mytable">\xn
</td><td class="mytableb">匹配n，其中n为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“\x41”匹配“A”。“\x041”则等价于“\x04&amp;1”。正则表达式中可以使用ASCII编码。
</td></tr><tr><td class="mytable">\num
</td><td class="mytableb">匹配num，其中num是一个正整数。对所获取的匹配的引用。例如，“(.)\1”匹配两个连续的相同字符。
</td></tr><tr><td class="mytable">\n
</td><td class="mytableb">标识一个八进制转义值或一个向后引用。如果\n之前至少n个获取的子表达式，则n为向后引用。否则，如果n为八进制数字（0-7），则n为一个八进制转义值。
</td></tr><tr><td class="mytable">\nm
</td><td class="mytableb">标识一个八进制转义值或一个向后引用。如果\nm之前至少有nm个获得子表达式，则nm为向后引用。如果\nm之前至少有n个获取，则n为一个后跟文字m的向后引用。如果前面的条件都不满足，若n和m均为八进制数字（0-7），则\nm将匹配八进制转义值nm。
</td></tr><tr><td class="mytable">\nml
</td><td class="mytableb">如果n为八进制数字（0-3），且m和l均为八进制数字（0-7），则匹配八进制转义值nml。
</td></tr><tr><td class="mytable">\un
</td><td class="mytableb">匹配n，其中n是一个用四个十六进制数字表示的Unicode字符。例如，\u00A9匹配版权符号（&copy;）。
</td></tr></table>


<h2>使用emeditor宏批处理</h2>

<p>例
1. 添加菜单项</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if (document.selection.isempty)
</span><span class='line'>
</span><span class='line'>  nFlags=eeFindNext | eeReplaceAll | eeFindReplaceRegExp;
</span><span class='line'>
</span><span class='line'>else 
</span><span class='line'>
</span><span class='line'>  nFlags=eeFindNext | eeReplaceSelOnly | eeReplaceAll | eeFindReplaceRegExp;
</span><span class='line'>
</span><span class='line'>menu= CreatePopupMenu();
</span><span class='line'>
</span><span class='line'>menu.Add("使用正则表达式提取字符串",1);
</span><span class='line'>
</span><span class='line'>result = menu.Track( 0 );
</span><span class='line'>
</span><span class='line'>if (result>40) nFlags=nFlags=eeFindNext | eeReplaceAll | eeFindReplaceRegExp;
</span><span class='line'>
</span><span class='line'>switch(result){
</span><span class='line'>
</span><span class='line'>case 1: //内容
</span><span class='line'>
</span><span class='line'>      break;
</span><span class='line'>
</span><span class='line'>default:
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>2.删除段首尾空格</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>document.selection.Replace("^\\s*","",eeFindNext | eeReplaceAll | eeFindReplaceRegExp);
</span><span class='line'>
</span><span class='line'>document.selection.Replace("\\s*$","",eeFindNext | eeReplaceAll | eeFindReplaceRegExp);</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[认识Intent]]></title>
    <link href="http://dande618.github.com/blog/2013/01/29/intent/"/>
    <updated>2013-01-29T20:29:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/01/29/intent</id>
    <content type="html"><![CDATA[<p>　　Intent：意图</p>

<p>　　当一个Activity需要启动另一个Activity时，程序并没有直接告诉系统要启动那个Activity，而是通过Intent来表达自己的意图：需要启动哪个Activity。</p>

<!-- more -->


<p>　　Intent封装Android应用程序需要启动某个组件的“意图”。不仅如此，Intent还是应用程序组件之间通讯的重要媒介。两个Activity可以把需要交换的数据封装成Bundle对象，然后使用Intent来携带Bundle对象，这样就实现了两个Activity之间的数据交换。</p>
Android的应用程序包含三种重要的组件：Activity、Service、BroadcastReceiver，应用程序采用了一致的方式来启动他们——都是依靠Intent来进行启动的，Intent就封装了程序想要启动程序的意图，不仅如此，Intent还可用于与被启动组件交换信息。</p>

<p>　　通过点击按钮打开另一个Activity</p></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">button</span><span class="o">.</span><span class="na">setOnClickListener</span>
</span><span class='line'>  <span class="o">(</span>
</span><span class='line'>   <span class="k">new</span> <span class="nf">OnClickListener</span><span class="o">()</span>
</span><span class='line'>   <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">Intent</span> <span class="n">intent</span><span class="o">=</span><span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
</span><span class='line'>     <span class="n">intent</span><span class="o">.</span><span class="na">setClass</span><span class="o">(</span><span class="n">MainActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="n">SecondActivity</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>     <span class="n">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>  <span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[认识Bundle]]></title>
    <link href="http://dande618.github.com/blog/2013/01/29/Bundle/"/>
    <updated>2013-01-29T15:22:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/01/29/Bundle</id>
    <content type="html"><![CDATA[<p>　　用于不同Activity之间的数据传递</p>

<!-- more -->


<h2>重要方法</h2>


<p class="para">clear()：清除此Bundle映射中的所有保存的数据。</p>


<p class="para">clone()：克隆当前Bundle</p>


<p class="para">containsKey(String key)：返回指定key的值</p>


<p class="para">getString(String key)：返回指定key的字符</p>


<p class="para">hasFileDescriptors()：指示是否包含任何捆绑打包文件描述符</p>


<p class="para">isEmpty()：如果这个捆绑映射为空，则返回true</p>


<p class="para">putString(String key, String value):插入一个给定key的字符串值</p>


<p class="para">readFromParcel(Parcel parcel)：读取这个parcel的内容</p>


<p class="para">remove(String key)：移除指定key的值</p>


<p class="para">writeToParcel(Parcel parcel, int flags)：写入这个parcel的内容</p>


<h2>Android Bundle类</h2>


<p></p>

<p class="laiyuan">[转载]　<a href="http://blog.csdn.net/randyjiawenjie/article/details/6651437">文章出处</a></p>


<p class="para">根据google官方的文档（http://developer.android.com/reference/android/os/Bundle.html）</p>


<p class="para">Bundle类是一个key-value对，“A mapping from String values to various Parcelable types.”</p>


<p class="para">类继承关系：</p>


<p class="dk">java.lang.Object</p>


<p class="dk">android.os.Bundle</p>


<p class="para">Bundle类是一个final类：</p>


<p class="dk">public final class</p>


<p class="dk">Bundle</p>


<p class="dk">extends Objectimplements Parcelable Cloneable</p>


<p class="para">两个activity之间的通讯可以通过bundle类来实现，做法就是：</p>


<p class="para">（1）新建一个bundle类</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Bundle</span> <span class="n">mBundle</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Bundle</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>（2）bundle类中加入数据（key -value的形式，另一个activity里面取数据的时候，就要用到key，找出对应的value）</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mBundle</span><span class="o">.</span><span class="na">putString</span><span class="o">(</span><span class="s">&quot;Data&quot;</span><span class="o">,</span> <span class="s">&quot;data from TestBundle&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>(3)新建一个intent对象，并将该bundle加入这个intent对象</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
</span><span class='line'><span class="n">intent</span><span class="o">.</span><span class="na">setClass</span><span class="o">(</span><span class="n">TestBundle</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="n">Target</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">intent</span><span class="o">.</span><span class="na">putExtras</span><span class="o">(</span><span class="n">mBundle</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>




<p class="para">完整代码见原文</p>


<p>————————</p>

<p>Activity1：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">btn</span><span class="o">.</span><span class="na">setOnClickListener</span>
</span><span class='line'>        <span class="o">(</span>
</span><span class='line'>         <span class="k">new</span> <span class="nf">OnClickListener</span><span class="o">()</span>
</span><span class='line'>         <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">String</span> <span class="n">str</span><span class="o">=</span><span class="n">ev</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">().</span><span class="na">trim</span><span class="o">();</span>
</span><span class='line'>     <span class="n">Intent</span> <span class="n">intent</span><span class="o">=</span><span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
</span><span class='line'>     <span class="n">intent</span><span class="o">.</span><span class="na">setClass</span><span class="o">(</span><span class="n">Activity1</span><span class="o">.</span><span class="na">this</span><span class="o">,</span><span class="n">Activity2</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>     <span class="n">Bundle</span> <span class="n">bundle</span><span class="o">=</span><span class="k">new</span> <span class="n">Bundle</span><span class="o">();</span>
</span><span class='line'>     <span class="n">bundle</span><span class="o">.</span><span class="na">putString</span><span class="o">(</span><span class="s">&quot;str&quot;</span><span class="o">,</span> <span class="n">str</span><span class="o">);</span>
</span><span class='line'>     <span class="n">intent</span><span class="o">.</span><span class="na">putExtras</span><span class="o">(</span><span class="n">bundle</span><span class="o">);</span><span class="c1">//绑定信息</span>
</span><span class='line'>     <span class="n">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span><span class="c1">//启动Activity</span>
</span><span class='line'>     <span class="n">Activity1</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">finish</span><span class="o">();</span><span class="c1">//关闭Activity</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Activity2：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span>
</span><span class='line'> <span class="o">{</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>  <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">anthor</span><span class="o">);</span>
</span><span class='line'>  <span class="n">TextView</span> <span class="n">tv</span><span class="o">=(</span><span class="n">TextView</span><span class="o">)</span><span class="k">this</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">TextView1</span><span class="o">);</span><span class="c1">//显示的信息</span>
</span><span class='line'>  <span class="n">Button</span> <span class="n">button</span><span class="o">=(</span><span class="n">Button</span><span class="o">)</span><span class="k">this</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">anthorButton</span><span class="o">);</span><span class="c1">//返回按钮</span>
</span><span class='line'>  <span class="n">Bundle</span> <span class="n">bundle</span><span class="o">=</span><span class="k">this</span><span class="o">.</span><span class="na">getIntent</span><span class="o">().</span><span class="na">getExtras</span><span class="o">();</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">str</span><span class="o">=</span><span class="n">bundle</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;str&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">StringBuilder</span> <span class="n">sb</span><span class="o">=</span><span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'>  <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;您填写的信息为：&quot;</span><span class="o">+</span><span class="n">str</span><span class="o">+</span><span class="s">&quot;\n&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">tv</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">trim</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">button</span><span class="o">.</span><span class="na">setOnClickListener</span>
</span><span class='line'>  <span class="o">(</span>
</span><span class='line'>   <span class="k">new</span> <span class="nf">OnClickListener</span><span class="o">()</span>
</span><span class='line'>   <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">Intent</span> <span class="n">intent</span><span class="o">=</span><span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
</span><span class='line'>     <span class="n">intent</span><span class="o">.</span><span class="na">setClass</span><span class="o">(</span><span class="n">Activity2</span><span class="o">.</span><span class="na">this</span><span class="o">,</span><span class="n">Activity1</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>     <span class="n">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span><span class='line'>     <span class="n">AnotherActivity</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">finish</span><span class="o">();</span><span class="c1">//关闭Activity</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>  <span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[认识Handler]]></title>
    <link href="http://dande618.github.com/blog/2013/01/28/handler/"/>
    <updated>2013-01-28T11:36:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/01/28/handler</id>
    <content type="html"><![CDATA[<p>　　主要接受子线程发送的数据, 并用此数据配合主线程更新UI。</p>

<p>　　主要是为了解决Android应用的多线程问题。Android平台不允许Activity新启动的线程访问该Activity里的界面组件，这样就会导致新启动的线程无法动态改变界面组件的属性值。</p>

<!-- more -->


<p><strong>Handler类的主要作用有两个：</strong></p>

<ol>
<li><p>在新启动的线程中发送消息。</p></li>
<li><p>在主线程中获取、处理消息。</p></li>
</ol>


<p>　　通过回调的方式来实现，重写Handler类中处理消息的方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[事件处理]]></title>
    <link href="http://dande618.github.com/blog/2013/01/26/listener/"/>
    <updated>2013-01-26T10:27:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/01/26/listener</id>
    <content type="html"><![CDATA[<p>Android的时间处理机制包括</p>

<ul>
    <li>基于监听的事件处理</li>
    <li>基于回调的事件处理</li>
</ul>


<!-- more -->


<p>基于监听的事件处理：为界面组件绑定监听器。
基于回调的事件处理：重写组件（Activity）特定的回调方法。</p>

<h2>基于监听的事件处理</h2>


<ol>
    <li>获取被监听的对象（即界面组件）</li>
    <li>实现事件监听器（即一个实现XxxListener接口的类）</li>
    <li>调用事件源的setXxxListener(XxxListener)方法将事件监听器注册给被监听的对象</li>
</ol>


<p>View类的接口有</p>

<ul>
    <li>View.OnClickListener</li>
    <li>View.OnCreateContextMenuLister</li>
    <li>View.OnFocusChangeListener</li>
    <li>View.OnKeyListener</li>
    <li>View.OnLongClickListener</li>
    <li>View.OnTouchListener</li>
</ul>


<p>实现事件监听器的形式</p>

<ul>
    <li>内部类形式</li>
    <li>外部类形式</li>
    <li>Activity本身作为事件监听器类</li>
    <li>匿名内部类</li>（常用）
    <li>直接绑定到标签</li>
</ul>


<h2>基于回调的事件处理</h2>


<p>以View类为例，一些事件处理的回调方法</p>

<ul>
    <li>boolean onKeyDown(int keyCode,KeyEvent event)</li>
    <li>boolean onKeyLongPress(int keyCode,KeyEvent event)</li>
    <li>boolean onKeyShortcut(int keyCode,KeyEvent event)</li>
    <li>boolean onKeyUp(int keyCode,KeyEvent event)</li>
    <li>boolean onTouchEvent(MotionEvent event)</li>
    <li>boolean onTrackballEvent(MotionEvent event)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SimpleAdapter]]></title>
    <link href="http://dande618.github.com/blog/2013/01/11/adapter/"/>
    <updated>2013-01-11T10:27:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/01/11/adapter</id>
    <content type="html"><![CDATA[<p>　　Android Adapter 是将数据绑定到UI 界面上的桥接类。 Adapter负责创建和显示每个项目的子View和提供对下层数据的访问。支持Adapter绑定的UI控件必须扩展Adapter View抽象类。创建自己的继承自AdapterView的控件和创建新的Adapter类来绑定它们是可能的。</p>

<!-- more -->


<p><img src="http://img14.poco.cn/mypoco/myphoto/20130111/09/430947902013011109012106.png" width="610">
<img src="http://img14.poco.cn/mypoco/myphoto/20130111/09/4309479020130111090229016.jpg" width="610"></p>

<h2>ListView和ListAdapter</h2>


<p class="laiyuan">[转载]<a href="http://blog.sina.com.cn/s/blog_7db304660100x2f0.html">文章出处</a></p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//新建一个ListView,也就是新建一个列表，在新建一个组件是会将一个Content传递给构造函数</span>
</span><span class='line'><span class="n">listView</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListView</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="c1">// 将ListView和ArrayAdapter进行绑定，listview会把ArrayAdapter里面的数据显示出来</span>
</span><span class='line'><span class="c1">// ArrayAdapter的第一个参数是Context，即上下文的引用</span>
</span><span class='line'><span class="c1">// 第二个参数为一个在R文件里定义的Layout，不过是系统的R文件</span>
</span><span class='line'><span class="c1">// simple_list_item_single_choice表明ListView里边的每一项都只有一个TextView</span>
</span><span class='line'><span class="c1">// 第三个参数为一个数组</span>
</span><span class='line'><span class="n">listView</span><span class="o">.</span><span class="na">setAdapter</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayAdapter</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;(</span><span class="k">this</span><span class="o">,</span>
</span><span class='line'><span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">simple_list_item_single_choice</span><span class="o">,</span> <span class="n">data</span><span class="o">));</span>
</span><span class='line'><span class="n">listView</span><span class="o">.</span><span class="na">setItemsCanFocus</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'><span class="n">listView</span><span class="o">.</span><span class="na">setChoiceMode</span><span class="o">(</span><span class="n">ListView</span><span class="o">.</span><span class="na">CHOICE_MODE_MULTIPLE</span><span class="o">);</span>
</span><span class='line'><span class="c1">// 将listView内容直接进行显示</span>
</span><span class='line'><span class="n">setContentView</span><span class="o">(</span><span class="n">listView</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>




<h3>什么是ListAdapter?</h3>


<p class="para">ListAdapter继承于Adapter，它是ListView和其里面数据的适配器。也就是要让一个ListView显示出来需要三个东西：</p>


<ol>
    <li>ListView (需要被显示的列表)。</li>
    <li>Data, 和ListView绑定的数据，一般是一个Cursor或者一个字符串数组。</li>
    <li>ListAdapter,是data和ListView的桥梁，起一个适配器的作用。</li>
</ol>


<h3>什么是ArrayAdapter?</h3>


<p class="para">ArrayAdapter是ListAdapter的一个直接子类，意思是数组适配器。</p>


<p class="para">它的作用就是一个数组和ListView之间的桥梁。它将数组里定义的数据一一对应的显示在ListView里，通常有ArrayAdapter进行适配的ListView每一项通常只有一个TextView，而TextView里面显示的内容就是数组里面的对象调用toString()方法后生成的字符串。</p>


<h3>SimpleAdapter</h3>


<p class="para">SimpleAdapter也是ListAdapter的直接子类。通过SimpleAdapter可以让ListView当中的每一项里边的内容更加个性化。通常将ListView中某项的布局信息写在一个xml的布局文件当中。这个布局文件通过R.layout.file获得。</p>


<p class="para">ArrayAdapter的作用是数组和ListView间的桥梁；而SimpleAdapter的作用是ArrayList和ListView间的桥梁。</p>


<p class="para">注意，这个ArrayList里面的每一项都是一个Map<String,?>类型。ArrayList当中的每一项Map对象都和ListView当中的一项进行数据绑定和一一对应。</p>


<h3>Android系统默认的布局方式</h3>


<p class="para">Android.R.layout_simple_list_item_1, 每一项只有一个TextView.</p>


<p class="para">Android.R.layout_simple_list_item_2, 每一项只有两个TextView.</p>


<p class="para">Android.R.layout_simple_list_item_single_choice, 每一项有一个TextView，但是这一项可以被选择。</p>

]]></content>
  </entry>
  
</feed>
