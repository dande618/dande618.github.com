<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[初心]]></title>
  <link href="http://dande618.github.com/atom.xml" rel="self"/>
  <link href="http://dande618.github.com/"/>
  <updated>2013-10-29T14:40:42+08:00</updated>
  <id>http://dande618.github.com/</id>
  <author>
    <name><![CDATA[dande618]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[android隐藏下方系统栏statusbar]]></title>
    <link href="http://dande618.github.com/blog/2013/08/28/statusbar/"/>
    <updated>2013-08-28T18:10:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/08/28/statusbar</id>
    <content type="html"><![CDATA[<p>最近修复了一个BUG是定制SetupWizard时，下面的系统栏会出现。</p>

<p>SetupWizard是一台安卓设备第一次运行时的设置程序，可以设置Google帐号，姓名什么的，所以不允许用户点击返回、Home或最近运行三个虚拟按键。</p>

<p>当设置Google帐号时，会打开GoogleLoginService的Activity，所以用网上的有些方法不好用。一进入输入状态时，StatusBar还会显示出来。</p>

<!-- more -->


<p>正常的方法，可以参考SystemUI的源码，是使用android.app.StatusBarManager这个类来进行操作，但问题是这个类是hide隐藏的，相关的参数也是隐藏的，比如View.STATUS_BAR_DISABLE_HOME、Context.STATUS_BAR_SERVICE等。</p>

<p>代码如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">android.app.StatusBarManager</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">StatusBarManager</span> <span class="n">mStatueBarManager</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">mStatueBarManager</span> <span class="o">=</span> <span class="o">(</span><span class="n">StatusBarManager</span><span class="o">)</span><span class="n">getSystemService</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">STATUS_BAR_SERVICE</span><span class="o">);</span>
</span><span class='line'><span class="n">mStatueBarManager</span><span class="o">.</span><span class="na">disable</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">STATUS_BAR_DISABLE_HOME</span><span class="o">|</span><span class="n">View</span><span class="o">.</span><span class="na">STATUS_BAR_DISABLE_BACK</span><span class="o">|</span><span class="n">View</span><span class="o">.</span><span class="na">STATUS_BAR_DISABLE_RECENT</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样的话只要Activity不destroy掉，会一直隐藏。可以在适当的时候</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mStatueBarManager</span><span class="o">.</span><span class="na">disable</span><span class="o">(</span><span class="mh">0x00000000</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外还需要在manifest加上权限</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.STATUS_BAR&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然这个权限也是只能系统的程序使用。之后在源码环境下，使用mm或者mmm编译后，push到system/app下就可以了。</p>

<p>使用反射的方法调用StatusBarManager，也是需要android.permission.STATUS_BAR的权限。</p>

<p>如果没有添加权限，会有异常提示不是系统签名和缺少相关权限。</p>

<p>对于一般的程序，需要暂时隐藏系统栏的，比如视频播放界面，可以使用setSystemUiVisibility临时隐藏，在下一次操作时会显示。</p>

<p>参考com.google.android.apps.proofer.SystemUiHider，以下代码实现了隐藏statusbar和顶端状态栏，点击屏幕后，显示两秒系统栏再自动隐藏。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">test</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.app.Activity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Build</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Bundle</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Handler</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.View</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.Window</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.WindowManager</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">HIDE_DELAY_MILLIS</span> <span class="o">=</span> <span class="mi">1000</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">Handler</span> <span class="n">mHandler</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="n">View</span> <span class="n">mView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'><span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'><span class="n">mView</span> <span class="o">=</span> <span class="n">getWindow</span><span class="o">().</span><span class="na">getDecorView</span><span class="o">();</span>
</span><span class='line'><span class="n">setup</span><span class="o">(</span><span class="n">getWindow</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onStart</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="kd">super</span><span class="o">.</span><span class="na">onStart</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setup</span><span class="o">(</span><span class="n">Window</span> <span class="n">window</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="n">hideSystemUi</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// Pre-Jellybean just hide the status bar</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">Build</span><span class="o">.</span><span class="na">VERSION</span><span class="o">.</span><span class="na">SDK_INT</span> <span class="o">&lt;</span> <span class="n">Build</span><span class="o">.</span><span class="na">VERSION_CODES</span><span class="o">.</span><span class="na">JELLY_BEAN</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="n">window</span><span class="o">.</span><span class="na">addFlags</span><span class="o">(</span><span class="n">WindowManager</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">FLAG_FULLSCREEN</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">mHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">();</span>
</span><span class='line'><span class="n">mView</span><span class="o">.</span><span class="na">setOnSystemUiVisibilityChangeListener</span><span class="o">(</span><span class="k">new</span> <span class="n">View</span><span class="o">.</span><span class="na">OnSystemUiVisibilityChangeListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onSystemUiVisibilityChange</span><span class="o">(</span><span class="kt">int</span> <span class="n">visibility</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="k">if</span> <span class="o">((</span><span class="n">visibility</span> <span class="o">&amp;</span> <span class="n">View</span><span class="o">.</span><span class="na">SYSTEM_UI_FLAG_HIDE_NAVIGATION</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="n">delay</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">hideSystemUi</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">Build</span><span class="o">.</span><span class="na">VERSION</span><span class="o">.</span><span class="na">SDK_INT</span> <span class="o">&gt;=</span> <span class="n">Build</span><span class="o">.</span><span class="na">VERSION_CODES</span><span class="o">.</span><span class="na">JELLY_BEAN</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="c1">// On Jellybean we can use new System UI flags to allow showing</span>
</span><span class='line'><span class="c1">// titlebar/systembar</span>
</span><span class='line'><span class="c1">// only upon touching the screen, while still having the content</span>
</span><span class='line'><span class="c1">// laid out in</span>
</span><span class='line'><span class="c1">// the entire screen.</span>
</span><span class='line'><span class="n">mView</span><span class="o">.</span><span class="na">setSystemUiVisibility</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">SYSTEM_UI_FLAG_HIDE_NAVIGATION</span>
</span><span class='line'><span class="o">|</span> <span class="n">View</span><span class="o">.</span><span class="na">SYSTEM_UI_FLAG_FULLSCREEN</span>
</span><span class='line'><span class="o">|</span> <span class="n">View</span><span class="o">.</span><span class="na">SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION</span>
</span><span class='line'><span class="o">|</span> <span class="n">View</span><span class="o">.</span><span class="na">SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'><span class="n">mView</span><span class="o">.</span><span class="na">setSystemUiVisibility</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">SYSTEM_UI_FLAG_HIDE_NAVIGATION</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">Runnable</span> <span class="n">mHideRunnable</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="n">hideSystemUi</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">delay</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="n">mHandler</span><span class="o">.</span><span class="na">removeCallbacks</span><span class="o">(</span><span class="n">mHideRunnable</span><span class="o">);</span>
</span><span class='line'><span class="n">mHandler</span><span class="o">.</span><span class="na">postDelayed</span><span class="o">(</span><span class="n">mHideRunnable</span><span class="o">,</span> <span class="n">HIDE_DELAY_MILLIS</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[源码Launcher编译，使用mdpi的资源]]></title>
    <link href="http://dande618.github.com/blog/2013/08/10/launcher-hdpi/"/>
    <updated>2013-08-10T08:10:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/08/10/launcher-hdpi</id>
    <content type="html"><![CDATA[<p>4.2.2的源码，进行对Launcher2的修改，之后使用mm或mmm编译，使用adb push安装到平板中。</p>

<p>因为使用的一代nexus7，所以一般程序调用资源的是drawable_sw600dp_hdpi下的图片资源，但是按照上面方法编译出的Launcher使用drawable_sw600dp_mdpi的图片资源。</p>

<p>在网上搜索后，解决方法是</p>

<blockquote><p>默认编译mdpi的apk，如果要编译hdpi，需要在./build/target/product/full.mk文件中添加：</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PRODUCT_AAPT_CONFIG := normal hdpi 
</span><span class='line'>PRODUCT_AAPT_PREF_CONFIG := hdpi</span></code></pre></td></tr></table></div></figure>


<p>经过测试，</p>

<p>PRODUCT_AAPT_CONFIG指定了hdpi的话，就会使用hdpi的资源，而不使用mdpi资源！指定xhdpi的话，就不会使用hdpi的资源！</p>

<p>PRODUCT_AAPT_PREF_CONFIG指定hdpi，编译出的APK中会有hdpi、mdpi等等，没有xhdpi和xxhdpi，默认是mdpi，所以编译出的APK中就没有hdpi。</p>

<p>aapt 是android assert packaging tool的缩写，即安卓打包工具。</p>

<p>加上这两句以后，会影响其参数，只为一种设备匹配文件。而eclipse生成的程序可以为多种设备匹配。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定义widget上的字体类型]]></title>
    <link href="http://dande618.github.com/blog/2013/08/02/typeface-in-widget/"/>
    <updated>2013-08-02T20:13:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/08/02/typeface-in-widget</id>
    <content type="html"><![CDATA[<p>对于Activity中的TextView之类的现实文字的控件，如果我们要使用自定义的字体，不能在XML里定义，只能在代码中实现。</p>

<p>一般的做法是将字体文件保存在assets/fonts/目录下，然后使用代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TextView textView = (TextView) findViewById(R.id.textview);
</span><span class='line'>Typeface typeFace = Typeface.createFromAsset(getAssets(),"fonts/Cambira.ttf");
</span><span class='line'>textView.setTypeface(typeFace);</span></code></pre></td></tr></table></div></figure>


<p>而widget使用RemoteView更新界面，无法使用这种方法设置自定义字体。</p>

<p>可以使用以下方法</p>

<p>参见 <a href="http://stackoverflow.com/questions/4318572/how-to-use-a-custom-typeface-in-a-widget">http://stackoverflow.com/questions/4318572/how-to-use-a-custom-typeface-in-a-widget</a></p>

<p>即使用ImageView代替TextView，自己绘制自定义字体的图片。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public Bitmap buildUpdate(String time) 
</span><span class='line'>{
</span><span class='line'>    Bitmap myBitmap = Bitmap.createBitmap(160, 84, Bitmap.Config.ARGB_4444);
</span><span class='line'>    Canvas myCanvas = new Canvas(myBitmap);
</span><span class='line'>    Paint paint = new Paint();
</span><span class='line'>    Typeface clock = Typeface.createFromAsset(this.getAssets(),"Clockopia.ttf");
</span><span class='line'>    paint.setAntiAlias(true);
</span><span class='line'>    paint.setSubpixelText(true);
</span><span class='line'>    paint.setTypeface(clock);
</span><span class='line'>    paint.setStyle(Paint.Style.FILL);
</span><span class='line'>    paint.setColor(Color.WHITE);
</span><span class='line'>    paint.setTextSize(65);
</span><span class='line'>    paint.setTextAlign(Align.CENTER);
</span><span class='line'>    myCanvas.drawText(time, 80, 60, paint);
</span><span class='line'>    return myBitmap;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>String time = (String) DateFormat.format(mTimeFormat, mCalendar);
</span><span class='line'>RemoteViews views = new RemoteViews(getPackageName(), R.layout.main);
</span><span class='line'>views.setImageViewBitmap(R.id.TimeView, buildUpdate(time));</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git add . 无法添加文件夹下的文件]]></title>
    <link href="http://dande618.github.com/blog/2013/08/02/git/"/>
    <updated>2013-08-02T17:50:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/08/02/git</id>
    <content type="html"><![CDATA[<p>今天提交版本时遇到了git目录无法添加文件夹下的文件。比如要提交A文件夹，而程序代码在A/B文件夹下。使用git add . 只能加入一个空的B文件夹。这个原因是B文件夹是从别的git库拉下来的，只要把B下的隐藏文件.git删掉就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对Bitmap进行缩放]]></title>
    <link href="http://dande618.github.com/blog/2013/07/23/bitmap-zoom/"/>
    <updated>2013-07-23T20:13:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/07/23/bitmap-zoom</id>
    <content type="html"><![CDATA[<p>使用以下方法对Bitmap进行缩放</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">Bitmap</span> <span class="nf">zoomBitmap</span><span class="o">(</span><span class="n">Bitmap</span> <span class="n">bitmap</span><span class="o">,</span> <span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="k">if</span> <span class="o">(</span><span class="n">bitmap</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>             <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>         <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>         <span class="kt">int</span> <span class="n">w</span> <span class="o">=</span> <span class="n">bitmap</span><span class="o">.</span><span class="na">getWidth</span><span class="o">();</span>
</span><span class='line'>         <span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="n">bitmap</span><span class="o">.</span><span class="na">getHeight</span><span class="o">();</span>
</span><span class='line'>         <span class="n">Matrix</span> <span class="n">matrix</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Matrix</span><span class="o">();</span>
</span><span class='line'>         <span class="kt">float</span> <span class="n">scaleWidth</span> <span class="o">=</span> <span class="o">((</span><span class="kt">float</span><span class="o">)</span> <span class="n">width</span> <span class="o">/</span> <span class="n">w</span><span class="o">);</span>
</span><span class='line'>         <span class="kt">float</span> <span class="n">scaleHeight</span> <span class="o">=</span> <span class="o">((</span><span class="kt">float</span><span class="o">)</span> <span class="n">height</span> <span class="o">/</span> <span class="n">h</span><span class="o">);</span>
</span><span class='line'>         <span class="n">matrix</span><span class="o">.</span><span class="na">postScale</span><span class="o">(</span><span class="n">scaleWidth</span><span class="o">,</span> <span class="n">scaleHeight</span><span class="o">);</span>
</span><span class='line'>         <span class="n">Bitmap</span> <span class="n">newbmp</span> <span class="o">=</span> <span class="n">Bitmap</span><span class="o">.</span><span class="na">createBitmap</span><span class="o">(</span><span class="n">bitmap</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">w</span><span class="o">,</span> <span class="n">h</span><span class="o">,</span> <span class="n">matrix</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>         <span class="k">return</span> <span class="n">newbmp</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者直接使用</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">android.media.ThumbnailUtils</span><span class="o">;</span>
</span><span class='line'><span class="c1">//... ...</span>
</span><span class='line'><span class="n">ThumbnailUtils</span><span class="o">.</span><span class="na">extractThumbnail</span><span class="o">(</span><span class="n">Bitmap</span> <span class="n">bitmap</span><span class="o">,</span> <span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">)</span><span class="err">方法</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Launcher中锁定图标位置]]></title>
    <link href="http://dande618.github.com/blog/2013/07/22/canreorder/"/>
    <updated>2013-07-22T19:12:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/07/22/canreorder</id>
    <content type="html"><![CDATA[<h3>一、使图标不能被挤开</h3>

<p>在Launcher中，AllAppsButton的图标是在Hotseat.java加载的，并且设置了对应的layoutparams的属性 canReorder = false;</p>

<p>如字面上的意思，设置了此属性为false的layoutparams中的图标不能被重新排序，即不能被直接或间接挤开。但是可以移动（AllApps按钮不能移动，使因为在hotseat.java单独加载时，没有绑定长按监听器）。当拖动其他图标到此处时，可以形成文件夹。所以如果对此有需求，还要更改其他对应的代码。</p>

<p>通过对源码的搜索，发现只有两处用到了这个属性。</p>

<p>一处是在rearrangementExists方法</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">Rect</span><span class="o">.</span><span class="na">intersects</span><span class="o">(</span><span class="n">r0</span><span class="o">,</span> <span class="n">r1</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">lp</span><span class="o">.</span><span class="na">canReorder</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">mIntersectingViews</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">child</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注释掉此处后，图标可以被直接挤开。</p>

<p>另一处是pushViewsToTempLocation方法</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(!</span><span class="n">cluster</span><span class="o">.</span><span class="na">views</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">v</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">v</span> <span class="o">!=</span> <span class="n">dragView</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">cluster</span><span class="o">.</span><span class="na">isViewTouchingEdge</span><span class="o">(</span><span class="n">v</span><span class="o">,</span> <span class="n">whichEdge</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">LayoutParams</span> <span class="n">lp</span> <span class="o">=</span> <span class="o">(</span><span class="n">LayoutParams</span><span class="o">)</span> <span class="n">v</span><span class="o">.</span><span class="na">getLayoutParams</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">lp</span><span class="o">.</span><span class="na">canReorder</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// The push solution includes the all apps button,  </span>
</span><span class='line'>            <span class="c1">// this is not viable.  </span>
</span><span class='line'>            <span class="n">fail</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注释掉此处后，图标可以被间接挤开，也就是挤压相邻的另一个图标。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android源码，编译完整的APK]]></title>
    <link href="http://dande618.github.com/blog/2013/07/20/mm/"/>
    <updated>2013-07-20T15:06:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/07/20/mm</id>
    <content type="html"><![CDATA[<p>修改源码下的</p>

<p>/build/core/java_library.mk 和 /build/core/package.mk</p>

<p>将 LOCAL_DEX_PREOPT :=true</p>

<p>改成 false</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[launcher2的Folder布局相关]]></title>
    <link href="http://dande618.github.com/blog/2013/07/19/launcher-folder/"/>
    <updated>2013-07-19T20:50:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/07/19/launcher-folder</id>
    <content type="html"><![CDATA[<p>这里只写文件图标相关，主要是FolderIcon.java控制。可以看到，FolderIcon是LinearLayout的子类。</p>

<p>观察/res/layout-land(port)/folder_icon.xml，FolderIcon是由一个ImageView和一个BubbleTextView组成，这个ImageView是FolderIcon的背景。</p>

<p>在这里可以调整文件夹图标的大小。在BubbleTextView对应的的style里调整padding、字体大小、文字与图标间距等。</p>

<p>再看FolderIcon.java。</p>

<p>有一些final的属性，比如显示preview的图标的个数，默认是3个。以及相关动画显示的时间等。</p>

<p>Folder的加载可以参考这篇博客 <a href="http://blog.csdn.net/wdaming1986/article/details/7748738">http://blog.csdn.net/wdaming1986/article/details/7748738</a></p>

<p>显示的程序图标预览在computePreviewItemDrawingParams()方法，之后通过drawPreviewItem()绘制在屏幕上。</p>

<p>当拖动图标移动到一个文件夹上时，会调用CellLayout的onDraw方法，显示蓝色的外框和内部背景。</p>

<p>当点击Hotseat上FolderIcon，打开文件夹后，Hotseat上会显示表示文件夹位置的一个小篮圈，这个也是在CellLayout的onDraw方法里实现的。在growAndFadeOutFolderIcon()方法判断是不是位于Hotseat。</p>

<p>调用顺序依次是onClick【Launcher.java】 -> handleFolderClick【Launcher.java】 -> openFolder【Launcher.java】 -> growAndFadeOutFolderIcon【Launcher.java】 -> setFolderLeaveBehindCell【CellLayout.java】 -> invalidate【CellLayout.java】</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[4.2.2_r1版本源码的launcher2布局介绍]]></title>
    <link href="http://dande618.github.com/blog/2013/07/15/launcher2/"/>
    <updated>2013-07-15T18:20:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/07/15/launcher2</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://image142.poco.cn/mypoco/myphoto/20130714/18/4309479020130714181905068.jpg"></p>

<p>AndroidManifest.xml里面，有两个Activity，其中一个是Launcher，一个是壁纸选择。</p>

<!-- more -->




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;manifest</span>
</span><span class='line'>    <span class="err">&lt;!--</span> <span class="err">...省略掉...</span> <span class="err">--</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;application&gt;</span>
</span><span class='line'>        <span class="nt">&lt;activity</span>
</span><span class='line'>            <span class="na">android:name=</span><span class="s">&quot;com.android.launcher2.Launcher&quot;</span>
</span><span class='line'>            <span class="na">android:launchMode=</span><span class="s">&quot;singleTask&quot;</span>
</span><span class='line'>            <span class="na">android:clearTaskOnLaunch=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>            <span class="na">android:stateNotNeeded=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>            <span class="na">android:theme=</span><span class="s">&quot;@style/Theme&quot;</span>
</span><span class='line'>            <span class="na">android:windowSoftInputMode=</span><span class="s">&quot;adjustPan&quot;</span>
</span><span class='line'>            <span class="na">android:screenOrientation=</span><span class="s">&quot;nosensor&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;intent-filter&gt;</span>
</span><span class='line'>                <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.action.MAIN&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.category.HOME&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.category.DEFAULT&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.category.MONKEY&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/intent-filter&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/activity&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;activity</span>
</span><span class='line'>            <span class="na">android:name=</span><span class="s">&quot;com.android.launcher2.WallpaperChooser&quot;</span>
</span><span class='line'>        <span class="err">&lt;/activity</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- ...省略掉... --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/application&gt;</span>
</span><span class='line'><span class="nt">&lt;/manifest&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>/res/layout-land、/res/layout-port下分别定义了横竖屏的布局。</p>

<p>以横屏为例，省略属性的代码:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;FrameLayout&gt;</span>
</span><span class='line'>    <span class="nt">&lt;com.android.launcher2.DragLayer&gt;</span>
</span><span class='line'>        <span class="nt">&lt;com.android.launcher2.Workspace&gt;</span>
</span><span class='line'>            <span class="nt">&lt;include</span> <span class="na">android:id=</span><span class="s">&quot;@+id/cell1&quot;</span> <span class="na">layout=</span><span class="s">&quot;@layout/workspace_screen&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;include</span> <span class="na">android:id=</span><span class="s">&quot;@+id/cell2&quot;</span> <span class="na">layout=</span><span class="s">&quot;@layout/workspace_screen&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;include</span> <span class="na">android:id=</span><span class="s">&quot;@+id/cell3&quot;</span> <span class="na">layout=</span><span class="s">&quot;@layout/workspace_screen&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;include</span> <span class="na">android:id=</span><span class="s">&quot;@+id/cell4&quot;</span> <span class="na">layout=</span><span class="s">&quot;@layout/workspace_screen&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;include</span> <span class="na">android:id=</span><span class="s">&quot;@+id/cell5&quot;</span> <span class="na">layout=</span><span class="s">&quot;@layout/workspace_screen&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/com.android.launcher2.Workspace&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;include</span> <span class="na">android:id=</span><span class="s">&quot;@+id/qsb_divider&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;include</span> <span class="na">android:id=</span><span class="s">&quot;@+id/dock_divider&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;include</span> <span class="na">android:id=</span><span class="s">&quot;@+id/paged_view_indicator&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;include</span> <span class="na">android:id=</span><span class="s">&quot;@+id/hotseat&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;include</span> <span class="na">android:id=</span><span class="s">&quot;@+id/qsb_bar&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;include</span> <span class="na">android:id=</span><span class="s">&quot;@+id/workspace_cling&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;include</span> <span class="na">android:id=</span><span class="s">&quot;@+id/folder_cling&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;com.android.launcher2.DrawableStateProxyView</span> <span class="na">android:id=</span><span class="s">&quot;@+id/voice_button_proxy&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;include</span> <span class="na">android:id=</span><span class="s">&quot;@+id/apps_customize_pane&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/com.android.launcher2.DragLayer&gt;</span>
</span><span class='line'><span class="nt">&lt;/FrameLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>每一个组件都会对应一个layout文件。</p>

<ul>
<li><p>DragLayer：继承FrameLayout,并在此基础上组合了DragController实现拖放功能。</p></li>
<li><p>Workspace：继承了viewgroup，只接收CellLayout类型的child。在这里可以修改padding、默认屏幕下标，横向竖向的图标数量。</p></li>
<li><p>qsb_divider：左侧的分割线。</p></li>
<li><p>dock_divider：右侧的分割线。</p></li>
<li><p>paged_view_indicator：下方的页数指示器。</p></li>
<li><p>hotseat：在右侧，包含一个AllAppsButton。</p></li>
<li><p>qsb_bar：搜索删除栏，横屏时在左侧，拖动图标时，根据情况出现不同的图标。</p></li>
<li><p>workspace_cling、folder_cling：第一次使用launcher时显示的帮助提示画面。</p></li>
<li><p>apps_customize_pane：点击AllAppsButton后会显示的所有程序界面，开始时是invisible。</p></li>
</ul>


<h3>CellLayout</h3>

<p>Workspace下有五个CellLayout，CellLayout继承自viewgroup。以/res/layout/work_screen.xml为布局文件，在这里可以修改padding、格子的宽高、widthGap、heightGap、maxGap。</p>

<p>图标的大小在/res/values-sw600dp/dimens.xml里定义</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="c">&lt;!-- 图标大小 --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dimen</span> <span class="na">name=</span><span class="s">&quot;app_icon_size&quot;</span><span class="nt">&gt;</span>64dp<span class="nt">&lt;/dimen&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- 图标与文字间距 --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dimen</span> <span class="na">name=</span><span class="s">&quot;app_icon_drawable_padding&quot;</span><span class="nt">&gt;</span>3dp<span class="nt">&lt;/dimen&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- 图标与格子顶部间距 --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dimen</span> <span class="na">name=</span><span class="s">&quot;app_icon_padding_top&quot;</span><span class="nt">&gt;</span>4dp<span class="nt">&lt;/dimen&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>所有图标，包括AllAppsButton都是BubbleTextView的实例，使用/res/layout-land(port)/application.xml作为布局，属性可在/res/values/styles.xml里面修改，主要是padding。</p>

<h3>Hotseat</h3>

<p>Hotseat以/res/layout-land(port)hotseat.xml为布局。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;com.android.launcher2.Hotseat&gt;</span>
</span><span class='line'>    <span class="nt">&lt;com.android.launcher2.CellLayout</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/layout&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/com.android.launcher2.Hotseat&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到里面包含了一个CellLayout，所以整个Launcher包含6个CellLayout。</p>

<p>同样在这里，可以在这里可以修改padding、格子的宽高、widthGap、heightGap、maxGap。</p>

<p>在Nexus7这中屏幕大小上，默认的hotseat上的图标较小，原因是设定了一个缩放参数。</p>

<p>在CellLayout.java里，有</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mHotseatScale = (res.getInteger(R.integer.hotseat_item_scale_percentage) / 100f);</span></code></pre></td></tr></table></div></figure>


<p>/res/values-sw600dp/config.xml</p>

<p>找到这个参数，可以看到默认是80。在这里还可以修改AllAppsButton在Hotseat的下标。</p>

<h3>qsb_bar</h3>

<p>以/res/layout/qsb_bar.xml为布局文件：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;com.android.launcher2.SearchDropTargetBar</span>
</span><span class='line'>    <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">style=</span><span class="s">&quot;@style/QSBBar&quot;</span>
</span><span class='line'>    <span class="na">android:focusable=</span><span class="s">&quot;false&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- Search buttons container --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;include</span> <span class="na">android:id=</span><span class="s">&quot;@+id/qsb_search_bar&quot;</span>
</span><span class='line'>        <span class="na">layout=</span><span class="s">&quot;@layout/search_bar&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- Drag specific targets container --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;LinearLayout</span>
</span><span class='line'>        <span class="na">style=</span><span class="s">&quot;@style/SearchDropTargetBar&quot;</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/drag_target_bar&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;include</span>
</span><span class='line'>            <span class="na">layout=</span><span class="s">&quot;@layout/drop_target_bar&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/LinearLayout&gt;</span>
</span><span class='line'><span class="nt">&lt;/com.android.launcher2.SearchDropTargetBar&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>属性可以在对应的资源文件修改。</p>

<p>竖屏显示垃圾箱的动画在SearchDropTargetBar.java里定义。</p>

<p>在/src/com/android/launcher2/DeleteDropTarget.java的onDragStart方法里，会根据拖动图标的信息来判断，显示[删除]、[卸载和信息]、[信息]其中的一种</p>

<h4>资源查找顺序</h4>

<p>对于Nexus7，values的查找顺序是：</p>

<p>/res/values-sw600dp-land(port) -> values-sw600dp -> values-land(port) -> values</p>

<p>drawable的查找顺序是：</p>

<p>/res/drawable-sw600dp-land-mdpi -> drawable-sw600dp-mdpi -> drawable-land-mdpi -> drawable-mdpi -> drawable</p>

<h4>去掉标题栏</h4>

<p>默认显示系统标题栏，如果要去掉，在/res/values/styles.xml里对应的Theme设置为</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;style</span> <span class="na">name=</span><span class="s">&quot;Theme&quot;</span> <span class="na">parent=</span><span class="s">&quot;@android:style/Theme.Holo.Wallpaper.NoTitleBar&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;android:windowFullscreen&quot;</span><span class="nt">&gt;</span>true<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/style&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>去掉左右两侧的渐变阴影</h4>

<p>删除launcher.xml里<FrameLayout>下的</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">android:</span><span class="n">background</span><span class="o">=</span><span class="s">&quot;@drawable/workspace_bg&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在Launcher.java中，找到以下相关代码注释掉</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">private</span> <span class="n">Drawable</span> <span class="n">mWorkspaceBackgroundDrawable</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Drawable</span> <span class="n">mBlackBackgroundDrawable</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>去掉左右分割线</h4>

<p>在launcher.xml里将对应组件添加属性：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>android:visibility="gone"</span></code></pre></td></tr></table></div></figure>


<p>然后在Workspace.java中，找到以下相关代码注释掉</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">private</span> <span class="n">View</span> <span class="n">mQsbDivider</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">View</span> <span class="n">mDockDivider</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android源码结构]]></title>
    <link href="http://dande618.github.com/blog/2013/06/24/frameworks/"/>
    <updated>2013-06-24T12:23:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/06/24/frameworks</id>
    <content type="html"><![CDATA[<p>转载<a href="http://www.cnblogs.com/yyyyy5101/archive/2011/06/16/2082856.html">http://www.cnblogs.com/yyyyy5101/archive/2011/06/16/2082856.html</a></p>

<p><code>Android 2.1</code> |&#8211; Makefile |&#8211; bionic （bionic C库） |&#8211; bootable （启动引导相关代码） |&#8211; build （存放系统编译规则及generic等基础开发包配置） |&#8211; cts （Android兼容性测试套件标准） |&#8211; dalvik （dalvik JAVA虚拟机） |&#8211; development （应用程序开发相关） |&#8211; external （android使用的一些开源的模组） |&#8211; frameworks</p>

<!-- more -->


<h2><code>Android 2.1</code></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|-- Makefile
</span><span class='line'>|-- bionic                        （bionic C库）
</span><span class='line'>|-- bootable                （启动引导相关代码）
</span><span class='line'>|-- build                        （存放系统编译规则及generic等基础开发包配置）
</span><span class='line'>|-- cts                        （Android兼容性测试套件标准）
</span><span class='line'>|-- dalvik                        （dalvik JAVA虚拟机）
</span><span class='line'>|-- development        （应用程序开发相关）
</span><span class='line'>|-- external                （android使用的一些开源的模组）
</span><span class='line'>|-- frameworks                （核心框架——java及C++语言）
</span><span class='line'>|-- hardware                （部分厂家开源的硬解适配层HAL代码）
</span><span class='line'>|-- out                        （编译完成后的代码输出与此目录）
</span><span class='line'>|-- packages                （应用程序包）
</span><span class='line'>|-- prebuilt                （x86和arm架构下预编译的一些资源）
</span><span class='line'>|-- sdk                        （sdk及模拟器）
</span><span class='line'>|-- system                        （底层文件系统库、应用及组件——C语言）
</span><span class='line'>`-- vendor                （厂商定制代码）</span></code></pre></td></tr></table></div></figure>


<h3>bionic 目录</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|-- libc                        （C库）
</span><span class='line'>|   |-- arch-arm        （ARM架构，包含系统调用汇编实现）
</span><span class='line'>|   |-- arch-x86        （x86架构，包含系统调用汇编实现）
</span><span class='line'>|   |-- bionic                （由C实现的功能，架构无关）
</span><span class='line'>|   |-- docs                （文档）
</span><span class='line'>|   |-- include                （头文件）
</span><span class='line'>|   |-- inet                （？inet相关，具体作用不明）
</span><span class='line'>|   |-- kernel                （Linux内核中的一些头文件）
</span><span class='line'>|   |-- netbsd                （？nesbsd系统相关，具体作用不明）
</span><span class='line'>|   |-- private                （？一些私有的头文件）
</span><span class='line'>|   |-- stdio                （stdio实现）
</span><span class='line'>|   |-- stdlib                （stdlib实现）
</span><span class='line'>|   |-- string                （string函数实现）
</span><span class='line'>|   |-- tools                （几个工具）
</span><span class='line'>|   |-- tzcode                （时区相关代码）
</span><span class='line'>|   |-- unistd                （unistd实现）
</span><span class='line'>|   `-- zoneinfo        （时区信息）
</span><span class='line'>|-- libdl                        （libdl实现，dl是动态链接，提供访问动态链接库的功能）
</span><span class='line'>|-- libm                        （libm数学库的实现，）
</span><span class='line'>|   |-- alpha                （apaha架构）
</span><span class='line'>|   |-- amd64                （amd64架构）
</span><span class='line'>|   |-- arm                （arm架构）
</span><span class='line'>|   |-- bsdsrc                （？bsd的源码）
</span><span class='line'>|   |-- i386                （i386架构）
</span><span class='line'>|   |-- i387                （i387架构？）
</span><span class='line'>|   |-- ia64                （ia64架构）
</span><span class='line'>|   |-- include                （头文件）
</span><span class='line'>|   |-- man                （数学函数，后缀名为.3，一些为freeBSD的库文件）
</span><span class='line'>|   |-- powerpc        （powerpc架构）
</span><span class='line'>|   |-- sparc64                （sparc64架构）
</span><span class='line'>|   `-- src                （源代码）
</span><span class='line'>|-- libstdc++                （libstdc++ C++实现库）
</span><span class='line'>|   |-- include                （头文件）
</span><span class='line'>|   `-- src                （源码）
</span><span class='line'>|-- libthread_db        （多线程程序的调试器库）
</span><span class='line'>|   `-- include                （头文件）
</span><span class='line'>`-- linker                        （动态链接器）
</span><span class='line'>`-- arch                （支持arm和x86两种架构）</span></code></pre></td></tr></table></div></figure>


<h3>bootable 目录</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|-- bootloader                                （适合各种bootloader的通用代码）
</span><span class='line'>|   `-- legacy                                （估计不能直接使用，可以参考）
</span><span class='line'>|       |-- arch_armv6                （V6架构，几个简单的汇编文件）
</span><span class='line'>|       |-- arch_msm7k                （高通7k处理器架构的几个基本驱动）
</span><span class='line'>|       |-- include                        （通用头文件和高通7k架构头文件）
</span><span class='line'>|       |-- libboot                        （启动库，都写得很简单）
</span><span class='line'>|       |-- libc                        （一些常用的c函数）
</span><span class='line'>|       |-- nandwrite                （nandwirte函数实现）
</span><span class='line'>|       `-- usbloader                （usbloader实现）
</span><span class='line'>|-- diskinstaller                        （android镜像打包器，x86可生产iso）
</span><span class='line'>`-- recovery                                （系统恢复相关）
</span><span class='line'>    |-- edify                                （升级脚本使用的edify脚本语言）
</span><span class='line'>    |-- etc                                （init.rc恢复脚本）
</span><span class='line'>    |-- minui                                （一个简单的UI）
</span><span class='line'>    |-- minzip                                （一个简单的压缩工具）
</span><span class='line'>    |-- mtdutils                        （mtd工具）
</span><span class='line'>    |-- res                                （资源）
</span><span class='line'>    |   `-- images                        （一些图片）
</span><span class='line'>    |-- tools                                （工具）
</span><span class='line'>    |   `-- ota                        （OTA Over The Air Updates升级工具）
</span><span class='line'>`-- updater                        （升级器）</span></code></pre></td></tr></table></div></figure>


<h3>build目录</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|-- core                                （核心编译规则）
</span><span class='line'>|-- history                                （历史记录）
</span><span class='line'>|-- libs                                
</span><span class='line'>|   `-- host                        （主机端库，有android “cp”功能替换）
</span><span class='line'>|-- target                                （目标机编译对象）
</span><span class='line'>|   |-- board                        （开发平台）
</span><span class='line'>|   |   |-- emulator        （模拟器）
</span><span class='line'>|   |   |-- generic                （通用）
</span><span class='line'>|   |   |-- idea6410        （自己添加的）
</span><span class='line'>|   |   `-- sim                （最简单）
</span><span class='line'>|   `-- product                （开发平台对应的编译规则）
</span><span class='line'>|       `-- security        （密钥相关）
</span><span class='line'>`-- tools                                （编译中主机使用的工具及脚本）
</span><span class='line'>    |-- acp                        （Android "acp" Command）
</span><span class='line'>    |-- apicheck                （api检查工具）
</span><span class='line'>    |-- applypatch                （补丁工具）
</span><span class='line'>    |-- apriori                        （预链接工具）
</span><span class='line'>    |-- atree                        （tree工具）
</span><span class='line'>    |-- bin2asm                （bin转换为asm工具）
</span><span class='line'>    |-- check_prereq        （检查编译时间戳工具）
</span><span class='line'>    |-- dexpreopt                （模拟器相关工具，具体功能不明）
</span><span class='line'>    |-- droiddoc                （？作用不明，java语言，网上有人说和JDK5有关）
</span><span class='line'>    |-- fs_config                （This program takes a list of files and directories）
</span><span class='line'>    |-- fs_get_stats                （获取文件系统状态）
</span><span class='line'>    |-- iself                        （判断是否ELF格式）
</span><span class='line'>    |-- isprelinked                （判断是否prelinked）
</span><span class='line'>    |-- kcm                        （按键相关）
</span><span class='line'>    |-- lsd                        （List symbol dependencies）
</span><span class='line'>    |-- releasetools                （生成镜像的工具及脚本）
</span><span class='line'>    |-- rgb2565                （rgb转换为565）
</span><span class='line'>    |-- signapk                （apk签名工具）
</span><span class='line'>    |-- soslim                        （strip工具）
</span><span class='line'>`-- zipalign                （zip archive alignment tool）</span></code></pre></td></tr></table></div></figure>


<h3>dalvik目录 dalvik虚拟机</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|-- dalvikvm                        （main.c的目录）
</span><span class='line'>|-- dexdump                        （dex反汇编）
</span><span class='line'>|-- dexlist                                （List all methods in all concrete classes in a DEX file.）
</span><span class='line'>|-- dexopt                                （预验证与优化）
</span><span class='line'>|-- docs                                （文档）
</span><span class='line'>|-- dvz                                （和zygote相关的一个命令）
</span><span class='line'>|-- dx                                （dx工具，将多个java转换为dex）
</span><span class='line'>|-- hit                                （？java语言写成）
</span><span class='line'>|-- libcore                                （核心库）
</span><span class='line'>|-- libcore-disabled                （？禁用的库）
</span><span class='line'>|-- libdex                                （dex的库）
</span><span class='line'>|-- libnativehelper                （Support functions for Android's class libraries）
</span><span class='line'>|-- tests                                （测试代码）
</span><span class='line'>|-- tools                                （工具）
</span><span class='line'>`-- vm                                （虚拟机实现）</span></code></pre></td></tr></table></div></figure>


<h3>development 目录                （开发者需要的一些例程及工具）</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|-- apps                                （一些核心应用程序）
</span><span class='line'>|   |-- BluetoothDebug        （蓝牙调试程序）
</span><span class='line'>|   |-- CustomLocale        （自定义区域设置）
</span><span class='line'>|   |-- Development        （开发）
</span><span class='line'>|   |-- Fallback                （和语言相关的一个程序）
</span><span class='line'>|   |-- FontLab                （字库）
</span><span class='line'>|   |-- GestureBuilder        （手势动作）
</span><span class='line'>|   |-- NinePatchLab        （？）
</span><span class='line'>|   |-- OBJViewer                （OBJ查看器）
</span><span class='line'>|   |-- SdkSetup                （SDK安装器）
</span><span class='line'>|   |-- SpareParts                （高级设置）
</span><span class='line'>|   |-- Term                        （远程登录）
</span><span class='line'>|   `-- launchperf                （？）
</span><span class='line'>|-- build                                （编译脚本模板）
</span><span class='line'>|-- cmds                                （有个monkey工具）
</span><span class='line'>|-- data                                （配置数据）
</span><span class='line'>|-- docs                                （文档）
</span><span class='line'>|-- host                                （主机端USB驱动等）
</span><span class='line'>|-- ide                                （集成开发环境）
</span><span class='line'>|-- ndk                                （本地开发套件——c语言开发套件）
</span><span class='line'>|-- pdk                                （Plug Development Kit）
</span><span class='line'>|-- samples                        （例程）
</span><span class='line'>|   |-- AliasActivity        （？）
</span><span class='line'>|   |-- ApiDemos                （API演示程序）
</span><span class='line'>|   |-- BluetoothChat        （蓝牙聊天）
</span><span class='line'>|   |-- BrowserPlugin        （浏览器插件）
</span><span class='line'>|   |-- BusinessCard        （商业卡）
</span><span class='line'>|   |-- Compass                （指南针）
</span><span class='line'>|   |-- ContactManager        （联系人管理器）
</span><span class='line'>|   |-- CubeLiveWallpaper        （动态壁纸的一个简单例程）
</span><span class='line'>|   |-- FixedGridLayout        （像是布局）
</span><span class='line'>|   |-- GlobalTime                （全球时间）
</span><span class='line'>|   |-- HelloActivity        （Hello）
</span><span class='line'>|   |-- Home                        （Home）
</span><span class='line'>|   |-- JetBoy                        （jetBoy游戏）
</span><span class='line'>|   |-- LunarLander        （貌似又是一个游戏）
</span><span class='line'>|   |-- MailSync                （邮件同步）
</span><span class='line'>|   |-- MultiResolution        （多分辨率）
</span><span class='line'>|   |-- MySampleRss        （RSS）
</span><span class='line'>|   |-- NotePad                （记事本）
</span><span class='line'>|   |-- RSSReader                （RSS阅读器）
</span><span class='line'>|   |-- SearchableDictionary        （目录搜索）
</span><span class='line'>|   |-- SimpleJNI                （JNI例程）
</span><span class='line'>|   |-- SkeletonApp        （空壳APP）
</span><span class='line'>|   |-- Snake                        （snake程序）
</span><span class='line'>|   |-- SoftKeyboard        （软键盘）
</span><span class='line'>|   |-- Wiktionary                （？维基）
</span><span class='line'>|   `-- WiktionarySimple（？维基例程）
</span><span class='line'>|-- scripts                                （脚本）
</span><span class='line'>|-- sdk                                （sdk配置）
</span><span class='line'>|-- simulator                        （？模拟器）
</span><span class='line'>|-- testrunner                        （？测试用）
</span><span class='line'>`-- tools                                （一些工具）</span></code></pre></td></tr></table></div></figure>


<h3>external 目录</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|-- aes                        （AES加密）
</span><span class='line'>|-- apache-http                （网页服务器）
</span><span class='line'>|-- astl                        （ASTL (Android STL) is a slimmed-down version of the regular C++ STL.）
</span><span class='line'>|-- bison                        （自动生成语法分析器，将无关文法转换成C、C++）
</span><span class='line'>|-- blktrace                （blktrace is a block layer IO tracing mechanism）
</span><span class='line'>|-- bluetooth                （蓝牙相关、协议栈）
</span><span class='line'>|-- bsdiff                        （diff工具）
</span><span class='line'>|-- bzip2                        （压缩工具）
</span><span class='line'>|-- clearsilver                （html模板系统）
</span><span class='line'>|-- dbus                        （低延时、低开销、高可用性的IPC机制）
</span><span class='line'>|-- dhcpcd                （DHCP服务）
</span><span class='line'>|-- dosfstools                （DOS文件系统工具）
</span><span class='line'>|-- dropbear                （SSH2的server）
</span><span class='line'>|-- e2fsprogs                （EXT2文件系统工具）
</span><span class='line'>|-- elfcopy                （复制ELF的工具）
</span><span class='line'>|-- elfutils                        （ELF工具）
</span><span class='line'>|-- embunit                （Embedded Unit Project）
</span><span class='line'>|-- emma                        （java代码覆盖率统计工具）
</span><span class='line'>|-- esd                        （Enlightened Sound Daemon，将多种音频流混合在一个设备上播放）
</span><span class='line'>|-- expat                        （Expat is a stream-oriented XML parser.）
</span><span class='line'>|-- fdlibm                        （FDLIBM (Freely Distributable LIBM)）
</span><span class='line'>|-- freetype                （字体）
</span><span class='line'>|-- fsck_msdos                （dos文件系统检查工具）
</span><span class='line'>|-- gdata                        （google的无线数据相关）
</span><span class='line'>|-- genext2fs                （genext2fs generates an ext2 filesystem as a normal (non-root) user）
</span><span class='line'>|-- giflib                        （gif库）
</span><span class='line'>|-- googleclient        （google用户库）
</span><span class='line'>|-- grub                        （This is GNU GRUB, the GRand Unified Bootloader.）
</span><span class='line'>|-- gtest                        （Google C++ Testing Framework）
</span><span class='line'>|-- icu4c                        （ICU(International Component for Unicode)在C/C++下的版本）
</span><span class='line'>|-- ipsec-tools                （This package provides a way to use the native IPsec functionality ）
</span><span class='line'>|-- iptables                （防火墙）
</span><span class='line'>|-- jdiff                        （generate a report describing the difference between two public Java APIs.）
</span><span class='line'>|-- jhead                        （jpeg头部信息工具）
</span><span class='line'>|-- jpeg                        （jpeg库）
</span><span class='line'>|-- junit                        （JUnit是一个Java语言的单元测试框架）
</span><span class='line'>|-- kernel-headers        （内核的一些头文件）
</span><span class='line'>|-- libffi                        （libffi is a foreign function interface library.）
</span><span class='line'>|-- libpcap                （网络数据包捕获函数）
</span><span class='line'>|-- libpng                        （png库）
</span><span class='line'>|-- libxml2                （xml解析库）
</span><span class='line'>|-- mtpd                        （一个命令）
</span><span class='line'>|-- netcat                        （simple Unix utility which reads and writes dataacross network connections）
</span><span class='line'>|-- netperf                        （网络性能测量工具）
</span><span class='line'>|-- neven                        （看代码和JNI相关）
</span><span class='line'>|-- opencore                （多媒体框架）
</span><span class='line'>|-- openssl                （SSL加密相关）
</span><span class='line'>|-- openvpn                （VPN开源库）
</span><span class='line'>|-- oprofile                （OProfile是Linux内核支持的一种性能分析机制。）
</span><span class='line'>|-- ping                        （ping命令）
</span><span class='line'>|-- ppp                        （pppd拨号命令，好像还没有chat）
</span><span class='line'>|-- proguard                （Java class file shrinker, optimizer, obfuscator, and preverifier）
</span><span class='line'>|-- protobuf                （a flexible, efficient, automated mechanism for serializing structured data）
</span><span class='line'>|-- qemu                        （arm模拟器）
</span><span class='line'>|-- safe-iop                （functions for performing safe integer operations ）
</span><span class='line'>|-- skia                        （skia图形引擎）
</span><span class='line'>|-- sonivox                （sole MIDI solution for Google Android Mobile Phone Platform）
</span><span class='line'>|-- speex                        （Speex编/解码API的使用(libspeex)）
</span><span class='line'>|-- sqlite                        （数据库）
</span><span class='line'>|-- srec                        （Nuance 公司提供的开源连续非特定人语音识别）
</span><span class='line'>|-- strace                        （trace工具）
</span><span class='line'>|-- svox                        （Embedded Text-to-Speech）
</span><span class='line'>|-- tagsoup                （TagSoup是一个Java开发符合SAX的HTML解析器）
</span><span class='line'>|-- tcpdump                （抓TCP包的软件）
</span><span class='line'>|-- tesseract                （Tesseract Open Source OCR Engine.）
</span><span class='line'>|-- tinyxml                （TinyXml is a simple, small, C++ XML parser）
</span><span class='line'>|-- tremor                        （I stream and file decoder provides an embeddable,integer-only library）
</span><span class='line'>|-- webkit                        （浏览器核心）
</span><span class='line'>|-- wpa_supplicant        （无线网卡管理）
</span><span class='line'>|-- xmlwriter                （XML 编辑工具）
</span><span class='line'>|-- yaffs2                        （yaffs文件系统）
</span><span class='line'>`-- zlib                        （a general purpose data compression library）</span></code></pre></td></tr></table></div></figure>


<h3>frameworks 目录        （核心框架——java及C++语言）</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|-- base                        （基本内容）
</span><span class='line'>|   |-- api                （？都是xml文件，定义了java的api？）
</span><span class='line'>|   |-- awt                （AWT库）
</span><span class='line'>|   |-- build                （空的）
</span><span class='line'>|   |-- camera                （摄像头服务程序库）
</span><span class='line'>|   |-- cmds                （重要命令：am、app_proce等）
</span><span class='line'>|   |-- core                （核心库）
</span><span class='line'>|   |-- data                （字体和声音等数据文件）
</span><span class='line'>|   |-- docs                （文档）
</span><span class='line'>|   |-- graphics        （图形相关）
</span><span class='line'>|   |-- include                （头文件）
</span><span class='line'>|   |-- keystore        （和数据签名证书相关）
</span><span class='line'>|   |-- libs                （库）
</span><span class='line'>|   |-- location        （地区库）
</span><span class='line'>|   |-- media                （媒体相关库）
</span><span class='line'>|   |-- obex                （蓝牙传输库）
</span><span class='line'>|   |-- opengl                （2D-3D加速库）
</span><span class='line'>|   |-- packages        （设置、TTS、VPN程序）
</span><span class='line'>|   |-- sax                （XML解析器）
</span><span class='line'>|   |-- services        （各种服务程序）
</span><span class='line'>|   |-- telephony        （电话通讯管理）
</span><span class='line'>|   |-- test-runner        （测试工具相关）
</span><span class='line'>|   |-- tests                （各种测试）
</span><span class='line'>|   |-- tools                （一些叫不上名的工具）
</span><span class='line'>|   |-- vpn                （VPN）
</span><span class='line'>|   `-- wifi                （无线网络）
</span><span class='line'>|-- opt                        （可选部分）
</span><span class='line'>|   |-- com.google.android                                （有个framework.jar）
</span><span class='line'>|   |-- com.google.android.googlelogin                （有个client.jar）
</span><span class='line'>|   `-- emoji                （standard message elements）
</span><span class='line'>`-- policies                （Product policies are operating system directions aimed at specific uses）
</span><span class='line'>    `-- base                
</span><span class='line'>        |-- mid        （MID设备）
</span><span class='line'>        `-- phone        （手机类设备，一般用这个）</span></code></pre></td></tr></table></div></figure>


<h3>hardware 目录                （部分厂家开源的硬解适配层HAL代码）</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|-- broadcom                        （博通公司）
</span><span class='line'>|   `-- wlan                        （无线网卡）
</span><span class='line'>|-- libhardware                        （硬件库）
</span><span class='line'>|   |-- include                        （头文件）
</span><span class='line'>|   `-- modules                （Default (and possibly architecture dependents) HAL modules）
</span><span class='line'>|       |-- gralloc                （gralloc显示相关）
</span><span class='line'>|       `-- overlay                （Skeleton for the "overlay" HAL module.）
</span><span class='line'>|-- libhardware_legacy        （旧的硬件库）
</span><span class='line'>|   |-- flashlight                （背光）
</span><span class='line'>|   |-- gps                        （GPS）
</span><span class='line'>|   |-- include                        （头文件）
</span><span class='line'>|   |-- mount                        （旧的挂载器）
</span><span class='line'>|   |-- power                        （电源）
</span><span class='line'>|   |-- qemu                        （模拟器）
</span><span class='line'>|   |-- qemu_tracing        （模拟器跟踪）
</span><span class='line'>|   |-- tests                        （测试）
</span><span class='line'>|   |-- uevent                        （uevent）
</span><span class='line'>|   |-- vibrator                        （震动）
</span><span class='line'>|   `-- wifi                        （无线）
</span><span class='line'>|-- msm7k                        （高通7k处理器开源抽象层）
</span><span class='line'>|   |-- boot                        （启动）
</span><span class='line'>|   |-- libaudio                （声音库）
</span><span class='line'>|   |-- libaudio-qsd8k        （qsd8k的声音相关库）
</span><span class='line'>|   |-- libcamera                （摄像头库）
</span><span class='line'>|   |-- libcopybit                （copybit库）
</span><span class='line'>|   |-- libgralloc                （gralloc库）
</span><span class='line'>|   |-- libgralloc-qsd8k        （qsd8k的gralloc库）
</span><span class='line'>|   |-- liblights                （背光库）
</span><span class='line'>|   `-- librpc                        （RPC库）
</span><span class='line'>|-- ril                                （无线电抽象层）
</span><span class='line'>|   |-- include                        （头文件）
</span><span class='line'>|   |-- libril                        （库）
</span><span class='line'>|   |-- reference-cdma-sms        （cdma短信参考）
</span><span class='line'>|   |-- reference-ril                        （ril参考）
</span><span class='line'>|   `-- rild                                （ril后台服务程序）
</span><span class='line'>`-- ti                                                （ti公司开源HAL）
</span><span class='line'>    |-- omap3                                （omap3处理器）
</span><span class='line'>    |   |-- dspbridge                （DSP桥）
</span><span class='line'>    |   |-- libopencorehw        （opencore硬件库）
</span><span class='line'>    |   |-- liboverlay                （overlay硬件库）
</span><span class='line'>    |   |-- libstagefrighthw        （stagefright硬件库）
</span><span class='line'>    |   `-- omx                        （omx组件）
</span><span class='line'>    `-- wlan                                （无线网卡）</span></code></pre></td></tr></table></div></figure>


<h3>packages 目录</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|-- apps                                （应用程序库）
</span><span class='line'>|   |-- AlarmClock                （闹钟）
</span><span class='line'>|   |-- Bluetooth                （蓝牙）
</span><span class='line'>|   |-- Browser                （浏览器）
</span><span class='line'>|   |-- Calculator                （计算器）
</span><span class='line'>|   |-- Calendar                （日历）
</span><span class='line'>|   |-- Camera                 （相机）
</span><span class='line'>|   |-- CertInstaller                （在Android中安装数字签名，被调用）
</span><span class='line'>|   |-- Contacts                （拨号(调用)、联系人、通话记录）
</span><span class='line'>|   |-- DeskClock                （桌面时钟）
</span><span class='line'>|   |-- Email                        （Email）
</span><span class='line'>|   |-- Gallery                        （相册，和Camera类似，多了列表）
</span><span class='line'>|   |-- Gallery3D                （？3D相册）
</span><span class='line'>|   |-- GlobalSearch        （为google搜索服务，提供底层应用）
</span><span class='line'>|   |-- GoogleSearch        （google搜索）
</span><span class='line'>|   |-- HTMLViewer        （浏览器附属界面，被浏览器应用调用，同时提供存储记录功能）
</span><span class='line'>|   |-- IM                        （即时通讯，为手机提供信号发送、接收、通信的服务）
</span><span class='line'>|   |-- Launcher                （登陆启动项，显示图片框架等等图形界面）
</span><span class='line'>|   |-- Launcher2                （登陆启动项，负责应用的调用）
</span><span class='line'>|   |-- Mms                        （？彩信业务）
</span><span class='line'>|   |-- Music                        （音乐播放器）
</span><span class='line'>|   |-- PackageInstaller        （安装、卸载程序的响应）
</span><span class='line'>|   |-- Phone                        （电话拨号程序）
</span><span class='line'>|   |-- Provision                （预设应用的状态，使能应用）
</span><span class='line'>|   |-- Settings                （开机设定，包括电量、蓝牙、设备信息、界面、wifi等）
</span><span class='line'>|   |-- SoundRecorder        （录音机，可计算存储所需空间和时间）
</span><span class='line'>|   |-- Stk                         （接收和发送短信）
</span><span class='line'>|   |-- Sync                        （空）   -------①
</span><span class='line'>|   |-- Updater                （空）
</span><span class='line'>|   `-- VoiceDialer                （语音识别通话）
</span><span class='line'>|-- inputmethods                （输入法）
</span><span class='line'>|   |-- LatinIME                （拉丁文输入法）
</span><span class='line'>|   |-- OpenWnn                （OpenWnn输入法）
</span><span class='line'>|   `-- PinyinIME                （拼音输入法）
</span><span class='line'>|-- providers                        （提供器，提供应用程序、界面所需的数据）
</span><span class='line'>|   |-- ApplicationsProvider                （应用程序提供器，提供应用程序启动项、更新等）
</span><span class='line'>|   |-- CalendarProvider                        （日历提供器）
</span><span class='line'>|   |-- ContactsProvider                        （联系人提供器）
</span><span class='line'>|   |-- DownloadProvider                （下载管理提供器）
</span><span class='line'>|   |-- DrmProvider                        （创建和更新数据库时调用）
</span><span class='line'>|   |-- GoogleContactsProvider        （联系人提供器的子类，用以同步联系人）
</span><span class='line'>|   |-- GoogleSubscribedFeedsProvider（设置信息提供器）
</span><span class='line'>|   |-- ImProvider                                （空）
</span><span class='line'>|   |-- ManagementProvider                （空）
</span><span class='line'>|   |-- MediaProvider                        （媒体提供器，提供存储数据）
</span><span class='line'>|   |-- TelephonyProvider                （彩信提供器）
</span><span class='line'>|   |-- UserDictionaryProvider        （用户字典提供器，提供用户常用字字典）
</span><span class='line'>|   `-- WebSearchProvider                （空）
</span><span class='line'>|-- services                                        
</span><span class='line'>|   |-- EasService                                （空）
</span><span class='line'>|   `-- LockAndWipe                        （空）
</span><span class='line'>`-- wallpapers                                        （墙纸）
</span><span class='line'>    |-- Basic                                        （基本墙纸，系统内置墙纸）
</span><span class='line'>    |-- LivePicker                                （选择动态壁纸）
</span><span class='line'>    |-- MagicSmoke                        （壁纸特殊效果）
</span><span class='line'>    `-- MusicVisualization                （音乐可视化，图形随音乐而变化）</span></code></pre></td></tr></table></div></figure>


<p>①里面有一个隐藏的.git文件夹，内容都是一样的，没有有意义的代码，config看似乎是一个下载程序，因此认为这些文件夹下没有实质东西。</p>

<h3>prebuilt 目录                        （x86和arm架构下预编译的一些资源）</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|-- android-arm                （arm-android相关）
</span><span class='line'>|   |-- gdbserver                （gdb调试器）
</span><span class='line'>|   `-- kernel                        （模拟的arm内核）
</span><span class='line'>|-- android-x86                （x86-android相关）
</span><span class='line'>|   `-- kernel                        （空的）
</span><span class='line'>|-- common                        （通用编译好的代码，应该是java的）
</span><span class='line'>|-- darwin-x86                        （drawin x86平台）
</span><span class='line'>|   `-- toolchain                （工具链）
</span><span class='line'>|       |-- arm-eabi-4.2.1        
</span><span class='line'>|       |-- arm-eabi-4.3.1        
</span><span class='line'>|       `-- arm-eabi-4.4.0        
</span><span class='line'>|-- darwin-x86_64                （drawin x86 64bit平台）
</span><span class='line'>|-- linux-x86                        （linux x86平台）
</span><span class='line'>|   `-- toolchain                （工具链，我们应该主要用这个）
</span><span class='line'>|       |-- arm-eabi-4.2.1        
</span><span class='line'>|       |-- arm-eabi-4.3.1        
</span><span class='line'>|       |-- arm-eabi-4.4.0        
</span><span class='line'>|       `-- i686-unknown-linux-gnu-4.2.1        （x86版编译器）
</span><span class='line'>|-- linux-x86_64                （linux x86 64bit平台）
</span><span class='line'>|-- windows                        （windows平台）
</span><span class='line'>`-- windows-x86_64        （64bit windows平台）</span></code></pre></td></tr></table></div></figure>


<h3>system 目录                （底层文件系统库、应用及组件——C语言）</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|-- Bluetooth                （蓝牙相关）
</span><span class='line'>|-- core                        （系统核心工具盒接口）
</span><span class='line'>|   |-- adb                （adb调试工具）
</span><span class='line'>|   |-- cpio                （cpio工具，创建img）
</span><span class='line'>|   |-- debuggerd        （调试工具）
</span><span class='line'>|   |-- fastboot        （快速启动相关）
</span><span class='line'>|   |-- include                （系统接口头文件）
</span><span class='line'>|   |-- init                （init程序源代码）
</span><span class='line'>|   |-- libacc                （轻量级C编译器）
</span><span class='line'>|   |-- libctest                （libc测试相关）
</span><span class='line'>|   |-- libcutils        （libc工具）
</span><span class='line'>|   |-- liblog                （log库）
</span><span class='line'>|   |-- libmincrypt        （加密库）
</span><span class='line'>|   |-- libnetutils        （网络工具库）
</span><span class='line'>|   |-- libpixelflinger        （图形处理库）
</span><span class='line'>|   |-- libsysutils        （系统工具库）
</span><span class='line'>|   |-- libzipfile        （zip库）
</span><span class='line'>|   |-- logcat                （查看log工具）
</span><span class='line'>|   |-- logwrapper        （log封装工具）
</span><span class='line'>|   |-- mkbootimg        （制作启动boot.img的工具盒脚本）
</span><span class='line'>|   |-- netcfg                （网络配置netcfg源码）
</span><span class='line'>|   |-- nexus                （google最新手机的代码）
</span><span class='line'>|   |-- rootdir                （rootfs，包含一些etc下的脚本和配置）
</span><span class='line'>|   |-- sh                        （shell代码）
</span><span class='line'>|   |-- toolbox                （toolbox，类似busybox的工具集）
</span><span class='line'>|   `-- vold                （SD卡管理器）
</span><span class='line'>|-- extras                        （额外工具）
</span><span class='line'>|   |-- latencytop        （a tool for software developers ，identifying system latency happen）
</span><span class='line'>|   |-- libpagemap        （pagemap库）
</span><span class='line'>|   |-- librank                （Java Library Ranking System库）
</span><span class='line'>|   |-- procmem        （pagemap相关）
</span><span class='line'>|   |-- procrank        （Java Library Ranking System相关）
</span><span class='line'>|   |-- showmap        （showmap工具）
</span><span class='line'>|   |-- showslab        （showslab工具）
</span><span class='line'>|   |-- sound                （声音相关）
</span><span class='line'>|   |-- su                        （su命令源码）
</span><span class='line'>|   |-- tests                （一些测试工具）
</span><span class='line'>|   `-- timeinfo        （时区相关）
</span><span class='line'>`-- wlan                        （无线相关）
</span><span class='line'>    `-- ti                        （ti网卡相关工具及库）</span></code></pre></td></tr></table></div></figure>


<h3>vendor 目录                        （厂家定制内容）</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|-- aosp                                （android open source project）
</span><span class='line'>|   `-- products                （一些板级规则）
</span><span class='line'>|-- htc                                （HTC公司）
</span><span class='line'>|   |-- common-open        （通用部分）
</span><span class='line'>|   |   `-- akmd                （解压img用的工具）
</span><span class='line'>|   |-- dream-open                （G1开放部分）
</span><span class='line'>|   |-- prebuilt-open        （预编译开放部分）
</span><span class='line'>|   `-- sapphire-open        （sapphire这款型号开放内容）
</span><span class='line'>|-- pv-open                        （没东西）
</span><span class='line'>|-- qcom                                （里面基本是空的）
</span><span class='line'>`-- sample                        （google提供的样例）
</span><span class='line'>    |-- apps                        （应用）
</span><span class='line'>    |   |-- client                （用户）
</span><span class='line'>    |   `-- upgrade        （升级）
</span><span class='line'>    |-- frameworks                （框架）
</span><span class='line'>    |   `-- PlatformLibrary        （平台库）
</span><span class='line'>    |-- products                （产品）
</span><span class='line'>    |-- sdk_addon                （sdk添加部分）
</span><span class='line'>    `-- skins                        （皮肤）
</span><span class='line'>        `-- WVGAMedDpi        （WVGA适用的图片）</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu搭建Java环境]]></title>
    <link href="http://dande618.github.com/blog/2013/06/23/java/"/>
    <updated>2013-06-23T19:44:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/06/23/java</id>
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/fnng/archive/2013/01/30/2883815.html">http://www.cnblogs.com/fnng/archive/2013/01/30/2883815.html</a></p>

<p>登录oracle的网站去下载JDK7</p>

<p><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html">http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html</a></p>

<p><img class="center" src="http://images.cnitblog.com/blog/311516/201301/30223821-19a73c9899094ce9a2ff640c751b9868.png"></p>

<p>好吧！在下载之前我们要先选中“Accept License Agreement” 然后，才允许我们下载。</p>

<p>等等有好几个linux版本的 JDK，那么应该选择那个呢？我们先来看看他们有什么不同。</p>

<p>x86对应的是32位操作系统下的应用程序，x64对应的是64位操作系统下的应用程序，那我们在下载之前要先确定我的操作系统是32位的还是64位的。</p>

<!-- more -->


<p>ctrl+alt+t 调出ubuntu的终端。输入一下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ getconf LONG_BIT //查看操作系统位数
</span><span class='line'>
</span><span class='line'>$ lsb_release -a //顺便看看操作系统信息</span></code></pre></td></tr></table></div></figure>


<p>每种位数操作系统又分了两种类型的安装包。</p>

<ul>
<li><p>rmp原本是RedHat Linux发行版专门用来管理Linux各项套件的程序，由于它遵循GPL规则且功能强大方便，因而广受欢迎。逐渐受到其他发行版的采用。RPM套件管理方式的出现，让Linux易于安装，升级，间接提升了Linux的适用度。</p></li>
<li><p>tar.gz就是用tar和gzip压缩后的文件扩展名。 用winzip或winrar就可以打开。</p></li>
</ul>


<h3>解压</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo -i       //切换root权限</span></code></pre></td></tr></table></div></figure>


<p>进入下载文件的文件夹。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>下载# ls       //查看下载的文件
</span><span class='line'>
</span><span class='line'>下载# sudo mkdir /usr/java       //创建目录
</span><span class='line'>
</span><span class='line'>下载# sudo tar zxvf jdk-7u11-linux-i586.tar.gz -C /usr/java //将下载的文件解压到/usr/java目录下
</span><span class='line'>
</span><span class='line'>下载# cd /usr/java/             //切换到创建的目录下
</span><span class='line'>
</span><span class='line'>/usr/java#             //查看目录</span></code></pre></td></tr></table></div></figure>


<h3>改名（非必须步骤）</h3>

<p>为了便于书写，我们需要对JDK的解压目录进行改名。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@fnngj-H24X:/usr/java# sudo mv jdk1.7.0_11  java-7-sun
</span><span class='line'>
</span><span class='line'>root@fnngj-H24X:/usr/java# ls</span></code></pre></td></tr></table></div></figure>


<h3>修改配置文件</h3>

<p>打开配置文件命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gedit /etc/environment</span></code></pre></td></tr></table></div></figure>


<p>配置内容如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:$JAVA_HOME/bin"
</span><span class='line'>
</span><span class='line'>export CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib
</span><span class='line'>
</span><span class='line'>export JAVA_HOME=/usr/java/java-7-sun</span></code></pre></td></tr></table></div></figure>


<p>保存后关闭配置文件</p>

<p>要使配置文件生效，需要输入一下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/java#  source /etc/environment</span></code></pre></td></tr></table></div></figure>


<h3>验证</h3>

<p>在终端使用echo命令检查环境变量的设置情况</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@fnngj-H24X:/usr/java#  echo $JAVA_HOME
</span><span class='line'>
</span><span class='line'>root@fnngj-H24X:/usr/java# echo $CLASSPATH
</span><span class='line'>
</span><span class='line'>root@fnngj-H24X:/usr/java#  echo $PATH</span></code></pre></td></tr></table></div></figure>


<p>查看安装的java版本：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@fnngj-H24X:/usr/java#  java -version
</span><span class='line'>java version "1.7.0_11"
</span><span class='line'>Java(TM) SE Runtime Environment (build 1.7.0_11-b21)
</span><span class='line'>Java HotSpot(TM) Server VM (build 23.6-b04, mixed mode)</span></code></pre></td></tr></table></div></figure>


<h3>使其对所有用户有效</h3>

<p>重新打开一个终端，查看java版本</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fnngj@fnngj-H24X:~$ java -version
</span><span class='line'>程序 'java' 已包含在下列软件包中：
</span><span class='line'>* default-jre
</span><span class='line'>* gcj-4.6-jre-headless
</span><span class='line'>* gcj-4.7-jre-headless
</span><span class='line'>* openjdk-7-jre-headless
</span><span class='line'>* openjdk-6-jre-headless
</span><span class='line'>请尝试：sudo apt-get install &lt;选定的软件包></span></code></pre></td></tr></table></div></figure>


<p>啊！怎么找不到了呢? 因为刚才是用root用户配置的，且关闭终端，配置的作用就消失了。那怎么办？</p>

<h3>需要修改profile 文件</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/java#  sudo gedit /etc/profile</span></code></pre></td></tr></table></div></figure>


<p>打开profile文件，添加如下内容</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#set java environment
</span><span class='line'>
</span><span class='line'>JAVA_HOME=/usr/java/java-7-sun
</span><span class='line'>export JRE_HOME=/usr/java/java-7-sun/jre
</span><span class='line'>export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH
</span><span class='line'>export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</span></code></pre></td></tr></table></div></figure>


<p>修改完成后保存</p>

<p>这个需要重启电脑才能生效。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在ubuntu下载android源码]]></title>
    <link href="http://dande618.github.com/blog/2013/06/23/android/"/>
    <updated>2013-06-23T16:03:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/06/23/android</id>
    <content type="html"><![CDATA[<p>首先你在自己的电脑上要安装好Ubuntu。</p>

<h3>1.安装Git工具</h3>

<p>Android源代码采用Git工具来管理，与SVN相比，这是一种分布式的源代码管理工具，而SVN是集中式的源代码管理工具。要安装Git工具，在Ubuntu上执行以下命令即可：</p>

<p>USER-NAME@MACHINE-NAME:~$ sudo apt-get install git-core gnupg</p>

<h3>2.安装Java SDK</h3>

<!-- more -->


<h3>3.依赖的其它包。在Ubuntu上执行以下命令：</h3>

<p>USER-NAME@MACHINE-NAME:~$ sudo apt-get install flex bison gperf libsdl-dev libesd0-dev libwxgtk2.6-dev build-essential zip curl</p>

<p>此处是安装了很多软件，直接将命令复制粘贴</p>

<h3>4.调试工具。在Ubuntu上执行以下命令：</h3>

<p>USER-NAME@MACHINE-NAME:~$ sudo apt-get install valgrind</p>

<h2>下载android源码</h2>

<p>官方页面 <a href="http://source.android.com/source/downloading.html">http://source.android.com/source/downloading.html</a></p>

<p>转载 <a href="http://blog.csdn.net/lengxibo/article/details/8299888#reply">http://blog.csdn.net/lengxibo/article/details/8299888#reply</a></p>

<p><strong>注意原文最后hosts修改有点问题，作者没有在文中修改，这里已经改正。</strong></p>

<p>下载之前还是先修改hosts比较好（gfw。。）</p>

<p>先 sudo -i   切换root权限</p>

<p>gedit /etc/hosts   编辑hosts文件，在最后添加以下代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>74.125.71.82 www.googlesource.com
</span><span class='line'>74.125.31.82 android.googlesource.com
</span><span class='line'>203.208.46.172 cache.pack.google.com
</span><span class='line'>59.24.3.173 cache.pack.google.com
</span><span class='line'>173.194.72.82 gerrit.googlesource.com</span></code></pre></td></tr></table></div></figure>


<h3>下载过程分为以下几个步骤</h3>

<h4>1、安装curl</h4>

<p> 在终端中执行 sudo apt-get install curl</p>

<h4>2、创建一个~/bin目录，并添加到环境变量中</h4>

<p>$ mkdir ~/bin</p>

<p>$ PATH=~/bin:$PATH</p>

<h4>3、下载repo脚本并修改权限为可执行</h4>

<p>$ curlhttps://dl-ssl.google.com/dl/googlesource/git-repo/repo > ~/bin/repo</p>

<p>$ chmod a+x~/bin/repo</p>

<h4>4、创建一个保存android源码的目录，修改为最大权限（这个是我自己增加的一个操作，怕以后操作权限不足等麻烦），并进入到该目录下</h4>

<p>$ mkdir /opt/android_source</p>

<p>$ sudo chmod –R 777 /opt/android_source</p>

<p>$ cd  /opt/android_source</p>

<h4>5、初始化repo，并选择要下载的分支（版本）</h4>

<p>$ repo init -u https://android.googlesource.com/platform/manifest</p>

<p>$ repo init -u https://android.googlesource.com/platform/manifest-b android-4.2_r1</p>

<p>备注：在这过程中需要输入你的姓名、邮箱等信息。感觉只要输入就可以了，我输入了一个随意名称，我自己的126邮箱</p>

<h4>6、开始下载源码</h4>

<p>$ repo sync</p>

<p>正常情况下，上面就是下载android4.2源码的流程，但我在下载的过程中遇到了下面问题</p>

<h3>问题1：“A new repo command ( 1.18) is available.”</h3>

<p>其实这个问题就是说你本地的repo版本不是1.18，比这个旧，在出现这个的时候，下面会有一个提示你怎么操作的，如：</p>

<p>&#8230; A new repo command ( 1.18) is available.</p>

<p>&#8230; You should upgrade soon:</p>

<p><strong>cp /home/pn/android/.repo/repo/repo/home/pn/bin/repo</strong>（执行这一句就可以），开始我苦悲的上网找这个的解决方法，，，，浪费不少时间。。</p>

<h3>问题2：“error: Exited sync due to fetch errors&#8230;”</h3>

<p>这个问题，网上都说是需要IP认证，其中我也根据</p>

<p>http://blog.csdn.net/fantao015/article/details/7625559</p>

<p>上面的操作，执行了一遍，其中包括注册了一个@gmail.com邮件，后面发现我没有用到这个也全部下载成功了。</p>

<h2>如果官方地址无法下载或下载速度慢，可以尝试从非官方网址下载，参考这个</h2>

<p><a href="http://li53262182.blog.163.com/blog/static/128393387201182474652281/">http://li53262182.blog.163.com/blog/static/128393387201182474652281/</a></p>

<p>我是联通（网通）的网络，还是官方的快一些。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在win7基础上，安装ubuntu双系统]]></title>
    <link href="http://dande618.github.com/blog/2013/06/21/ubuntu/"/>
    <updated>2013-06-21T16:50:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/06/21/ubuntu</id>
    <content type="html"><![CDATA[<h2>安装ubuntu方法</h2>

<p>实际安装最新版本，方法是对的。</p>

<p><a href="http://ifeiyang.cn/archives/1835.html">http://ifeiyang.cn/archives/1835.html</a></p>

<h3>适用环境：</h3>

<p>理论上win7、vista系统32位或64位均可。ubuntu适用与10.X版本，且ubuntu-10.10-desktop-i386.iso 和ubuntu-10.10-desktop-amd64.iso测试通过。接下来以ubuntu-10.10-desktop-amd64.iso安装为例作为说明。</p>

<h3>第一步：下载Ubuntu10.10</h3>

<p>下载地址： http://www.ubuntu.com/desktop/get-ubuntu/download</p>

<p>下载版本为最新桌面版，朋友们可以选择安装不同版本。</p>

<!-- more -->


<h3>第二步：下载grub4dos</h3>

<p>GRUB4DOS是一款优秀的多系统引导软件，需要其引导安装ubuntu，最新版为grub4dos-0.4.4.zip，于2009年4月发布。</p>

<p>下载地址：http://download.gna.org/grub4dos/</p>

<h3>第三步：设置启动项</h3>

<h3>1. 解压grub4dos，将目录中的grldr，grldr.mbr，grub.exe三个文件复制到C盘根目录下</h3>

<h3>2. 解压ubuntu10.10，将casper目录下vmlinuz、initrd.lz两个文件复制到C盘根目录下</h3>

<h3>3. C 盘根目录下建立menu.lst 文件，内容为：</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>title Install Ubuntu 
</span><span class='line'>root (hd0,0) 
</span><span class='line'>kernel (hd0,0)/vmlinuz boot=casper iso-scan/filename=/ubuntu-10.10-desktop-i386.iso ro quiet splash locale=zh_CN.UTF-8 
</span><span class='line'>initrd (hd0,0)/initrd.lz</span></code></pre></td></tr></table></div></figure>


<h3>4. 在C 盘根目录新建一个文件命名为boot.ini 。内容如下：</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[boot loader] 
</span><span class='line'>[operating systems] 
</span><span class='line'>c:\grldr.mbr="ubuntu"</span></code></pre></td></tr></table></div></figure>


<h3>5. 将ubuntu-10.10-desktop-i386.iso复制到C盘或者D盘根目录下</h3>

<p>注：你下载的Ubuntu文件名字要和第三步的文件名字相一致</p>

<h3>第四步：硬盘安装Ubuntu10.10</h3>

<p>重启电脑，按回车进入Ubuntu10.10的安装界面</p>

<p>打开终端输入如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo umount -l /isodevice</span></code></pre></td></tr></table></div></figure>


<p>这一命令取消掉对光盘所在驱动器的挂载，否则分区界面找不到分区。</p>

<p>双击安装Ubuntu，根据提示进行安装即可</p>

<p>补充：</p>

<p>安装完Ubuntu10.10后grldr.mbr，grub.exe，vmlinuz，initrd.lz，menu.lst，boot.ini这几个文件都可以删除了，开机后会进入引导界面，可以选择是Ubuntu启动或者win7启动，不用做任何设置。 还有这个是在win7或vista下硬盘安装的Ubuntu的方法，方法收集自网络，老饕测试成功，如果是系统是XP或是其他的此方法不一定有效。</p>

<p>还有安装Linux时分区的一些问题：</p>

<p>安装的时候选择手动分区，推介专门Ubuntu做3个分区：根分区，home分区和交换分区（swap）。</p>

<p>根分区：相当于系统盘</p>

<p>home分区：主要是放一些用户文件什么的</p>

<p>交换分区（swap）：这东西类似 Windows中的虚拟内存，但比那个还要专业，直接搞成一个分区形式了，而且Linux也有SWAP文件的形式出现，推介大小为自己内存容量的2倍，太大了也没什么用，毕竟硬盘的速度实在太慢了。</p>

<h1>修复win7启动项</h1>

<p>如果只能看到ubuntu启动项，而找不到win7，可以尝试一下方法</p>

<h2>第一种方法</h2>

<p>进ubuntu，打开终端（Ctrl+Alt+T），执行 sudo grub-update</p>

<h2>第二种方法</h2>

<p>手动修改 grub.cfg，在适合的位置加入win7的启动项。</p>

<p>参考 <a href="http://www.huomo.cn/os/article-1867d.html">http://www.huomo.cn/os/article-1867d.html</a></p>

<h3>1. 取得root权限（系统最高权限）</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo -i</span></code></pre></td></tr></table></div></figure>


<p>按提示输入密码；</p>

<p>备份原来的grub.cfg</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp /boot/grub/grub.cfg grub.cfg.bak</span></code></pre></td></tr></table></div></figure>


<h3>2. 查看各个硬盘分区的UUID值</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ls -l /dev/disk/by-uuid</span></code></pre></td></tr></table></div></figure>


<h3>3. 修改启动脚步grub.cfg</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gedit /boot/grub/grub.cfg</span></code></pre></td></tr></table></div></figure>


<p>在合适位置加入下面代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>menuentry（“Win7 Ultimate loader (sda1)”）{
</span><span class='line'>insmod part_msdos
</span><span class='line'>insmod ntfs
</span><span class='line'>set root='(hd0,msdos1)'
</span><span class='line'>searcg\h --no-floppy --fs-uuid --set=root 40F44BE7F44BDE32
</span><span class='line'>chainloader +1
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>第三种方法</h2>

<p>如果win7的引导出现错误，比如bootmgr is missing。可以使用安装盘修复，或者使用u盘制作winPE系统（UltraISO+ISO镜像），然后使用NTBOOTautofix进行修复。</p>

<h1>在WIN7中修复ubuntu的启动项</h1>

<p>可以参考这个帖子 <a href="http://bbs.pcbeta.com/viewthread-600509-1-1.html">http://bbs.pcbeta.com/viewthread-600509-1-1.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java之命令模式（Command Pattern）]]></title>
    <link href="http://dande618.github.com/blog/2013/06/18/Command/"/>
    <updated>2013-06-18T19:33:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/06/18/Command</id>
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/devinzhang/archive/2012/01/06/2315235.html">http://www.cnblogs.com/devinzhang/archive/2012/01/06/2315235.html</a></p>

<h2>1.概念</h2>

<p>将来自客户端的请求传入一个对象，从而使你可用不同的请求对客户进行参数化。用于“行为请求者”与“行为实现者”解耦，可实现二者之间的松耦合，以便适应变化。分离变化与不变的因素。</p>

<p>在面向对象的程序设计中，一个对象调用另一个对象，一般情况下的调用过程是：创建目标对象实例；设置调用参数；调用目标对象的方法。</p>

<p>但在有些情况下有必要使用一个专门的类对这种调用过程加以封装，我们把这种专门的类称作command类。</p>

<p>Command模式可应用于</p>

<ul>
<li><p>整个调用过程比较繁杂，或者存在多处这种调用。这时，使用Command类对该调用加以封装，便于功能的再利用。</p></li>
<li><p>调用前后需要对调用参数进行某些处理。</p></li>
<li><p>调用前后需要进行某些额外处理，比如日志，缓存，记录历史操作等。</p></li>
</ul>


<p>Command模式有如下效果：</p>

<ul>
<li><p>将调用操作的对象和知道如何实现该操作的对象解耦。</p></li>
<li><p>Command是头等对象。他们可以像其他对象一样被操作和扩展。</p></li>
<li><p>你可将多个命令装配成一个复合命令。</p></li>
<li><p>增加新的Command很容易，因为这无需改变现有的类。</p></li>
</ul>


<!-- more -->


<h2>2.UML</h2>

<p><img class="center" src="http://pic002.cnblogs.com/images/2012/267603/2012010622255792.jpg"></p>

<h2>3.代码</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Command</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConcreteCommand</span> <span class="kd">implements</span> <span class="n">Command</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Receiver</span> <span class="n">receiver</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">state</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ConcreteCommand</span><span class="o">(</span><span class="n">Receiver</span> <span class="n">receiver</span><span class="o">){</span>
</span><span class='line'>       <span class="k">this</span><span class="o">.</span><span class="na">receiver</span> <span class="o">=</span> <span class="n">receiver</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">receiver</span><span class="o">.</span><span class="na">action</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Receiver</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">action</span><span class="o">(){</span>
</span><span class='line'>       <span class="c1">//真正执行命令操作的功能代码</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Invoker</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Command</span> <span class="n">command</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCommand</span><span class="o">(</span><span class="n">Command</span> <span class="n">command</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">this</span><span class="o">.</span><span class="na">command</span> <span class="o">=</span> <span class="n">command</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">runCommand</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">command</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">assemble</span><span class="o">(){</span>
</span><span class='line'>       <span class="c1">//创建接收者</span>
</span><span class='line'>       <span class="n">Receiver</span> <span class="n">receiver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Receiver</span><span class="o">();</span>
</span><span class='line'>       <span class="c1">//创建命令对象，设定它的接收者</span>
</span><span class='line'>       <span class="n">Command</span> <span class="n">command</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcreteCommand</span><span class="o">(</span><span class="n">receiver</span><span class="o">);</span>
</span><span class='line'>       <span class="c1">//创建Invoker，把命令对象设置进去</span>
</span><span class='line'>       <span class="n">Invoker</span> <span class="n">invoker</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Invoker</span><span class="o">();</span>
</span><span class='line'>       <span class="n">invoker</span><span class="o">.</span><span class="na">setCommand</span><span class="o">(</span><span class="n">command</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面给个例子，是模拟对电视机的操作有开机、关机、换台命令。代码如下</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//命令接收者</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Tv</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　</span><span class="kd">public</span> <span class="kt">int</span> <span class="n">currentChannel</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="err">　　</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">turnOn</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　</span>   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;The televisino is on.&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">　　</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">　　</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">turnOff</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　</span>   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;The television is off.&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">　　</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">　　</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">changeChannel</span><span class="o">(</span><span class="kt">int</span> <span class="n">channel</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　</span>   <span class="k">this</span><span class="o">.</span><span class="na">currentChannel</span> <span class="o">=</span> <span class="n">channel</span><span class="o">;</span>
</span><span class='line'><span class="err">　　</span>   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Now TV channel is &quot;</span> <span class="o">+</span> <span class="n">channel</span><span class="o">);</span>
</span><span class='line'><span class="err">　　</span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//执行命令的接口</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Command</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　</span><span class="kt">void</span> <span class="n">execute</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//开机命令</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CommandOn</span> <span class="kd">implements</span> <span class="n">Command</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　</span><span class="kd">private</span> <span class="n">Tv</span> <span class="n">myTv</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="err">　　</span><span class="kd">public</span> <span class="n">CommandOn</span><span class="o">(</span><span class="n">Tv</span> <span class="n">tv</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　</span>   <span class="n">myTv</span> <span class="o">=</span> <span class="n">tv</span><span class="o">;</span>
</span><span class='line'><span class="err">　　</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">　　</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">execute</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　</span>   <span class="n">myTv</span><span class="o">.</span><span class="na">turnOn</span><span class="o">();</span>
</span><span class='line'><span class="err">　　</span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//关机命令</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CommandOff</span> <span class="kd">implements</span> <span class="n">Command</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　</span><span class="kd">private</span> <span class="n">Tv</span> <span class="n">myTv</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="err">　　</span><span class="kd">public</span> <span class="n">CommandOff</span><span class="o">(</span><span class="n">Tv</span> <span class="n">tv</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　</span>   <span class="n">myTv</span> <span class="o">=</span> <span class="n">tv</span><span class="o">;</span>
</span><span class='line'><span class="err">　　</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">　　</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">execute</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　</span>   <span class="n">myTv</span><span class="o">.</span><span class="na">turnOff</span><span class="o">();</span>
</span><span class='line'><span class="err">　　</span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//频道切换命令</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CommandChange</span> <span class="kd">implements</span> <span class="n">Command</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　</span><span class="kd">private</span> <span class="n">Tv</span> <span class="n">myTv</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="err">　　</span><span class="kd">private</span> <span class="kt">int</span> <span class="n">channel</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="err">　　</span><span class="kd">public</span> <span class="n">CommandChange</span><span class="o">(</span><span class="n">Tv</span> <span class="n">tv</span><span class="o">,</span> <span class="kt">int</span> <span class="n">channel</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　</span>   <span class="n">myTv</span> <span class="o">=</span> <span class="n">tv</span><span class="o">;</span>
</span><span class='line'> <span class="err">　　</span>  <span class="k">this</span><span class="o">.</span><span class="na">channel</span> <span class="o">=</span> <span class="n">channel</span><span class="o">;</span>
</span><span class='line'><span class="err">　　</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">　　</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">execute</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　</span>   <span class="n">myTv</span><span class="o">.</span><span class="na">changeChannel</span><span class="o">(</span><span class="n">channel</span><span class="o">);</span>
</span><span class='line'><span class="err">　　</span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//可以看作是遥控器吧</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Control</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　</span><span class="kd">private</span> <span class="n">Command</span> <span class="n">onCommand</span><span class="o">,</span> <span class="n">offCommand</span><span class="o">,</span> <span class="n">changeChannel</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="err">　　</span><span class="kd">public</span> <span class="n">Control</span><span class="o">(</span><span class="n">Command</span> <span class="n">on</span><span class="o">,</span> <span class="n">Command</span> <span class="n">off</span><span class="o">,</span> <span class="n">Command</span> <span class="n">channel</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="err">　　</span>  <span class="n">onCommand</span> <span class="o">=</span> <span class="n">on</span><span class="o">;</span>
</span><span class='line'> <span class="err">　　</span>  <span class="n">offCommand</span> <span class="o">=</span> <span class="n">off</span><span class="o">;</span>
</span><span class='line'><span class="err">　　</span>   <span class="n">changeChannel</span> <span class="o">=</span> <span class="n">channel</span><span class="o">;</span>
</span><span class='line'><span class="err">　　</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">　　</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">turnOn</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　</span>   <span class="n">onCommand</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span>
</span><span class='line'><span class="err">　　</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">　　</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">turnOff</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　</span>   <span class="n">offCommand</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span>
</span><span class='line'><span class="err">　　</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">　　</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">changeChannel</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'> <span class="err">　　</span>  <span class="n">changeChannel</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span>
</span><span class='line'><span class="err">　　</span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//测试类</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
</span><span class='line'><span class="err">　　</span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="err">　　</span> <span class="c1">// 命令接收者</span>
</span><span class='line'> <span class="err">　　</span>  <span class="n">Tv</span> <span class="n">myTv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Tv</span><span class="o">();</span>
</span><span class='line'> <span class="err">　　</span>  <span class="c1">// 开机命令</span>
</span><span class='line'>  <span class="err">　　</span> <span class="n">CommandOn</span> <span class="n">on</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CommandOn</span><span class="o">(</span><span class="n">myTv</span><span class="o">);</span>
</span><span class='line'>  <span class="err">　　</span> <span class="c1">// 关机命令</span>
</span><span class='line'>  <span class="err">　　</span> <span class="n">CommandOff</span> <span class="n">off</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CommandOff</span><span class="o">(</span><span class="n">myTv</span><span class="o">);</span>
</span><span class='line'>  <span class="err">　　</span> <span class="c1">// 频道切换命令</span>
</span><span class='line'> <span class="err">　　</span>  <span class="n">CommandChange</span> <span class="n">channel</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CommandChange</span><span class="o">(</span><span class="n">myTv</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'> <span class="err">　　</span>  <span class="c1">// 命令控制对象</span>
</span><span class='line'><span class="err">　　</span>   <span class="n">Control</span> <span class="n">control</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Control</span><span class="o">(</span><span class="n">on</span><span class="o">,</span> <span class="n">off</span><span class="o">,</span> <span class="n">channel</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">　　</span> <span class="c1">// 开机</span>
</span><span class='line'>  <span class="err">　　</span> <span class="n">control</span><span class="o">.</span><span class="na">turnOn</span><span class="o">();</span>
</span><span class='line'> <span class="err">　　</span>  <span class="c1">// 切换频道</span>
</span><span class='line'> <span class="err">　　</span>  <span class="n">control</span><span class="o">.</span><span class="na">changeChannel</span><span class="o">();</span>
</span><span class='line'> <span class="err">　　</span>  <span class="c1">// 关机</span>
</span><span class='line'> <span class="err">　　</span>  <span class="n">control</span><span class="o">.</span><span class="na">turnOff</span><span class="o">();</span>
</span><span class='line'><span class="err">　　</span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行结果为：
The televisino is on.
Now TV channel is 2
The television is off.</p>

<h2>4.应用场景</h2>

<p>在下面的情况下应当考虑使用命令模式：</p>

<ol>
<li><p>使用命令模式作为&#8221;CallBack&#8221;在面向对象系统中的替代。&#8221;CallBack&#8221;讲的便是先将一个函数登记上，然后在以后调用此函数。</p></li>
<li><p>需要在不同的时间指定请求、将请求排队。一个命令对象和原先的请求发出者可以有不同的生命期。换言之，原先的请求发出者可能已经不在了，而命令对象本身仍然是活动的。这时命令的接收者可以是在本地，也可以在网络的另外一个地址。命令对象可以在串形化之后传送到另外一台机器上去。</p></li>
<li><p>系统需要支持命令的撤消(undo)。命令对象可以把状态存储起来，等到客户端需要撤销命令所产生的效果时，可以调用undo()方法，把命令所产生的效果撤销掉。命令对象还可以提供redo()方法，以供客户端在需要时，再重新实施命令效果。</p></li>
<li><p>如果一个系统要将系统中所有的数据更新到日志里，以便在系统崩溃时，可以根据日志里读回所有的数据更新命令，重新调用Execute()方法一条一条执行这些命令，从而恢复系统在崩溃前所做的数据更新。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AsyncTask类的使用 ]]></title>
    <link href="http://dande618.github.com/blog/2013/06/16/AsyncTask/"/>
    <updated>2013-06-16T22:22:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/06/16/AsyncTask</id>
    <content type="html"><![CDATA[<p>AsyncTask在包android.os中，使用AsyncTask能够使得和UI 线程的交互更为简单合适。它可以用来进行后台的操作，并且把结果显示在UI线程上，而不需要程序员自己人为的对线程（Thread or Handler）进行控制和管理。</p>

<p>这个类通过3个泛型参数（params，progress，result），和4个步骤（begin，doinbackground，processProgress，end）来定义。</p>

<p><a href="http://blog.csdn.net/dww410/article/details/6605467">http://blog.csdn.net/dww410/article/details/6605467</a></p>

<!-- more -->


<h3>（一）三个泛型参数params，progress，result</h3>

<p>这个三个参数可为任何类型和任何类型的数组，如果不需要，则用Void代替。</p>

<p>params对应于doInbackground（Params&#8230;parames）</p>

<p>progress对应于onProgressUpdate（）和publishProgress（Progress&#8230;progress)，用来反应线程执行的进度,其中publishProgress方法必须在doInBackground方法中调用。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>             <span class="n">Result</span> <span class="nf">doInBackground</span><span class="o">()</span>
</span><span class='line'>               <span class="o">{</span>
</span><span class='line'><span class="err">　　　　　　　　</span><span class="n">A</span><span class="o">();</span>            <span class="c1">//方法A,从网络读取数据</span>
</span><span class='line'>                      <span class="k">this</span><span class="o">.</span><span class="na">publishProgress</span><span class="o">(</span><span class="s">&quot;state1&quot;</span><span class="o">,</span><span class="s">&quot;I like it&quot;</span><span class="o">);</span>
</span><span class='line'>                      <span class="n">B</span><span class="o">();</span>          <span class="c1">//方法B，复杂的计算处理</span>
</span><span class='line'>                      <span class="k">this</span><span class="o">.</span><span class="na">publishProgress</span><span class="o">(</span><span class="s">&quot;state2&quot;</span><span class="o">,</span><span class="s">&quot;for test&quot;</span><span class="o">);</span>
</span><span class='line'>                      <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="err">　　　　　</span> <span class="o">}</span>
</span><span class='line'>               <span class="n">onProgressUpdate</span><span class="o">(</span><span class="n">String</span> <span class="n">values</span><span class="o">)</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                   <span class="k">if</span><span class="o">(</span><span class="n">values</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;state1&quot;</span><span class="o">))</span>
</span><span class='line'>                          <span class="n">C</span><span class="o">();</span>        <span class="c1">//将A读取的数据在UI上展现</span>
</span><span class='line'>                   <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">values</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;state2&quot;</span><span class="o">))</span>
</span><span class='line'>                         <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">&quot;value&quot;</span><span class="o">,</span><span class="n">values</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
</span><span class='line'><span class="err">　　　　　</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>result后台进程计算得出的结果，对应于onPostExecute（Result），后台进程得出的结果，作为参数传递给此方法。</p>

<h3>（二）四个步骤和对应的方法</h3>

<p>（1）begin和onPreExecute（）</p>

<p>任务启动后（通过execute（）方法启动任务），这个步骤用来在UI线程中做一些初始化的工作，比如展现一个进度条。</p>

<p>（2）doInBackground和doInBackground()</p>

<p>当onPreExecute（）方法执行完后，这个步骤立即在后台线程运行，用来处理一些耗时的计算及其他引起UI线程阻塞的操作，处理的结果result返回给onPostExecute（Result）方法，也可以使用publishProgress（）和UI线程进行交互，上面已有例子。</p>

<p>（3）processProgress和onProgressUpdate（）</p>

<p>每次当在后台线程里调用了publishProgress（）方法后，onProgressUpdate（）都会在UI线程中执行。这个步骤在后台线程还未结束时，用来进行UI线程和后台线程的交互。</p>

<p>（4）end和onPostExecute（）</p>

<p>当后台线程执行完毕之后，后台线程将得到的结果传递给onPostExecute（）方法，这个步骤在UI线程上展现后台线程执行完毕后最终得到的结果。</p>

<p>上面这四个方法都是只有doInBackground（）是在后台线程中执行，其他都是在UI线程中执行。 这四个方法都是protected，必须继承的使用AsyncTask类，必须重写doInbackground（）方法，经常还要重写onPostExecute（）方法。</p>

<p>当然具体重写哪些方法根据实际需要决定，如果要在后台进程尚未执行完成需要和UI交互，就要重写onProgressUpdate（）方法，如果只需要等后台进程执行完毕得到结果后再和UI交互，则重写onPostExecute（）方法就行。</p>

<h3>（三）使用AsyncTask遵循的线程规则</h3>

<p>（1）这个类的实例必须在UI线程中创建。</p>

<p>（2）execute()必须在UI线程中调用。</p>

<p>（3）不要自己动手去调用上面的四个方法。</p>

<p>（4）这个任务只能被执行一次，如果尝试多次执行会抛出异常。</p>

<h1>详解Android中AsyncTask的使用</h1>

<p><a href="http://blog.csdn.net/liuhe688/article/details/6532519">http://blog.csdn.net/liuhe688/article/details/6532519</a></p>

<p>在Android中实现异步任务机制有两种方式，Handler和AsyncTask。</p>

<p>Handler模式需要为每一个任务创建一个新的线程，任务完成后通过Handler实例向UI线程发送消息，完成界面的更新，这种方式对于整个过程的控制比较精细，但也是有缺点的，例如代码相对臃肿，在多个任务同时执行时，不易对线程进行精确的控制。关于Handler的相关知识，前面也有所介绍，不清楚的朋友们可以参照一下。</p>

<p>为了简化操作，Android1.5提供了工具类android.os.AsyncTask，它使创建异步任务变得更加简单，不再需要编写任务线程和Handler实例即可完成相同的任务。</p>

<p>先来看看AsyncTask的定义：</p>

<p>[java] view plain
copy</p>

<p>public abstract class AsyncTask&lt;Params, Progress, Result> {</p>

<p>三种泛型类型分别代表“启动任务执行的输入参数”、“后台任务执行的进度”、“后台计算结果的类型”。在特定场合下，并不是所有类型都被使用，如果没有被使用，可以用java.lang.Void类型代替。</p>

<p>一个异步任务的执行一般包括以下几个步骤：</p>

<p>1.execute(Params&#8230; params)，执行一个异步任务，需要我们在代码中调用此方法，触发异步任务的执行。</p>

<p>2.onPreExecute()，在execute(Params&#8230; params)被调用后立即执行，一般用来在执行后台任务前对UI做一些标记。</p>

<p>3.doInBackground(Params&#8230; params)，在onPreExecute()完成后立即执行，用于执行较为费时的操作，此方法将接收输入参数和返回计算结果。在执行过程中可以调用publishProgress(Progress&#8230; values)来更新进度信息。</p>

<p>4.onProgressUpdate(Progress&#8230; values)，在调用publishProgress(Progress&#8230; values)时，此方法被执行，直接将进度信息更新到UI组件上。</p>

<p>5.onPostExecute(Result result)，当后台操作结束时，此方法将会被调用，计算结果将做为参数传递到此方法中，直接将结果显示到UI组件上。</p>

<p>在使用的时候，有几点需要格外注意：</p>

<p>1.异步任务的实例必须在UI线程中创建。</p>

<p>2.execute(Params&#8230; params)方法必须在UI线程中调用。</p>

<p>3.不要手动调用onPreExecute()，doInBackground(Params&#8230; params)，onProgressUpdate(Progress&#8230; values)，onPostExecute(Result result)这几个方法。</p>

<p>4.不能在doInBackground(Params&#8230; params)中更改UI组件的信息。</p>

<p>5.一个任务实例只能执行一次，如果执行第二次将会抛出异常。</p>

<p>接下来，我们来看看如何使用AsyncTask执行异步任务操作，我们先建立一个项目，结构如下：</p>

<p><img class="center" src="http://img.my.csdn.net/uploads/201106/14/0_1308048004A27R.gif"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">结构相对简单一些，让我们先看看</span><span class="n">MainActivity</span><span class="o">.</span><span class="na">java</span><span class="err">的代码：</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">java</span><span class="o">]</span> <span class="n">view</span> <span class="n">plain</span>
</span><span class='line'><span class="n">copy</span>
</span><span class='line'>
</span><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">scott</span><span class="o">.</span><span class="na">async</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.ByteArrayOutputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.InputStream</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.http.HttpEntity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.http.HttpResponse</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.http.HttpStatus</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.http.client.HttpClient</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.http.client.methods.HttpGet</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.http.impl.client.DefaultHttpClient</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.app.Activity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.AsyncTask</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Bundle</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.util.Log</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.View</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.Button</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.ProgressBar</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.TextView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TAG</span> <span class="o">=</span> <span class="s">&quot;ASYNC_TASK&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Button</span> <span class="n">execute</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Button</span> <span class="n">cancel</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ProgressBar</span> <span class="n">progressBar</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">TextView</span> <span class="n">textView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">MyTask</span> <span class="n">mTask</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">main</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">execute</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">execute</span><span class="o">);</span>
</span><span class='line'>        <span class="n">execute</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">View</span><span class="o">.</span><span class="na">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">//注意每次需new一个实例,新建的任务只能执行一次,否则会出现异常  </span>
</span><span class='line'>                <span class="n">mTask</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyTask</span><span class="o">();</span>
</span><span class='line'>                <span class="n">mTask</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="s">&quot;http://www.baidu.com&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">execute</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>                <span class="n">cancel</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>        <span class="n">cancel</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">cancel</span><span class="o">);</span>
</span><span class='line'>        <span class="n">cancel</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">View</span><span class="o">.</span><span class="na">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">//取消一个正在执行的任务,onCancelled方法将会被调用  </span>
</span><span class='line'>                <span class="n">mTask</span><span class="o">.</span><span class="na">cancel</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>        <span class="n">progressBar</span> <span class="o">=</span> <span class="o">(</span><span class="n">ProgressBar</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">progress_bar</span><span class="o">);</span>
</span><span class='line'>        <span class="n">textView</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">text_view</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">MyTask</span> <span class="kd">extends</span> <span class="n">AsyncTask</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//onPreExecute方法用于在执行后台任务前做一些UI操作  </span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPreExecute</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;onPreExecute() called&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">textView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;loading...&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//doInBackground方法内部执行后台任务,不可在此方法内修改UI  </span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">protected</span> <span class="n">String</span> <span class="nf">doInBackground</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;doInBackground(Params... params) called&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">HttpClient</span> <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultHttpClient</span><span class="o">();</span>
</span><span class='line'>                <span class="n">HttpGet</span> <span class="n">get</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpGet</span><span class="o">(</span><span class="n">params</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>                <span class="n">HttpResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">get</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">getStatusLine</span><span class="o">().</span><span class="na">getStatusCode</span><span class="o">()</span> <span class="o">==</span> <span class="n">HttpStatus</span><span class="o">.</span><span class="na">SC_OK</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">HttpEntity</span> <span class="n">entity</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getEntity</span><span class="o">();</span>
</span><span class='line'>                    <span class="n">InputStream</span> <span class="n">is</span> <span class="o">=</span> <span class="n">entity</span><span class="o">.</span><span class="na">getContent</span><span class="o">();</span>
</span><span class='line'>                    <span class="kt">long</span> <span class="n">total</span> <span class="o">=</span> <span class="n">entity</span><span class="o">.</span><span class="na">getContentLength</span><span class="o">();</span>
</span><span class='line'>                    <span class="n">ByteArrayOutputStream</span> <span class="n">baos</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">();</span>
</span><span class='line'>                    <span class="kt">byte</span><span class="o">[]</span> <span class="n">buf</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">1024</span><span class="o">];</span>
</span><span class='line'>                    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>                    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>                    <span class="k">while</span> <span class="o">((</span><span class="n">length</span> <span class="o">=</span> <span class="n">is</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buf</span><span class="o">))</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">baos</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">buf</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">length</span><span class="o">);</span>
</span><span class='line'>                        <span class="n">count</span> <span class="o">+=</span> <span class="n">length</span><span class="o">;</span>
</span><span class='line'>                        <span class="c1">//调用publishProgress公布进度,最后onProgressUpdate方法将被执行  </span>
</span><span class='line'>                        <span class="n">publishProgress</span><span class="o">((</span><span class="kt">int</span><span class="o">)</span> <span class="o">((</span><span class="n">count</span> <span class="o">/</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="n">total</span><span class="o">)</span> <span class="o">*</span> <span class="mi">100</span><span class="o">));</span>
</span><span class='line'>                        <span class="c1">//为了演示进度,休眠500毫秒  </span>
</span><span class='line'>                        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">500</span><span class="o">);</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                    <span class="k">return</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="n">baos</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">(),</span> <span class="s">&quot;utf-8&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//onProgressUpdate方法用于更新进度信息  </span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onProgressUpdate</span><span class="o">(</span><span class="n">Integer</span><span class="o">...</span> <span class="n">progresses</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;onProgressUpdate(Progress... progresses) called&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">progressBar</span><span class="o">.</span><span class="na">setProgress</span><span class="o">(</span><span class="n">progresses</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>            <span class="n">textView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;loading...&quot;</span> <span class="o">+</span> <span class="n">progresses</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="s">&quot;%&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//onPostExecute方法用于在执行完后台任务后更新UI,显示结果  </span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPostExecute</span><span class="o">(</span><span class="n">String</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;onPostExecute(Result result) called&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">textView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">execute</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>            <span class="n">cancel</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//onCancelled方法用于在取消执行中的任务时更改UI  </span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCancelled</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;onCancelled() called&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">textView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;cancelled&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">progressBar</span><span class="o">.</span><span class="na">setProgress</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">execute</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>            <span class="n">cancel</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>布局文件main.xml代码如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;LinearLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">android:orientation=</span><span class="s">&quot;vertical&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;fill_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;fill_parent&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Button</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/execute&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;fill_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;execute&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Button</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/cancel&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;fill_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:enabled=</span><span class="s">&quot;false&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;cancel&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ProgressBar</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/progress_bar&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;fill_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:progress=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>        <span class="na">android:max=</span><span class="s">&quot;100&quot;</span>
</span><span class='line'>        <span class="na">style=</span><span class="s">&quot;?android:attr/progressBarStyleHorizontal&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ScrollView</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;fill_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;TextView</span>
</span><span class='line'>            <span class="na">android:id=</span><span class="s">&quot;@+id/text_view&quot;</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;fill_parent&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/ScrollView&gt;</span>
</span><span class='line'><span class="nt">&lt;/LinearLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为需要访问网络，所以我们还需要在AndroidManifest.xml中加入访问网络的权限：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.INTERNET&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们来看一下运行时的界面：</p>

<p><img class="center" src="http://img.my.csdn.net/uploads/201106/14/0_13080489541W1Z.gif"></p>

<p><img class="center" src="http://img.my.csdn.net/uploads/201106/14/0_13080489733363.gif"></p>

<p><img class="center" src="http://img.my.csdn.net/uploads/201106/14/0_1308048991Z5Tt.gif"></p>

<p><img class="center" src="http://img.my.csdn.net/uploads/201106/14/0_1308049389SZzs.gif"></p>

<p>以上几个截图分别是初始界面、执行异步任务时界面、执行成功后界面、取消任务后界面。执行成功后，整个过程日志打印如下：</p>

<p><img class="center" src="http://img.my.csdn.net/uploads/201106/14/0_1308049139BtIC.gif"></p>

<p>如果我们在执行任务时按下了“cancel”按钮，日志打印如下：</p>

<p><img class="center" src="http://img.my.csdn.net/uploads/201106/14/0_1308049210lt0u.gif"></p>

<p>可以看到onCancelled()方法将会被调用，onPostExecute(Result result)方法将不再被调用。</p>

<p>上面介绍了AsyncTask的基本应用，有些朋友也许会有疑惑，AsyncTask内部是怎么执行的呢，它执行的过程跟我们使用Handler又有什么区别呢？答案是：AsyncTask是对Thread+Handler良好的封装，在android.os.AsyncTask代码里仍然可以看到Thread和Handler的踪迹。下面就向大家详细介绍一下AsyncTask的执行原理。</p>

<p>我们先看一下AsyncTask的大纲视图：</p>

<p><img class="center" src="http://img.my.csdn.net/uploads/201106/13/0_13079649384Zjf.gif"></p>

<p>我们可以看到关键几个步骤的方法都在其中，doInBackground(Params&#8230; params)是一个抽象方法，我们继承AsyncTask时必须覆写此方法；onPreExecute()、onProgressUpdate(Progress&#8230; values)、onPostExecute(Result result)、onCancelled()这几个方法体都是空的，我们需要的时候可以选择性的覆写它们；publishProgress(Progress&#8230; values)是final修饰的，不能覆写，只能去调用，我们一般会在doInBackground(Params&#8230; params)中调用此方法；另外，我们可以看到有一个Status的枚举类和getStatus()方法，Status枚举类代码段如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="c1">//初始状态</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">volatile</span> <span class="n">Status</span> <span class="n">mStatus</span> <span class="o">=</span> <span class="n">Status</span><span class="o">.</span><span class="na">PENDING</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">enum</span> <span class="n">Status</span> <span class="o">{</span>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Indicates that the task has not been executed yet.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="n">PENDING</span><span class="o">,</span>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Indicates that the task is running.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="n">RUNNING</span><span class="o">,</span>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Indicates that {@link AsyncTask#onPostExecute} has finished.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="n">FINISHED</span><span class="o">,</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Returns the current status of this task.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @return The current status.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="n">Status</span> <span class="nf">getStatus</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mStatus</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，AsyncTask的初始状态为PENDING，代表待定状态，RUNNING代表执行状态，FINISHED代表结束状态，这几种状态在AsyncTask一次生命周期内的很多地方被使用，非常重要。</p>

<p>介绍完大纲视图相关内容之后，接下来，我们会从execute(Params&#8230; params)作为入口，重点分析一下AsyncTask的执行流程，我们来看一下execute(Params&#8230; params)方法的代码段：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="n">AsyncTask</span><span class="o">&lt;</span><span class="n">Params</span><span class="o">,</span> <span class="n">Progress</span><span class="o">,</span> <span class="n">Result</span><span class="o">&gt;</span> <span class="n">execute</span><span class="o">(</span><span class="n">Params</span><span class="o">...</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mStatus</span> <span class="o">!=</span> <span class="n">Status</span><span class="o">.</span><span class="na">PENDING</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">switch</span> <span class="o">(</span><span class="n">mStatus</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">case</span> <span class="nl">RUNNING:</span>
</span><span class='line'>                  <span class="c1">//如果该任务正在被执行则抛出异常</span>
</span><span class='line'>                  <span class="c1">//值得一提的是,在调用cancel取消任务后,状态仍未RUNNING</span>
</span><span class='line'>                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">&quot;Cannot execute task:&quot;</span>
</span><span class='line'>                            <span class="o">+</span> <span class="s">&quot; the task is already running.&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">case</span> <span class="nl">FINISHED:</span>
</span><span class='line'>                  <span class="c1">//如果该任务已经执行完成则抛出异常</span>
</span><span class='line'>                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">&quot;Cannot execute task:&quot;</span>
</span><span class='line'>                            <span class="o">+</span> <span class="s">&quot; the task has already been executed &quot;</span>
</span><span class='line'>                            <span class="o">+</span> <span class="s">&quot;(a task can be executed only once)&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//改变状态为RUNNING</span>
</span><span class='line'>        <span class="n">mStatus</span> <span class="o">=</span> <span class="n">Status</span><span class="o">.</span><span class="na">RUNNING</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//调用onPreExecute方法</span>
</span><span class='line'>        <span class="n">onPreExecute</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">mWorker</span><span class="o">.</span><span class="na">mParams</span> <span class="o">=</span> <span class="n">params</span><span class="o">;</span>
</span><span class='line'>        <span class="n">sExecutor</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">mFuture</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码中涉及到三个陌生的变量：mWorker、sExecutor、mFuture，我们也会看一下他们的庐山真面目：</p>

<p>关于sExecutor，它是java.util.concurrent.ThreadPoolExecutor的实例，用于管理线程的执行。代码如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">CORE_POOL_SIZE</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">MAXIMUM_POOL_SIZE</span> <span class="o">=</span> <span class="mi">128</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">KEEP_ALIVE</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//新建一个队列用来存放线程</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">BlockingQueue</span><span class="o">&lt;</span><span class="n">Runnable</span><span class="o">&gt;</span> <span class="n">sWorkQueue</span> <span class="o">=</span>
</span><span class='line'>            <span class="k">new</span> <span class="n">LinkedBlockingQueue</span><span class="o">&lt;</span><span class="n">Runnable</span><span class="o">&gt;(</span><span class="mi">10</span><span class="o">);</span>
</span><span class='line'>  <span class="c1">//新建一个线程工厂</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">ThreadFactory</span> <span class="n">sThreadFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ThreadFactory</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">final</span> <span class="n">AtomicInteger</span> <span class="n">mCount</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AtomicInteger</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>      <span class="c1">//新建一个线程</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Thread</span> <span class="nf">newThread</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="n">r</span><span class="o">,</span> <span class="s">&quot;AsyncTask #&quot;</span> <span class="o">+</span> <span class="n">mCount</span><span class="o">.</span><span class="na">getAndIncrement</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>  <span class="c1">//新建一个线程池执行器,用于管理线程的执行</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">ThreadPoolExecutor</span> <span class="n">sExecutor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ThreadPoolExecutor</span><span class="o">(</span><span class="n">CORE_POOL_SIZE</span><span class="o">,</span>
</span><span class='line'>            <span class="n">MAXIMUM_POOL_SIZE</span><span class="o">,</span> <span class="n">KEEP_ALIVE</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">,</span> <span class="n">sWorkQueue</span><span class="o">,</span> <span class="n">sThreadFactory</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>mWorker实际上是AsyncTask的一个的抽象内部类的实现对象实例，它实现了Callable<Result>接口中的call()方法，代码如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">WorkerRunnable</span><span class="o">&lt;</span><span class="n">Params</span><span class="o">,</span> <span class="n">Result</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">Result</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Params</span><span class="o">[]</span> <span class="n">mParams</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而mFuture实际上是java.util.concurrent.FutureTask的实例，下面是它的FutureTask类的相关信息：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * A cancellable asynchronous computation.</span>
</span><span class='line'><span class="cm"> * ...</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FutureTask</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">RunnableFuture</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="o">{</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">RunnableFuture</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">Runnable</span><span class="o">,</span> <span class="n">Future</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Sets this Future to the result of its computation</span>
</span><span class='line'><span class="cm">     * unless it has been cancelled.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">run</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到FutureTask是一个可以中途取消的用于异步计算的类。</p>

<p>下面是mWorker和mFuture实例在AsyncTask中的体现：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">WorkerRunnable</span><span class="o">&lt;</span><span class="n">Params</span><span class="o">,</span> <span class="n">Result</span><span class="o">&gt;</span> <span class="n">mWorker</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">FutureTask</span><span class="o">&lt;</span><span class="n">Result</span><span class="o">&gt;</span> <span class="n">mFuture</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="nf">AsyncTask</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mWorker</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WorkerRunnable</span><span class="o">&lt;</span><span class="n">Params</span><span class="o">,</span> <span class="n">Result</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">//call方法被调用后,将设置优先级为后台级别,然后调用AsyncTask的doInBackground方法</span>
</span><span class='line'>          <span class="kd">public</span> <span class="n">Result</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Process</span><span class="o">.</span><span class="na">setThreadPriority</span><span class="o">(</span><span class="n">Process</span><span class="o">.</span><span class="na">THREAD_PRIORITY_BACKGROUND</span><span class="o">);</span>
</span><span class='line'>                <span class="k">return</span> <span class="nf">doInBackground</span><span class="o">(</span><span class="n">mParams</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//在mFuture实例中,将会调用mWorker做后台任务,完成后会调用done方法</span>
</span><span class='line'>        <span class="n">mFuture</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FutureTask</span><span class="o">&lt;</span><span class="n">Result</span><span class="o">&gt;(</span><span class="n">mWorker</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">done</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Message</span> <span class="n">message</span><span class="o">;</span>
</span><span class='line'>                <span class="n">Result</span> <span class="n">result</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">result</span> <span class="o">=</span> <span class="n">get</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">android</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Log</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ExecutionException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">&quot;An error occured while executing doInBackground()&quot;</span><span class="o">,</span>
</span><span class='line'>                            <span class="n">e</span><span class="o">.</span><span class="na">getCause</span><span class="o">());</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">CancellationException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="c1">//发送取消任务的消息</span>
</span><span class='line'>                    <span class="n">message</span> <span class="o">=</span> <span class="n">sHandler</span><span class="o">.</span><span class="na">obtainMessage</span><span class="o">(</span><span class="n">MESSAGE_POST_CANCEL</span><span class="o">,</span>
</span><span class='line'>                            <span class="k">new</span> <span class="n">AsyncTaskResult</span><span class="o">&lt;</span><span class="n">Result</span><span class="o">&gt;(</span><span class="n">AsyncTask</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="o">(</span><span class="n">Result</span><span class="o">[])</span> <span class="kc">null</span><span class="o">));</span>
</span><span class='line'>                    <span class="n">message</span><span class="o">.</span><span class="na">sendToTarget</span><span class="o">();</span>
</span><span class='line'>                    <span class="k">return</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">&quot;An error occured while executing &quot;</span>
</span><span class='line'>                            <span class="o">+</span> <span class="s">&quot;doInBackground()&quot;</span><span class="o">,</span> <span class="n">t</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>              <span class="c1">//发送显示结果的消息</span>
</span><span class='line'>                <span class="n">message</span> <span class="o">=</span> <span class="n">sHandler</span><span class="o">.</span><span class="na">obtainMessage</span><span class="o">(</span><span class="n">MESSAGE_POST_RESULT</span><span class="o">,</span>
</span><span class='line'>                        <span class="k">new</span> <span class="n">AsyncTaskResult</span><span class="o">&lt;</span><span class="n">Result</span><span class="o">&gt;(</span><span class="n">AsyncTask</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="n">result</span><span class="o">));</span>
</span><span class='line'>                <span class="n">message</span><span class="o">.</span><span class="na">sendToTarget</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们看到上面的代码中，mFuture实例对象的done()方法中，如果捕捉到了CancellationException类型的异常，则发送一条“MESSAGE_POST_CANCEL”的消息；如果顺利执行，则发送一条“MESSAGE_POST_RESULT”的消息，而消息都与一个sHandler对象关联。这个sHandler实例实际上是AsyncTask内部类InternalHandler的实例，而InternalHandler正是继承了Handler，下面我们来分析一下它的代码：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">MESSAGE_POST_RESULT</span> <span class="o">=</span> <span class="mh">0x1</span><span class="o">;</span>    <span class="c1">//显示结果</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">MESSAGE_POST_PROGRESS</span> <span class="o">=</span> <span class="mh">0x2</span><span class="o">;</span>    <span class="c1">//更新进度</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">MESSAGE_POST_CANCEL</span> <span class="o">=</span> <span class="mh">0x3</span><span class="o">;</span>  <span class="c1">//取消任务</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">InternalHandler</span> <span class="n">sHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InternalHandler</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">InternalHandler</span> <span class="kd">extends</span> <span class="n">Handler</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@SuppressWarnings</span><span class="o">({</span><span class="s">&quot;unchecked&quot;</span><span class="o">,</span> <span class="s">&quot;RawUseOfParameterizedType&quot;</span><span class="o">})</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleMessage</span><span class="o">(</span><span class="n">Message</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">AsyncTaskResult</span> <span class="n">result</span> <span class="o">=</span> <span class="o">(</span><span class="n">AsyncTaskResult</span><span class="o">)</span> <span class="n">msg</span><span class="o">.</span><span class="na">obj</span><span class="o">;</span>
</span><span class='line'>            <span class="k">switch</span> <span class="o">(</span><span class="n">msg</span><span class="o">.</span><span class="na">what</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">case</span> <span class="nl">MESSAGE_POST_RESULT:</span>
</span><span class='line'>                    <span class="c1">// There is only one result</span>
</span><span class='line'>                  <span class="c1">//调用AsyncTask.finish方法</span>
</span><span class='line'>                    <span class="n">result</span><span class="o">.</span><span class="na">mTask</span><span class="o">.</span><span class="na">finish</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">mData</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>                    <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="nl">MESSAGE_POST_PROGRESS:</span>
</span><span class='line'>                    <span class="c1">//调用AsyncTask.onProgressUpdate方法</span>
</span><span class='line'>                  <span class="n">result</span><span class="o">.</span><span class="na">mTask</span><span class="o">.</span><span class="na">onProgressUpdate</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">mData</span><span class="o">);</span>
</span><span class='line'>                    <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="nl">MESSAGE_POST_CANCEL:</span>
</span><span class='line'>                  <span class="c1">//调用AsyncTask.onCancelled方法</span>
</span><span class='line'>                    <span class="n">result</span><span class="o">.</span><span class="na">mTask</span><span class="o">.</span><span class="na">onCancelled</span><span class="o">();</span>
</span><span class='line'>                    <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们看到，在处理消息时，遇到“MESSAGE_POST_RESULT”时，它会调用AsyncTask中的finish()方法，我们来看一下finish()方法的定义：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">finish</span><span class="o">(</span><span class="n">Result</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">isCancelled</span><span class="o">())</span> <span class="n">result</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">onPostExecute</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>    <span class="c1">//调用onPostExecute显示结果</span>
</span><span class='line'>        <span class="n">mStatus</span> <span class="o">=</span> <span class="n">Status</span><span class="o">.</span><span class="na">FINISHED</span><span class="o">;</span> <span class="c1">//改变状态为FINISHED</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>原来finish()方法是负责调用onPostExecute(Result result)方法显示结果并改变任务状态的啊。</p>

<p>另外，在mFuture对象的done()方法里，构建一个消息时，这个消息包含了一个AsyncTaskResult类型的对象，然后在sHandler实例对象的handleMessage(Message msg)方法里，使用下面这种方式取得消息中附带的对象：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">AsyncTaskResult</span> <span class="n">result</span> <span class="o">=</span> <span class="o">(</span><span class="n">AsyncTaskResult</span><span class="o">)</span> <span class="n">msg</span><span class="o">.</span><span class="na">obj</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个AsyncTaskResult究竟是什么呢，它又包含什么内容呢？其实它也是AsyncTask的一个内部类，是用来包装执行结果的一个类，让我们来看一下它的代码结构：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="nd">@SuppressWarnings</span><span class="o">({</span><span class="s">&quot;RawUseOfParameterizedType&quot;</span><span class="o">})</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">AsyncTaskResult</span><span class="o">&lt;</span><span class="n">Data</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">AsyncTask</span> <span class="n">mTask</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Data</span><span class="o">[]</span> <span class="n">mData</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">AsyncTaskResult</span><span class="o">(</span><span class="n">AsyncTask</span> <span class="n">task</span><span class="o">,</span> <span class="n">Data</span><span class="o">...</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mTask</span> <span class="o">=</span> <span class="n">task</span><span class="o">;</span>
</span><span class='line'>            <span class="n">mData</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>看以看到这个AsyncTaskResult封装了一个AsyncTask的实例和某种类型的数据集，我们再来看一下构建消息时的代码：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//发送取消任务的消息</span>
</span><span class='line'><span class="n">message</span> <span class="o">=</span> <span class="n">sHandler</span><span class="o">.</span><span class="na">obtainMessage</span><span class="o">(</span><span class="n">MESSAGE_POST_CANCEL</span><span class="o">,</span>
</span><span class='line'>        <span class="k">new</span> <span class="n">AsyncTaskResult</span><span class="o">&lt;</span><span class="n">Result</span><span class="o">&gt;(</span><span class="n">AsyncTask</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="o">(</span><span class="n">Result</span><span class="o">[])</span> <span class="kc">null</span><span class="o">));</span>
</span><span class='line'><span class="n">message</span><span class="o">.</span><span class="na">sendToTarget</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//发送显示结果的消息</span>
</span><span class='line'><span class="n">message</span> <span class="o">=</span> <span class="n">sHandler</span><span class="o">.</span><span class="na">obtainMessage</span><span class="o">(</span><span class="n">MESSAGE_POST_RESULT</span><span class="o">,</span>
</span><span class='line'>         <span class="k">new</span> <span class="n">AsyncTaskResult</span><span class="o">&lt;</span><span class="n">Result</span><span class="o">&gt;(</span><span class="n">AsyncTask</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="n">result</span><span class="o">));</span>
</span><span class='line'><span class="n">message</span><span class="o">.</span><span class="na">sendToTarget</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>在处理消息时是如何使用这个对象呢，我们再来看一下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">result</span><span class="o">.</span><span class="na">mTask</span><span class="o">.</span><span class="na">finish</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">mData</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">result</span><span class="o">.</span><span class="na">mTask</span><span class="o">.</span><span class="na">onProgressUpdate</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">mData</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>概括来说，当我们调用execute(Params&#8230; params)方法后，execute方法会调用onPreExecute()方法，然后由ThreadPoolExecutor实例sExecutor执行一个FutureTask任务，这个过程中doInBackground(Params&#8230; params)将被调用，如果被开发者覆写的doInBackground(Params&#8230; params)方法中调用了publishProgress(Progress&#8230; values)方法，则通过InternalHandler实例sHandler发送一条MESSAGE_POST_PROGRESS消息，更新进度，sHandler处理消息时onProgressUpdate(Progress&#8230; values)方法将被调用；如果遇到异常，则发送一条MESSAGE_POST_CANCEL的消息，取消任务，sHandler处理消息时onCancelled()方法将被调用；如果执行成功，则发送一条MESSAGE_POST_RESULT的消息，显示结果，sHandler处理消息时onPostExecute(Result result)方法被调用。</p>

<p>经过上面的介绍，相信朋友们都已经认识到AsyncTask的本质了，它对Thread+Handler的良好封装，减少了开发者处理问题的复杂度，提高了开发效率，希望朋友们能多多体会一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NotificationManager和Notification的使用总结]]></title>
    <link href="http://dande618.github.com/blog/2013/06/16/notification/"/>
    <updated>2013-06-16T16:03:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/06/16/notification</id>
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/jerrychoi/archive/2010/05/28/1746221.html">http://www.cnblogs.com/jerrychoi/archive/2010/05/28/1746221.html</a></p>

<h2>(1)、使用系统定义的Notification</h2>

<p>以下是使用示例代码：</p>

<!-- more -->




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//创建一个NotificationManager的引用 </span>
</span><span class='line'>
</span><span class='line'><span class="n">String</span> <span class="n">ns</span> <span class="o">=</span> <span class="n">Context</span><span class="o">.</span><span class="na">NOTIFICATION_SERVICE</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">NotificationManager</span> <span class="n">mNotificationManager</span> <span class="o">=</span> <span class="o">(</span><span class="n">NotificationManager</span><span class="o">)</span><span class="n">getSystemService</span><span class="o">(</span><span class="n">ns</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//定义Notification的各种属性 </span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">icon</span> <span class="o">=</span> <span class="n">R</span><span class="o">.</span><span class="na">drawable</span><span class="o">.</span><span class="na">icon</span><span class="o">;</span> <span class="c1">//通知图标 </span>
</span><span class='line'>
</span><span class='line'><span class="n">CharSequence</span> <span class="n">tickerText</span> <span class="o">=</span> <span class="s">&quot;Hello&quot;</span><span class="o">;</span> <span class="c1">//状态栏显示的通知文本提示 </span>
</span><span class='line'>
</span><span class='line'><span class="kt">long</span> <span class="n">when</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span> <span class="c1">//通知产生的时间，会在通知信息里显示 </span>
</span><span class='line'>
</span><span class='line'><span class="c1">//用上面的属性初始化Nofification </span>
</span><span class='line'>
</span><span class='line'><span class="n">Notification</span> <span class="n">notification</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Notification</span><span class="o">(</span><span class="n">icon</span><span class="o">,</span><span class="n">tickerText</span><span class="o">,</span><span class="n">when</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'>
</span><span class='line'><span class="cm">* 添加声音 </span>
</span><span class='line'>
</span><span class='line'><span class="cm">* notification.defaults |=Notification.DEFAULT_SOUND; </span>
</span><span class='line'>
</span><span class='line'><span class="cm">* 或者使用以下几种方式 </span>
</span><span class='line'>
</span><span class='line'><span class="cm">* notification.sound = Uri.parse(&quot;file:///sdcard/notification/ringer.mp3&quot;); </span>
</span><span class='line'>
</span><span class='line'><span class="cm">* notification.sound = Uri.withAppendedPath(Audio.Media.INTERNAL_CONTENT_URI, &quot;6&quot;); </span>
</span><span class='line'>
</span><span class='line'><span class="cm">* 如果想要让声音持续重复直到用户对通知做出反应，则可以在notification的flags字段增加&quot;FLAG_INSISTENT&quot; </span>
</span><span class='line'>
</span><span class='line'><span class="cm">* 如果notification的defaults字段包括了&quot;DEFAULT_SOUND&quot;属性，则这个属性将覆盖sound字段中定义的声音 </span>
</span><span class='line'>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'>
</span><span class='line'><span class="cm">* 添加振动 </span>
</span><span class='line'>
</span><span class='line'><span class="cm">* notification.defaults |= Notification.DEFAULT_VIBRATE; </span>
</span><span class='line'>
</span><span class='line'><span class="cm">* 或者可以定义自己的振动模式： </span>
</span><span class='line'>
</span><span class='line'><span class="cm">* long[] vibrate = {0,100,200,300}; //0毫秒后开始振动，振动100毫秒后停止，再过200毫秒后再次振动300毫秒 </span>
</span><span class='line'>
</span><span class='line'><span class="cm">* notification.vibrate = vibrate; </span>
</span><span class='line'>
</span><span class='line'><span class="cm">* long数组可以定义成想要的任何长度 </span>
</span><span class='line'>
</span><span class='line'><span class="cm">* 如果notification的defaults字段包括了&quot;DEFAULT_VIBRATE&quot;,则这个属性将覆盖vibrate字段中定义的振动 </span>
</span><span class='line'>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'>
</span><span class='line'><span class="cm">* 添加LED灯提醒 </span>
</span><span class='line'>
</span><span class='line'><span class="cm">* notification.defaults |= Notification.DEFAULT_LIGHTS; </span>
</span><span class='line'>
</span><span class='line'><span class="cm">* 或者可以自己的LED提醒模式: </span>
</span><span class='line'>
</span><span class='line'><span class="cm">* notification.ledARGB = 0xff00ff00; </span>
</span><span class='line'>
</span><span class='line'><span class="cm">* notification.ledOnMS = 300; //亮的时间 </span>
</span><span class='line'>
</span><span class='line'><span class="cm">* notification.ledOffMS = 1000; //灭的时间 </span>
</span><span class='line'>
</span><span class='line'><span class="cm">* notification.flags |= Notification.FLAG_SHOW_LIGHTS; </span>
</span><span class='line'>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* </span>
</span><span class='line'>
</span><span class='line'><span class="cm">* 更多的特征属性 </span>
</span><span class='line'>
</span><span class='line'><span class="cm">* notification.flags |= FLAG_AUTO_CANCEL; //在通知栏上点击此通知后自动清除此通知 </span>
</span><span class='line'>
</span><span class='line'><span class="cm">* notification.flags |= FLAG_INSISTENT; //重复发出声音，直到用户响应此通知 </span>
</span><span class='line'>
</span><span class='line'><span class="cm">* notification.flags |= FLAG_ONGOING_EVENT; //将此通知放到通知栏的&quot;Ongoing&quot;即&quot;正在运行&quot;组中 </span>
</span><span class='line'>
</span><span class='line'><span class="cm">* notification.flags |= FLAG_NO_CLEAR; //表明在点击了通知栏中的&quot;清除通知&quot;后，此通知不清除， </span>
</span><span class='line'>
</span><span class='line'><span class="cm">* //经常与FLAG_ONGOING_EVENT一起使用 </span>
</span><span class='line'>
</span><span class='line'><span class="cm">* notification.number = 1; //number字段表示此通知代表的当前事件数量，它将覆盖在状态栏图标的顶部 </span>
</span><span class='line'>
</span><span class='line'><span class="cm">* //如果要使用此字段，必须从1开始 </span>
</span><span class='line'>
</span><span class='line'><span class="cm">* notification.iconLevel = ; // </span>
</span><span class='line'>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//设置通知的事件消息 </span>
</span><span class='line'>
</span><span class='line'><span class="n">Context</span> <span class="n">context</span> <span class="o">=</span> <span class="n">getApplicationContext</span><span class="o">();</span> <span class="c1">//上下文 </span>
</span><span class='line'>
</span><span class='line'><span class="n">CharSequence</span> <span class="n">contentTitle</span> <span class="o">=</span> <span class="s">&quot;My Notification&quot;</span><span class="o">;</span> <span class="c1">//通知栏标题 </span>
</span><span class='line'>
</span><span class='line'><span class="n">CharSequence</span> <span class="n">contentText</span> <span class="o">=</span> <span class="s">&quot;Hello World!&quot;</span><span class="o">;</span> <span class="c1">//通知栏内容 </span>
</span><span class='line'>
</span><span class='line'><span class="n">Intent</span> <span class="n">notificationIntent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="k">this</span><span class="o">,</span><span class="n">Main</span><span class="o">.</span><span class="na">class</span><span class="o">);</span> <span class="c1">//点击该通知后要跳转的Activity </span>
</span><span class='line'>
</span><span class='line'><span class="n">PendingIntent</span> <span class="n">contentIntent</span> <span class="o">=</span> <span class="n">PendingIntent</span><span class="o">.</span><span class="na">getActivity</span><span class="o">(</span><span class="k">this</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">notificationIntent</span><span class="o">,</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">notification</span><span class="o">.</span><span class="na">setLatestEventInfo</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">contentTitle</span><span class="o">,</span> <span class="n">contentText</span><span class="o">,</span> <span class="n">contentIntent</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//把Notification传递给NotificationManager </span>
</span><span class='line'>
</span><span class='line'><span class="n">mNotificationManager</span><span class="o">.</span><span class="na">notify</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="n">notification</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果想要更新一个通知，只需要在设置好notification之后，再次调用 setLatestEventInfo(),然后重新发送一次通知即可，即再次调用notify()。</p>

<h2>(2)、使用自定义的Notification</h2>

<p>要创建一个自定义的Notification，可以使用RemoteViews。要定义自己的扩展消息，首先要初始化一个RemoteViews对象，然后将它传递给Notification的contentView字段，再把PendingIntent传递给contentIntent字段。以下示例代码是完整步骤：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//1、创建一个自定义的消息布局 view.xml </span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;?</span><span class="n">xml</span> <span class="n">version</span><span class="o">=</span><span class="s">&quot;1.0&quot;</span> <span class="n">encoding</span><span class="o">=</span><span class="s">&quot;utf-8&quot;</span><span class="o">?&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">LinearLayout</span> <span class="nl">xmlns:</span><span class="n">android</span><span class="o">=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nl">android:</span><span class="n">layout_width</span><span class="o">=</span><span class="s">&quot;fill_parent&quot;</span> <span class="nl">android:</span><span class="n">layout_height</span><span class="o">=</span><span class="s">&quot;fill_parent&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ImageView</span> <span class="nl">android:</span><span class="n">id</span><span class="o">=</span><span class="s">&quot;@+id/image&quot;</span> <span class="nl">android:</span><span class="n">layout_width</span><span class="o">=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nl">android:</span><span class="n">layout_height</span><span class="o">=</span><span class="s">&quot;fill_parent&quot;</span> <span class="nl">android:</span><span class="n">layout_marginRight</span><span class="o">=</span><span class="s">&quot;10dp&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">TextView</span> <span class="nl">android:</span><span class="n">id</span><span class="o">=</span><span class="s">&quot;@+id/text&quot;</span> <span class="nl">android:</span><span class="n">layout_width</span><span class="o">=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nl">android:</span><span class="n">layout_height</span><span class="o">=</span><span class="s">&quot;fill_parent&quot;</span> <span class="nl">android:</span><span class="n">textColor</span><span class="o">=</span><span class="s">&quot;#000&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;/</span><span class="n">LinearLayout</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//2、在程序代码中使用RemoteViews的方法来定义image和text。然后把RemoteViews对象传到contentView字段 </span>
</span><span class='line'>
</span><span class='line'><span class="n">RemoteViews</span> <span class="n">contentView</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RemoteViews</span><span class="o">(</span><span class="n">getPackageName</span><span class="o">(),</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">view</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">contentView</span><span class="o">.</span><span class="na">setImageViewResource</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">image</span><span class="o">,</span><span class="n">R</span><span class="o">.</span><span class="na">drawable</span><span class="o">.</span><span class="na">icon</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">contentView</span><span class="o">.</span><span class="na">setTextViewText</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">text</span><span class="o">,</span><span class="err">”</span><span class="n">Hello</span><span class="o">,</span><span class="k">this</span> <span class="n">message</span> <span class="n">is</span> <span class="n">in</span> <span class="n">a</span> <span class="n">custom</span> <span class="n">expanded</span> <span class="n">view</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">notification</span><span class="o">.</span><span class="na">contentView</span> <span class="o">=</span> <span class="n">contentView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//3、为Notification的contentIntent字段定义一个Intent(注意，使用自定义View不需要setLatestEventInfo()方法) </span>
</span><span class='line'>
</span><span class='line'><span class="n">Intent</span> <span class="n">notificationIntent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="k">this</span><span class="o">,</span><span class="n">Main</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">PendingIntent</span> <span class="n">contentIntent</span> <span class="o">=</span> <span class="n">PendingIntent</span><span class="o">.</span><span class="na">getActivity</span><span class="o">(</span><span class="k">this</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">notificationIntent</span><span class="o">,</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">notification</span><span class="o">.</span><span class="na">contentIntent</span> <span class="o">=</span> <span class="n">contentIntent</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//4、发送通知 </span>
</span><span class='line'>
</span><span class='line'><span class="n">mNotificationManager</span><span class="o">.</span><span class="na">notify</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="n">notification</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//以下是全部示例代码 </span>
</span><span class='line'>
</span><span class='line'><span class="c1">//创建一个NotificationManager的引用 </span>
</span><span class='line'>
</span><span class='line'><span class="n">String</span> <span class="n">ns</span> <span class="o">=</span> <span class="n">Context</span><span class="o">.</span><span class="na">NOTIFICATION_SERVICE</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">NotificationManager</span> <span class="n">mNotificationManager</span> <span class="o">=</span> <span class="o">(</span><span class="n">NotificationManager</span><span class="o">)</span><span class="n">getSystemService</span><span class="o">(</span><span class="n">ns</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//定义Notification的各种属性 </span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">icon</span> <span class="o">=</span> <span class="n">R</span><span class="o">.</span><span class="na">drawable</span><span class="o">.</span><span class="na">icon</span><span class="o">;</span> <span class="c1">//通知图标 </span>
</span><span class='line'>
</span><span class='line'><span class="n">CharSequence</span> <span class="n">tickerText</span> <span class="o">=</span> <span class="s">&quot;Hello&quot;</span><span class="o">;</span> <span class="c1">//状态栏显示的通知文本提示 </span>
</span><span class='line'>
</span><span class='line'><span class="kt">long</span> <span class="n">when</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span> <span class="c1">//通知产生的时间，会在通知信息里显示 </span>
</span><span class='line'>
</span><span class='line'><span class="c1">//用上面的属性初始化Nofification </span>
</span><span class='line'>
</span><span class='line'><span class="n">Notification</span> <span class="n">notification</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Notification</span><span class="o">(</span><span class="n">icon</span><span class="o">,</span><span class="n">tickerText</span><span class="o">,</span><span class="n">when</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">RemoteViews</span> <span class="n">contentView</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RemoteViews</span><span class="o">(</span><span class="n">getPackageName</span><span class="o">(),</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">view</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">contentView</span><span class="o">.</span><span class="na">setImageViewResource</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">image</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">drawable</span><span class="o">.</span><span class="na">iconempty</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">contentView</span><span class="o">.</span><span class="na">setTextViewText</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">text</span><span class="o">,</span> <span class="s">&quot;Hello,this is JC&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">notification</span><span class="o">.</span><span class="na">contentView</span> <span class="o">=</span> <span class="n">contentView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Intent</span> <span class="n">notificationIntent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="k">this</span><span class="o">,</span><span class="n">Main</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">PendingIntent</span> <span class="n">contentIntent</span> <span class="o">=</span> <span class="n">PendingIntent</span><span class="o">.</span><span class="na">getActivity</span><span class="o">(</span><span class="k">this</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">notificationIntent</span><span class="o">,</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">notification</span><span class="o">.</span><span class="na">contentIntent</span> <span class="o">=</span> <span class="n">contentIntent</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//把Notification传递给NotificationManager </span>
</span><span class='line'>
</span><span class='line'><span class="n">mNotificationManager</span><span class="o">.</span><span class="na">notify</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="n">notification</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java UML类图]]></title>
    <link href="http://dande618.github.com/blog/2013/06/15/UML/"/>
    <updated>2013-06-15T12:28:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/06/15/UML</id>
    <content type="html"><![CDATA[<p><a href="http://blog.sina.com.cn/s/blog_71460d95010111dc.html">http://blog.sina.com.cn/s/blog_71460d95010111dc.html</a></p>

<p>类图是最常用的UML图，它用于描述系统的结构化设计。其中包括类关系以及与每个类关联的属性及行为。类图能出色地表示继承与合成关系。为了将类图作为一种高效的沟通工具使用，开发者必须理解如何将类图上出现的元素转换到Java中。下面来进一步探索这一转换过程。</p>

<h2>元素</h2>

<p>在后面的小节中，分别讲解了类图的各个元素及其在Java中相应的表示。我会列出元素名，后续简短的代码片断和一幅图来表示元素在类图上的样子。每一节的最后简要总结了该元素。</p>

<!-- more -->


<h3>类（Class）</h3>

<p>类（图A）是对象的蓝图，其中包含3个组成部分。第一个是Java中定义的类名。第二个是属性（attributes）。第三个是该类提供的方法。
属性和操作之前可附加一个可见性修饰符。加号（+）表示具有公共可见性。减号（-）表示私有可见性。#号表示受保护的可见性。省略这些修饰符表示具有package（包）级别的可见性。如果属性或操作具有下划线，表明它是静态的。在操作中，可同时列出它接受的参数，以及返回类型，如图A的“Java”区域所示。</p>

<p>图A</p>

<p><img class="center" src="http://www.uml.org.cn/oobject/images/image001.gif"></p>

<h3>包（Package）</h3>

<p>包（图B）是一种常规用途的组合机制。UML中的一个包直接对应于Java中的一个包。在Java中，一个包可能含有其他包、类或者同时含有这两者。进行建模时，你通常拥有逻辑性的包，它主要用于对你的模型进行组织。你还会拥有物理性的包，它直接转换成系统中的Java包。每个包的名称对这个包进行了惟一性的标识。</p>

<p>图B</p>

<p><img class="center" src="http://www.uml.org.cn/oobject/images/image002.gif"></p>

<h3>接口（Interface）</h3>

<p>接口（图C）是一系列操作的集合，它指定了一个类所提供的服务。它直接对应于Java中的一个接口类型。接口既可用图C的那个图标来表示，也可由附加了&lt;<interface>>的一个标准类来表示。通常，根据接口在类图上的样子，就能知道与其他类的关系。</p>

<p>图C</p>

<p><img class="center" src="http://www.uml.org.cn/oobject/images/image003.gif"></p>

<h2>关系</h2>

<p>后面的例子将针对某个具体目的来独立地展示各种关系。虽然语法无误，但这些例子可进一步精炼，在它们的有效范围内包括更多的语义。</p>

<h3>依赖（Dependency）</h3>

<p>实体之间一个“使用”关系暗示一个实体的规范发生变化后，可能影响依赖于它的其他实例（图D）。更具体地说，它可转换为对不在实例作用域内的一个类或对象的任何类型的引用。其中包括一个局部变量，对通过方法调用而获得的一个对象的引用（如下例所示），或者对一个类的静态方法的引用（同时不存在那个类的一个实例）。也可利用“依赖”来表示包和包之间的关系。由于包中含有类，所以你可根据那些包中的各个类之间的关系，表示出包和包的关系。</p>

<p>图D</p>

<p><img class="center" src="http://www.uml.org.cn/oobject/images/image004.gif"></p>

<h3>关联（Association）</h3>

<p>实体之间的一个结构化关系表明对象是相互连接的。箭头是可选的，它用于指定导航能力。如果没有箭头，暗示是一种双向的导航能力。在Java中，关联（图E）转换为一个实例作用域的变量，就像图E的“Java”区域所展示的代码那样。可为一个关联附加其他修饰符。多重性（Multiplicity）修饰符暗示着实例之间的关系。在示范代码中，Employee可以有0个或更多的TimeCard对象。但是，每个TimeCard只从属于单独一个Employee。</p>

<p>图E</p>

<p><img class="center" src="http://www.uml.org.cn/oobject/images/image005.gif"></p>

<h3>聚合（Aggregation）</h3>

<p>聚合（图F）是关联的一种形式，代表两个类之间的整体/局部关系。聚合暗示着整体在概念上处于比局部更高的一个级别，而关联暗示两个类在概念上位于相同的级别。聚合也转换成Java中的一个实例作用域变量。</p>

<p>关联和聚合的区别纯粹是概念上的，而且严格反映在语义上。聚合还暗示着实例图中不存在回路。换言之，只能是一种单向关系。</p>

<p>图F</p>

<p><img class="center" src="http://www.uml.org.cn/oobject/images/image006.gif"></p>

<h3>合成（Composition）</h3>

<p>合成 （图G）是聚合的一种特殊形式，暗示“局部”在“整体”内部的生存期职责。合成也是非共享的。所以，虽然局部不一定要随整体的销毁而被销毁，但整体要么负责保持局部的存活状态，要么负责将其销毁。局部不可与其他整体共享。但是，整体可将所有权转交给另一个对象，后者随即将承担生存期职责。</p>

<p>Employee和TimeCard的关系或许更适合表示成“合成”，而不是表示成“关联”。</p>

<p>图G</p>

<p><img class="center" src="http://www.uml.org.cn/oobject/images/image007.gif"></p>

<h3>泛化（Generalization）</h3>

<p>泛化（图H）表示一个更泛化的元素和一个更具体的元素之间的关系。泛化是用于对继承进行建模的UML元素。在Java中，用extends关键字来直接表示这种关系。</p>

<p>图H</p>

<p><img class="center" src="http://www.uml.org.cn/oobject/images/image008.gif"></p>

<h3>实现（Realization）</h3>

<p>实例（图I）关系指定两个实体之间的一个合同。换言之，一个实体定义一个合同，而另一个实体保证履行该合同。对Java应用程序进行建模时，实现关系可直接用implements关键字来表示。</p>

<p>图I</p>

<p><img class="center" src="http://www.uml.org.cn/oobject/images/image009.gif"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JAVA中的JSON]]></title>
    <link href="http://dande618.github.com/blog/2013/06/13/JSON/"/>
    <updated>2013-06-13T19:28:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/06/13/JSON</id>
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/xiazdong/article/details/7059573">http://blog.csdn.net/xiazdong/article/details/7059573</a></p>

<h2>一、JSON介绍</h2>

<p>JSON（JavaScript Object Notation），类似于XML，是一种数据交换格式，比如JAVA产生了一个数据想要给JavaScript，则除了利用XML外，还可以利用JSON;</p>

<p>JSON相比XML的优势是表达起来很简单；</p>

<p>官网：<a href="http://www.json.org/">http://www.json.org/</a></p>

<blockquote><p>JSON是AJAX中的X（就是可以取代XML）;          &#8212;&#8212;出自JSON创始人;</p></blockquote>

<p>注意：JSON并不是一个文档格式，没有*.json的文档，一般JSON格式的文档存在txt中，而XML可以是一个标准；</p>

<p>在线校验JSON结构的网站：<a href="http://www.bejson.com/go.html?u=http://www.bejson.com/jsonview2/">http://www.bejson.com/go.html?u=http://www.bejson.com/jsonview2/</a></p>

<!-- more -->


<h2>二、JSON数据结构</h2>

<p>JSON有两种数据结构：</p>

<ol>
<li><p>Map，也称为对象；｛&#8230;.｝</p></li>
<li><p>Array；[&#8230;&#8230;]</p></li>
</ol>


<p>也就是说所有的JSON对象都是要以这些形式表示；</p>

<h3>1.Map</h3>

<p>简单的说就是Java中的Map，名称-值对的形式给出，名称和值之间用“：”隔开，两个Map之间用“，”隔开，一般表示形式如下：</p>

<p>{&#8216;key1&#8217;:&#8217;value1&#8217;,&#8217;key2&#8217;:&#8217;value2&#8217;}</p>

<p>以下为官网的图：</p>

<p><img class="center" src="http://img.my.csdn.net/uploads/201112/10/0_13234989385pO5.gif"></p>

<h3>2.Array</h3>

<p>就是普通意义上的数组，一般形式如下：</p>

<p>[&#8216;arr1&#8217;,&#8217;arr2&#8217;,&#8217;arr3&#8217;];</p>

<p>以下为官网的图：</p>

<p><img class="center" src="http://img.my.csdn.net/uploads/201112/10/0_1323498954Pp6o.gif"></p>

<p>图中的value可以是：</p>

<p><img class="center" src="http://img.my.csdn.net/uploads/201112/10/0_1323498968ZgT5.gif"></p>

<h3>总结：</h3>

<p>(1)JSON的数据结构只有两种；</p>

<p>(2)可以嵌套表示，比如Array中可以嵌套Object等；</p>

<p>(3)记住：Object是以｛｝表示，Array是以[  ]表示；</p>

<h2>三、JSON与XML互转示例</h2>

<p>前面提到任何的XML都能够转换成JSON包；</p>

<h3>1.简单XML</h3>

<p>XML格式：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;person&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>xiazdong<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;age&gt;</span>20<span class="nt">&lt;/age&gt;</span>
</span><span class='line'><span class="nt">&lt;/person&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>JSON格式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{  
</span><span class='line'>    "name":"xiazdong",  
</span><span class='line'>    "age":20  
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>2.复杂XML</p>

<p>XML格式：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;section&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>BOOK<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;signing&gt;</span>
</span><span class='line'>        <span class="nt">&lt;author</span> <span class="na">name=</span><span class="s">&quot;author-1&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;book</span> <span class="na">title=</span><span class="s">&quot;book1&quot;</span> <span class="na">price=</span><span class="s">&quot;$11&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/signing&gt;</span>
</span><span class='line'>    <span class="nt">&lt;signing&gt;</span>
</span><span class='line'>        <span class="nt">&lt;author</span> <span class="na">name=</span><span class="s">&quot;author-2&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;book</span> <span class="na">title=</span><span class="s">&quot;book2&quot;</span> <span class="na">price=</span><span class="s">&quot;$22&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/signing&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>JSON格式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"section":{  
</span><span class='line'>        "title":"BOOK",  
</span><span class='line'>        "signing":[  
</span><span class='line'>        {  
</span><span class='line'>            "author":  
</span><span class='line'>            {  
</span><span class='line'>                "name":"author-1"  
</span><span class='line'>            },  
</span><span class='line'>            "book":  
</span><span class='line'>            {  
</span><span class='line'>                "title":"book1",  
</span><span class='line'>                "price":"$11"  
</span><span class='line'>            }  
</span><span class='line'>        },  
</span><span class='line'>        {  
</span><span class='line'>            "author":  
</span><span class='line'>            {  
</span><span class='line'>                "name":"author-2"  
</span><span class='line'>            },  
</span><span class='line'>            "book":  
</span><span class='line'>            {  
</span><span class='line'>                "title":"book2",  
</span><span class='line'>                "price":"$22"  
</span><span class='line'>            }  
</span><span class='line'>        }     
</span><span class='line'>     ]}  
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>注意：XML中的属性也是通过JSON的Map表示；</p>

<h2>四、JSON包</h2>

<p>如果我们想要使用JSON包，则可以下载JSON包的源代码，并将这些代码添加进Eclipse工程中，即可调用；</p>

<p>如果想要看API文档，可以参见：<a href="http://www.JSON.org/java/index.html">http://www.JSON.org/java/index.html</a></p>

<p>JSON包中最常用的两个类就是JSONObject和JSONArray，分别表示两种数据结构；</p>

<h3>1.JSONObject代码实例</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">xiazdong</span><span class="o">.</span><span class="na">json</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">weibo4j.org.json.JSONArray</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">weibo4j.org.json.JSONObject</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">{</span>
</span><span class='line'>        <span class="n">JSONObject</span> <span class="n">jsonobj</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JSONObject</span><span class="o">(</span><span class="s">&quot;{&#39;name&#39;:&#39;xiazdong&#39;,&#39;age&#39;:20}&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">jsonobj</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">jsonobj</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="s">&quot;age&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span><span class="o">+</span><span class="s">&quot;:&quot;</span><span class="o">+</span><span class="n">age</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.JSONArray代码实例</h3>

<p>JSONArray array = new JSONArray(String str);  //将String转为JSONArray</p>

<p>int length = array.length(); //返回Array的长度；</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">xiazdong</span><span class="o">.</span><span class="na">json</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">weibo4j.org.json.JSONArray</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">weibo4j.org.json.JSONObject</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">JSONArray</span> <span class="n">jsonarray</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JSONArray</span><span class="o">(</span><span class="s">&quot;[{&#39;name&#39;:&#39;xiazdong&#39;,&#39;age&#39;:20},{&#39;name&#39;:&#39;xzdong&#39;,&#39;age&#39;:15}]&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">jsonarray</span><span class="o">.</span><span class="na">length</span><span class="o">();</span><span class="n">i</span><span class="o">++){</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">jsonarray</span><span class="o">.</span><span class="na">getJSONObject</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">jsonarray</span><span class="o">.</span><span class="na">getJSONObject</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">getInt</span><span class="o">(</span><span class="s">&quot;age&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;name=&quot;</span><span class="o">+</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;age=&quot;</span><span class="o">+</span><span class="n">age</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.嵌套JSONObject和JSONArray代码实例</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">xiazdong</span><span class="o">.</span><span class="na">json</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">weibo4j.org.json.JSONArray</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">weibo4j.org.json.JSONObject</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">&quot;{&#39;name&#39;:&#39;xiazdong&#39;,&#39;age&#39;:20,&#39;book&#39;:[&#39;book1&#39;,&#39;book2&#39;]&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="n">JSONObject</span> <span class="n">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JSONObject</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">obj</span><span class="o">.</span><span class="na">getJSONArray</span><span class="o">(</span><span class="s">&quot;book&quot;</span><span class="o">).</span><span class="na">getString</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4.JSONStringer代码示例</h3>

<p>JSONStringer可以用来快速构建一个JSON格式的文本，并转换成String，可以写入文件；</p>

<p>JSONStringer是JSONWriter的子类;</p>

<p>JSONStringer一般通过object().key().value().key().value().endObject()进行构造;</p>

<p>object()表明开始一个对象，即添加｛  ;</p>

<p>endObject()表明结束一个对象，即添加 ｝ ;</p>

<p>array()表明开始一个数组,即添加一个 [ ;</p>

<p>endArray()表明结束一个数组，即添加一个 ] ;</p>

<p>key()表示添加一个key;</p>

<p>value()表示添加一个value;</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">xiazdong</span><span class="o">.</span><span class="na">json</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">weibo4j.org.json.JSONStringer</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JsonStringerDemo</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">{</span>
</span><span class='line'>        <span class="n">JSONStringer</span> <span class="n">stringer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JSONStringer</span><span class="o">();</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">stringer</span><span class="o">.</span><span class="na">object</span><span class="o">().</span><span class="na">key</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="s">&quot;xiazdong&quot;</span><span class="o">).</span><span class="na">key</span><span class="o">(</span><span class="s">&quot;age&quot;</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="mi">20</span><span class="o">).</span><span class="na">endObject</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>复杂JSON格式写入</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">xiazdong</span><span class="o">.</span><span class="na">json</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FileReader</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">weibo4j.org.json.JSONArray</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">weibo4j.org.json.JSONObject</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">weibo4j.org.json.JSONStringer</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">weibo4j.org.json.JSONTokener</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JsonStringerDemo</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">JSONStringer</span> <span class="n">js</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JSONStringer</span><span class="o">();</span>
</span><span class='line'>        <span class="n">JSONObject</span> <span class="n">obj2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JSONObject</span><span class="o">();</span>
</span><span class='line'>        <span class="n">JSONObject</span> <span class="n">obj3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JSONObject</span><span class="o">();</span>
</span><span class='line'>        <span class="n">JSONObject</span> <span class="n">obj4</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JSONObject</span><span class="o">();</span>
</span><span class='line'>        <span class="n">obj4</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;title&quot;</span><span class="o">,</span> <span class="s">&quot;book1&quot;</span><span class="o">).</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;price&quot;</span><span class="o">,</span> <span class="s">&quot;$11&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">obj3</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;book&quot;</span><span class="o">,</span> <span class="n">obj4</span><span class="o">);</span>
</span><span class='line'>        <span class="n">obj3</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;author&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">JSONObject</span><span class="o">().</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="s">&quot;author-1&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">JSONObject</span> <span class="n">obj5</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JSONObject</span><span class="o">();</span>
</span><span class='line'>        <span class="n">JSONObject</span> <span class="n">obj6</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JSONObject</span><span class="o">();</span>
</span><span class='line'>        <span class="n">obj6</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;title&quot;</span><span class="o">,</span> <span class="s">&quot;book2&quot;</span><span class="o">).</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;price&quot;</span><span class="o">,</span> <span class="s">&quot;$22&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">obj5</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;book&quot;</span><span class="o">,</span> <span class="n">obj6</span><span class="o">);</span>
</span><span class='line'>        <span class="n">obj5</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;author&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">JSONObject</span><span class="o">().</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="s">&quot;author-2&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">JSONArray</span> <span class="n">obj7</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JSONArray</span><span class="o">();</span>
</span><span class='line'>        <span class="n">obj7</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">obj3</span><span class="o">).</span><span class="na">put</span><span class="o">(</span><span class="n">obj5</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="n">obj2</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;title&quot;</span><span class="o">,</span><span class="s">&quot;BOOK&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">obj2</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;signing&quot;</span><span class="o">,</span> <span class="n">obj7</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">js</span><span class="o">.</span><span class="na">object</span><span class="o">().</span><span class="na">key</span><span class="o">(</span><span class="s">&quot;session&quot;</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="n">obj2</span><span class="o">).</span><span class="na">endObject</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">js</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">PrintWriter</span> <span class="n">out</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PrintWriter</span><span class="o">(</span><span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="mi">1</span><span class="o">.</span><span class="na">txt</span><span class="o">));</span>
</span><span class='line'>        <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">js</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上代码生成了如下JSON格式：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">{</span><span class="s">&quot;section&quot;</span><span class="o">:{</span>
</span><span class='line'>        <span class="s">&quot;title&quot;</span><span class="o">:</span><span class="s">&quot;BOOK&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;signing&quot;</span><span class="o">:[</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s">&quot;author&quot;</span><span class="o">:</span>
</span><span class='line'>            <span class="o">{</span>
</span><span class='line'>                <span class="s">&quot;name&quot;</span><span class="o">:</span><span class="s">&quot;author-1&quot;</span>
</span><span class='line'>            <span class="o">},</span>
</span><span class='line'>            <span class="s">&quot;book&quot;</span><span class="o">:</span>
</span><span class='line'>            <span class="o">{</span>
</span><span class='line'>                <span class="s">&quot;title&quot;</span><span class="o">:</span><span class="s">&quot;book1&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;price&quot;</span><span class="o">:</span><span class="s">&quot;$11&quot;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">},</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s">&quot;author&quot;</span><span class="o">:</span>
</span><span class='line'>            <span class="o">{</span>
</span><span class='line'>                <span class="s">&quot;name&quot;</span><span class="o">:</span><span class="s">&quot;author-2&quot;</span>
</span><span class='line'>            <span class="o">},</span>
</span><span class='line'>            <span class="s">&quot;book&quot;</span><span class="o">:</span>
</span><span class='line'>            <span class="o">{</span>
</span><span class='line'>                <span class="s">&quot;title&quot;</span><span class="o">:</span><span class="s">&quot;book2&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;price&quot;</span><span class="o">:</span><span class="s">&quot;$22&quot;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="o">]}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>5.JSONTokener代码示例</h3>

<p>JSONTokener是用来读取JSON格式的文件;</p>

<p>JSONObject obj = new JSONObject( new JSONTokener(java.io.Reader));可以从文件中读取一个JSONObject;</p>

<p>JSONArray obj = new JSONArray( new JSONTokener(java.io.Reader)); 可以从文件中读取一个JSONArray;</p>

<p>1.txt</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{  
</span><span class='line'>    'name':'xiazdong',  
</span><span class='line'>    'book':['book1','book2']  
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">xiazdong</span><span class="o">.</span><span class="na">json</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FileReader</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">weibo4j.org.json.JSONObject</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">weibo4j.org.json.JSONTokener</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JsonStringerDemo</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">{</span>
</span><span class='line'>        <span class="n">JSONObject</span> <span class="n">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JSONObject</span><span class="o">(</span><span class="k">new</span> <span class="n">JSONTokener</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;1.txt&quot;</span><span class="o">))));</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">obj</span><span class="o">.</span><span class="na">getJSONArray</span><span class="o">(</span><span class="s">&quot;book&quot;</span><span class="o">).</span><span class="na">getString</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span> <span class="c1">//可以读取book2  </span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>复杂JSON格式的读取代码：</p>

<h3>1.txt</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{"section":{  
</span><span class='line'>        "title":"BOOK",  
</span><span class='line'>        "signing":[  
</span><span class='line'>        {  
</span><span class='line'>            "author":  
</span><span class='line'>            {  
</span><span class='line'>                "name":"author-1"  
</span><span class='line'>            },  
</span><span class='line'>            "book":  
</span><span class='line'>            {  
</span><span class='line'>                "title":"book1",  
</span><span class='line'>                "price":"$11"  
</span><span class='line'>            }  
</span><span class='line'>        },  
</span><span class='line'>        {  
</span><span class='line'>            "author":  
</span><span class='line'>            {  
</span><span class='line'>                "name":"author-2"  
</span><span class='line'>            },  
</span><span class='line'>            "book":  
</span><span class='line'>            {  
</span><span class='line'>                "title":"book2",  
</span><span class='line'>                "price":"$22"  
</span><span class='line'>            }  
</span><span class='line'>        }     
</span><span class='line'>        ]}  
</span><span class='line'>    }  
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">xiazdong</span><span class="o">.</span><span class="na">json</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FileReader</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">weibo4j.org.json.JSONObject</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">weibo4j.org.json.JSONTokener</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JsonStringerDemo</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">{</span>
</span><span class='line'>        <span class="n">JSONObject</span> <span class="n">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JSONObject</span><span class="o">(</span><span class="k">new</span> <span class="n">JSONTokener</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;1.txt&quot;</span><span class="o">))));</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">obj</span><span class="o">.</span><span class="na">getJSONObject</span><span class="o">(</span><span class="s">&quot;section&quot;</span><span class="o">).</span><span class="na">getJSONArray</span><span class="o">(</span><span class="s">&quot;signing&quot;</span><span class="o">).</span><span class="na">getJSONObject</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">getJSONObject</span><span class="o">(</span><span class="s">&quot;author&quot;</span><span class="o">).</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">));</span> <span class="o">&lt;</span><span class="n">span</span> <span class="n">style</span><span class="o">=</span><span class="s">&quot;white-space:pre&quot;</span><span class="o">&gt;</span>     <span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;</span><span class="c1">//获取author-1  </span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>总结：</h3>

<ol>
<li><p>在Java中JSON格式的String最好用单引号表示;</p></li>
<li><p>利用JSONObject+JSONTokener能够读取JSON格式文件对象;</p></li>
<li><p>利用PrintWriter+JSONStringer可以写入JSON文件;</p></li>
</ol>


<p>注：由于原本想要试图用JSONWriter写入，但是没有成功；所以只能利用JSONStringer+PrintWriter写入;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用convertView优化ListView性能]]></title>
    <link href="http://dande618.github.com/blog/2013/06/11/listview/"/>
    <updated>2013-06-11T10:00:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/06/11/listview</id>
    <content type="html"><![CDATA[<p><a href="http://johncookie.iteye.com/blog/1250049">http://johncookie.iteye.com/blog/1250049</a>
这里提到的ListView只是作为一个典型代表 其实在Android中 采用类似Adapter机制的GridView等都是可以适用的 而ListView应该是用得最多的 所以就以它来举例</p>

<p>大家都知道 将ListView和Adapter绑定以后 其实也就是将数据源和控件显示绑定在一起 而每次需要显示ListView的时候 里面的item其实是Adapter提供的 通过的就是重要的getView()方法 而做法也是在这上面进行。</p>

<!-- more -->


<p>先来看一下基本的getView写法</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">View</span> <span class="nf">getView</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">,</span> <span class="n">View</span> <span class="n">convertView</span><span class="o">,</span> <span class="n">ViewGroup</span> <span class="n">parent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">View</span> <span class="n">view</span> <span class="o">=</span> <span class="k">new</span> <span class="n">View</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//通过inflate等找到布局 然后findViewById等 设置各个显示的item  </span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">view</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而在ListView滑动的过程中 很容易就会发现每次getView被执行 都会new出一个View对象 长此以往会产生很大的消耗 特别当item中还有Bitmap等 甚至会造成OOM的错误导致程序崩溃</p>

<p>在看getView提供的参数时 可能已经注意到了 有一个参数View convertView 而这个convertView其实就是最关键的部分了 原理上讲 当ListView滑动的过程中 会有item被滑出屏幕 而不再被使用 这时候Android会回收这个条目的view 这个view也就是这里的convertView</p>

<p>在上面的做法中 当item1被移除屏幕的时候 我们会重新new一个View给新显示的item_new 而如果使用了这个convertView 我们其实可以复用它 这样就省去了new View的大量开销</p>

<p>下面就是使用convertView后的情况</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">View</span> <span class="nf">getView</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">,</span> <span class="n">View</span> <span class="n">convertView</span><span class="o">,</span> <span class="n">ViewGroup</span> <span class="n">parent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">View</span> <span class="n">view</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">convertView</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">view</span> <span class="o">=</span> <span class="n">convertView</span><span class="o">;</span>
</span><span class='line'>    <span class="c1">//复用了回收的view 只需要直接作内容填充的修改就好了  </span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">view</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Xxx</span><span class="o">(...);</span>
</span><span class='line'>    <span class="c1">//没有供复用的view 按一般的做法新建view  </span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">view</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样一来 就避免了反复创建大量view的问题了</p>

<p>但是上面的仍然有缺陷 当我们的ListView中填充的item有多种形式时 比如微博中 有的item中包含图片 有的item包含视频 那么必然的 我们需要用到2种item的布局方式</p>

<p>此时如果只是单纯判断convert是否存在 会造成回收的view不符合你当前需要的布局 而类似转换失败出错退出</p>

<p>这里要提到Adapter中的另外2个方法：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">getItemViewType</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span class="o">{}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">getViewTypeCount</span><span class="o">()</span> <span class="o">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从方法名上 就可以比较明显的明白这2个的作用</p>

<p>下面附上一个demo代码</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">MyAdapter</span> <span class="kd">extends</span> <span class="n">BaseAdapter</span><span class="o">{</span>
</span><span class='line'>    <span class="n">Context</span> <span class="n">mContext</span><span class="o">;</span>
</span><span class='line'>    <span class="n">LinearLayout</span> <span class="n">linearLayout</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="n">LayoutInflater</span> <span class="n">inflater</span><span class="o">;</span>
</span><span class='line'>    <span class="n">TextView</span> <span class="n">tex</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">int</span> <span class="n">VIEW_TYPE</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">int</span> <span class="n">TYPE_1</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">int</span> <span class="n">TYPE_2</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">MyAdapter</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mContext</span> <span class="o">=</span> <span class="n">context</span><span class="o">;</span>
</span><span class='line'>        <span class="n">inflater</span> <span class="o">=</span> <span class="n">LayoutInflater</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">mContext</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getCount</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">listString</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//每个convert view都会调用此方法，获得当前所需要的view样式  </span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getItemViewType</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">p</span> <span class="o">=</span> <span class="n">position</span><span class="o">%</span><span class="mi">6</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">p</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">TYPE_1</span><span class="o">;</span>
</span><span class='line'>        <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">p</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">TYPE_2</span><span class="o">;</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">TYPE_1</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getViewTypeCount</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">getItem</span><span class="o">(</span><span class="kt">int</span> <span class="n">arg0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">listString</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">arg0</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getItemId</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">position</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">View</span> <span class="nf">getView</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">,</span> <span class="n">View</span> <span class="n">convertView</span><span class="o">,</span> <span class="n">ViewGroup</span> <span class="n">parent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">viewHolder1</span> <span class="n">holder1</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">viewHolder2</span> <span class="n">holder2</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">type</span> <span class="o">=</span> <span class="n">getItemViewType</span><span class="o">(</span><span class="n">position</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//无convertView，需要new出各个控件  </span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">convertView</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="c1">//按当前所需的样式，确定new的布局  </span>
</span><span class='line'>            <span class="k">switch</span><span class="o">(</span><span class="n">type</span><span class="o">)</span>
</span><span class='line'>            <span class="o">{</span>
</span><span class='line'>                <span class="k">case</span> <span class="nl">TYPE_1:</span>
</span><span class='line'>                <span class="n">convertView</span> <span class="o">=</span> <span class="n">inflater</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">listitem1</span><span class="o">,</span> <span class="n">parent</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>                <span class="n">holder1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">viewHolder1</span><span class="o">();</span>
</span><span class='line'>                <span class="n">holder1</span><span class="o">.</span><span class="na">textView</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span><span class="n">convertView</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">textview1</span><span class="o">);</span>
</span><span class='line'>                <span class="n">holder1</span><span class="o">.</span><span class="na">checkBox</span> <span class="o">=</span> <span class="o">(</span><span class="n">CheckBox</span><span class="o">)</span><span class="n">convertView</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">checkbox</span><span class="o">);</span>
</span><span class='line'>                <span class="n">convertView</span><span class="o">.</span><span class="na">setTag</span><span class="o">(</span><span class="n">holder1</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="nl">TYPE_2:</span>
</span><span class='line'>                <span class="n">convertView</span> <span class="o">=</span> <span class="n">inflater</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">listitem2</span><span class="o">,</span> <span class="n">parent</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>                <span class="n">holder2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">viewHolder2</span><span class="o">();</span>
</span><span class='line'>                <span class="n">holder2</span><span class="o">.</span><span class="na">textView</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span><span class="n">convertView</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">textview2</span><span class="o">);</span>
</span><span class='line'>                <span class="n">holder2</span><span class="o">.</span><span class="na">imageView</span> <span class="o">=</span> <span class="o">(</span><span class="n">ImageView</span><span class="o">)</span><span class="n">convertView</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">imageview</span><span class="o">);</span>
</span><span class='line'>                <span class="n">convertView</span><span class="o">.</span><span class="na">setTag</span><span class="o">(</span><span class="n">holder2</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="c1">//有convertView，按样式，取得不用的布局  </span>
</span><span class='line'>            <span class="k">switch</span><span class="o">(</span><span class="n">type</span><span class="o">)</span>
</span><span class='line'>            <span class="o">{</span>
</span><span class='line'>                <span class="k">case</span> <span class="nl">TYPE_1:</span>
</span><span class='line'>                <span class="n">holder1</span> <span class="o">=</span> <span class="o">(</span><span class="n">viewHolder1</span><span class="o">)</span> <span class="n">convertView</span><span class="o">.</span><span class="na">getTag</span><span class="o">();</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="nl">TYPE_2:</span>
</span><span class='line'>                <span class="n">holder2</span> <span class="o">=</span> <span class="o">(</span><span class="n">viewHolder2</span><span class="o">)</span> <span class="n">convertView</span><span class="o">.</span><span class="na">getTag</span><span class="o">();</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>                <span class="c1">//设置资源  </span>
</span><span class='line'>            <span class="k">switch</span><span class="o">(</span><span class="n">type</span><span class="o">)</span>
</span><span class='line'>            <span class="o">{</span>
</span><span class='line'>                <span class="k">case</span> <span class="nl">TYPE_1:</span>
</span><span class='line'>                <span class="n">holder1</span><span class="o">.</span><span class="na">textView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">position</span><span class="o">));</span>
</span><span class='line'>                <span class="n">holder1</span><span class="o">.</span><span class="na">checkBox</span><span class="o">.</span><span class="na">setChecked</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="nl">TYPE_2:</span>
</span><span class='line'>                <span class="n">holder2</span><span class="o">.</span><span class="na">textView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">position</span><span class="o">));</span>
</span><span class='line'>                <span class="n">holder2</span><span class="o">.</span><span class="na">imageView</span><span class="o">.</span><span class="na">setBackgroundResource</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">drawable</span><span class="o">.</span><span class="na">icon</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">convertView</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">//各个布局的控件资源  </span>
</span><span class='line'><span class="kd">class</span> <span class="nc">viewHolder1</span><span class="o">{</span>
</span><span class='line'>    <span class="n">CheckBox</span> <span class="n">checkBox</span><span class="o">;</span>
</span><span class='line'>    <span class="n">TextView</span> <span class="n">textView</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">viewHolder2</span><span class="o">{</span>
</span><span class='line'>    <span class="n">ImageView</span> <span class="n">imageView</span><span class="o">;</span>
</span><span class='line'>    <span class="n">TextView</span> <span class="n">textView</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里对于每个View使用了一个viewHolder来控制其内部的子item</p>

<p>还有一个需要注意的地方是使用了setTag和getTag的方法 将holder绑定到了view上 也算一种技巧</p>

<p>以上基本就是主要的内容了 下面再补充实际操作当中的一些Tips</p>

<ul>
<li><p>如果convertView上用Type区分有些繁琐 或者不需要那么复杂 只是很少有出现不同的情况 那么还可以在取得convertView后 通过java提供的 instanceof 来判断是否可以强转 如果不能强转 就去新建一个View的做法 但是其实这种做法并不规范 所以还是推荐上面的做法</p></li>
<li><p>第二个是关于ListView 对于纯色的item背景 其实可以直接设置BackgroundColor 而不要使用图片 这一部分其实可以有不小的提升 同样的 对于任何纯色的背景 应该尽量去设置RGB颜色 而不是全用一张图片做背景</p></li>
</ul>


<p>在做类型强转的时候 这里用type作为区分类型的判断 但是实际情况下 很可能出现系统回收的convertView与要创建的并不相符 所以在强转处的type判断是不保险的 考虑了下还是应该使用instanceof做一下判断 或者再为每个View绑定一个type的标记 然后再决定是重用还是重新创建</p>

<h2>convertView与ViewHolder有什么区别，好处在哪里</h2>

<p><a href="http://blog.sina.com.cn/s/blog_664f163401011e7d.html">http://blog.sina.com.cn/s/blog_664f163401011e7d.html</a></p>

<p>convertView 在API中的解释是The old view to reuse, if possible， 第一次getView时还没有convertView，这时你便创建了一个新的view，下次getView时就有这个“旧的”convertView了。setTag的作用才是把查找的view通过ViewHolder封装好缓存起来方便多次重用，当需要时可以getTag拿出来。</p>

<p>当你的listview里布局多样化的时候 viewholder的作用就有比较明显的体现了。 当然了，单一模式的布局一样有性能优化的作用 只是不直观。  假如你2种模式的布局 当发生回收的时候 你会用setTag分别记录是哪两种。这两种模式会被封装到viewholder中进行保存方便你下次使用。</p>

<h2>convertView&amp;setTag方法的一点理解</h2>

<p><a href="http://blog.163.com/freemanls@126/blog/static/164585061201171210504864/">http://blog.163.com/freemanls@126/blog/static/164585061201171210504864/</a></p>

<p>前言</p>

<p>首先我们要知道setTag方法是干什么的，SDK解释为</p>

<blockquote><p><strong>Tags</strong></p>

<p>Unlike IDs, tags are not used to identify views. Tags are essentially an extra piece of information that can be associated with a view. They are most often used as a convenience to store data related to views in the views themselves rather than by putting them in a separate structure.</p></blockquote>

<p>Tag不像ID是用标示view的。Tag从本质上来讲是就是相关联的view的额外的信息。它们经常用来存储一些view的数据，这样做非常方便而不用存入另外的单独结构。</p>

<p>convertView中的TAG</p>

<p>1.对于使用了LayoutInflater对象进行View扩充的Tag的使用</p>

<p> 在之前，在adapter中，我们在getView中是这么些的代码：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">View</span> <span class="nf">getView</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">,</span> <span class="n">View</span> <span class="n">convertView</span><span class="o">,</span> <span class="n">ViewGroup</span> <span class="n">parent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>       <span class="n">ViewHolder</span> <span class="n">holder</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>       <span class="k">if</span> <span class="o">(</span><span class="n">convertView</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">holder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ViewHolder</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">convertView</span> <span class="o">=</span> <span class="n">inflater</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">vlist2</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>          <span class="n">holder</span><span class="o">.</span><span class="na">img</span> <span class="o">=</span> <span class="o">(</span><span class="n">ImageView</span><span class="o">)</span> <span class="n">convertView</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">img</span><span class="o">);</span>
</span><span class='line'>          <span class="n">holder</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">convertView</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">title</span><span class="o">);</span>
</span><span class='line'>          <span class="n">holder</span><span class="o">.</span><span class="na">info</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span>
</span><span class='line'>          <span class="n">convertView</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">info</span><span class="o">);</span>
</span><span class='line'>          <span class="c1">// setTag的妙用</span>
</span><span class='line'>          <span class="n">convertView</span><span class="o">.</span><span class="na">setTag</span><span class="o">(</span><span class="n">holder</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>       <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// setTag的妙用</span>
</span><span class='line'>          <span class="n">holder</span> <span class="o">=</span> <span class="o">(</span><span class="n">ViewHolder</span><span class="o">)</span> <span class="n">convertView</span><span class="o">.</span><span class="na">getTag</span><span class="o">();</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//……略</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意标红的地方，他们是使用了Tag的。</p>

<p>首先我们要知道setTag方法是干什么的，他是给View对象的一个标签，标签可以是任何内容，我们这里把他设置成了一个对象，因为我们是把vlist2.xml的元素抽象出来成为一个类ViewHolder，用了setTag，这个标签就是ViewHolder实例化后对象的一个属性。我们之后对于ViewHolder实例化的对象holder的操作，都会因为java的引用机制而一直存活并改变convertView的内容，而不是每次都是去new一个。我们就这样达到的重用——我希望我说清楚了。如果有更简单的解释，请指教。</p>

<p>这是我们在Adapter中的使用，那么我们在这里不使用Tag标签会怎么样呢？</p>

<p>我们试想，如果我们不用Tag标签，那么我们的对象如何与convertView缓存结合并达到合理的效率利用？貌似答案并不明朗——所以使用Tag是比较明智的做法。</p>

<p>2.对于没有使用LayoutInflater对象进行View扩充的Tag的使用。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">convertView</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">view</span> <span class="o">=</span> <span class="n">convertView</span><span class="o">;</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">view</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Xxx</span><span class="o">(...);</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是我们的程序，我们看到，貌似没有用Tag——是的，当没有使用LayoutInflater进行View的扩充的时候，是没有必要用的，虽然也可以用。</p>

<p>3.对于其他View的Tag使用</p>

<p>我们可以对所有的View对象进行操作，至于怎么用，就看作者怎么想的了，下面举例说一个View的子类button对于tag的一个使用。</p>

<p>直接贴代码了：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ButtonTagTestActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="kd">implements</span> <span class="n">OnClickListener</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/** Called when the activity is first created. */</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>       <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">main</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>       <span class="n">Button</span> <span class="n">button1</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">button1</span><span class="o">);</span>
</span><span class='line'>       <span class="n">Button</span> <span class="n">button2</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">button2</span><span class="o">);</span>
</span><span class='line'>       <span class="n">Button</span> <span class="n">button3</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">button3</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>       <span class="n">button1</span><span class="o">.</span><span class="na">setTag</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>       <span class="n">button2</span><span class="o">.</span><span class="na">setTag</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>       <span class="n">button3</span><span class="o">.</span><span class="na">setTag</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>       <span class="n">button1</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">arg0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="c1">// TODO Auto-generated method stub</span>
</span><span class='line'>       <span class="kt">int</span> <span class="n">tag</span> <span class="o">=</span> <span class="o">(</span><span class="n">Integer</span><span class="o">)</span> <span class="n">arg0</span><span class="o">.</span><span class="na">getTag</span><span class="o">();</span>
</span><span class='line'>       <span class="k">switch</span> <span class="o">(</span><span class="n">tag</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">case</span> <span class="mi">1</span><span class="o">:</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="s">&quot;我是button1&quot;</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>           <span class="k">break</span><span class="o">;</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">case</span> <span class="mi">2</span><span class="o">:</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="s">&quot;我是button2&quot;</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>           <span class="k">break</span><span class="o">;</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">case</span> <span class="mi">3</span><span class="o">:</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="s">&quot;我是button3&quot;</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>           <span class="k">break</span><span class="o">;</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">default</span><span class="o">:</span> <span class="o">{</span>
</span><span class='line'>           <span class="k">break</span><span class="o">;</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Xml页面代码就不贴了。这个例子是点击界面上的3个button然后会显示用户点击的按钮。我们的程序是实现了页面全局监听，在监听前设置了每个button的tag，之后我们在switch的时候，使用getTag取出的标签来看是什么操作。</p>

<p>这样做的好处是可以将监听集中管理，提高代码的易读性——当然，这是我的自我理解。</p>

<p>后记</p>

<p>看了这么多的实例，我想已经明白了Tag以及convertView。</p>

<p>对我们知道了Tag的作用就是设置标签，标签可以是任意玩意。</p>

<p>以及convertView是如何在程序中使代码运行变的效率的：利用缓存convertView尽可能少实例化同样结构体的对象；</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JAVA单例模式]]></title>
    <link href="http://dande618.github.com/blog/2013/06/10/singleton/"/>
    <updated>2013-06-10T19:28:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/06/10/singleton</id>
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/it_man/article/details/5787567">http://blog.csdn.net/it_man/article/details/5787567</a></p>

<p>1.预先加载法</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">S1</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">S1</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;ok1&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">S1</span> <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">S1</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">S1</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>优点：</p>

<p>1.线程安全的</p>

<p>2.在类加载的同时已经创建好一个静态对象,调用时反应速度快。</p>

<p>缺点： 资源利用效率不高，可能getInstance永远不会执行到，但是执行了该类的其他静态方法或者加载了该类（class.forName），那么这个实例仍然初始化了</p>

<!-- more -->


<p>2.initialization on demand,延迟加载法  (考虑多线程)</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">S2</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">S2</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;ok2&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">S2</span> <span class="n">instance</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">S2</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">S2</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>优点： 资源利用率高,不执行getInstance就不会被实例，可以执行该类其他静态方法。</p>

<p>缺点： 第一次加载时发应不快  ，多线程使用不必要的同步开销大</p>

<p>3.initialization on demand double check 双重检测( 考虑多线程 )</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">S3</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">S3</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;ok3&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">S3</span> <span class="n">instance</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">S3</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">S3</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                    <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">S3</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>优点： 资源利用率高, 不执行getInstance就不会被实例，可以执行该类其他静态方法。</p>

<p>缺点： 第一次加载时发应不快  ，由于java 内存模型一些原因偶尔会失败</p>

<p>4.initialization on demand holder  (考虑多线程)</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">S4</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">S4</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;ok4&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">S4Holder</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">static</span> <span class="n">S4</span> <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">S4</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">S4</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">S4Holder</span><span class="o">.</span><span class="na">instance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>优点： 资源利用率高, 不执行getInstance就不会被实例，可以执行该类其他静态方法。</p>

<p>缺点： 第一次加载时发应不快</p>

<p>总结： 一般采用 1 即可，若对资源十分在意也可考虑 4 ，不要使用2，3了。</p>

<p>测试代码：（暂不探讨Class.forName类加载机制）</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**  </span>
</span><span class='line'><span class="cm"> * Created by IntelliJ IDEA.  </span>
</span><span class='line'><span class="cm"> * User: yiminghe  </span>
</span><span class='line'><span class="cm"> * Date: 2009-6-8  </span>
</span><span class='line'><span class="cm"> * Time: 19:20:52  </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;S1&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;S2&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;S3&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;S4&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*  </span>
</span><span class='line'><span class="cm">    预先加载法  </span>
</span><span class='line'><span class="cm">    优点：1.线程安全的,  </span>
</span><span class='line'><span class="cm">          2.在类加载的同时已经创建好一个静态对象,调用时反应速度快。  </span>
</span><span class='line'><span class="cm"> </span>
</span><span class='line'><span class="cm">    缺点： 资源利用效率不高，可能这个单例不会需要使用也被系统加载  </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">S1</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">S1</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;ok1&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">S1</span> <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">S1</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">S1</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*  </span>
</span><span class='line'><span class="cm">    initialization on demand,延迟加载法  (考虑多线程)  </span>
</span><span class='line'><span class="cm">    优点：1.资源利用率高  </span>
</span><span class='line'><span class="cm">    缺点：第一次加载是发应不快  ，多线程使用不必要的同步开销大  </span>
</span><span class='line'><span class="cm"> </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">S2</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">S2</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;ok2&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">S2</span> <span class="n">instance</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">S2</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">S2</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/*  </span>
</span><span class='line'><span class="cm">    initialization on demand - double check 延迟加载法改进之双重检测  (考虑多线程)  </span>
</span><span class='line'><span class="cm">    优点：1.资源利用率高  </span>
</span><span class='line'><span class="cm">    缺点：第一次加载是发应不快  ，由于java 内存模型一些原因偶尔会失败  </span>
</span><span class='line'><span class="cm"> </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">S3</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">S3</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;ok3&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">S3</span> <span class="n">instance</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">S3</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">S3</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                    <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">S3</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/*  </span>
</span><span class='line'><span class="cm">   initialization on demand holder  (考虑多线程)  </span>
</span><span class='line'><span class="cm">   优点：1.资源利用率高  </span>
</span><span class='line'><span class="cm">   缺点：第一次加载是发应不快  </span>
</span><span class='line'><span class="cm"> </span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">S4</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">S4</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;ok4&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">S4Holder</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">static</span> <span class="n">S4</span> <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">S4</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">S4</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">S4Holder</span><span class="o">.</span><span class="na">instance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>作为对象的创建模式[GOF95]， 单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。这个类称为单例类。</p>

<p>注：本文乃阎宏博士的《Java与模式》一书的第十五章。</p>

<p>引言</p>

<p>单例模式的要点</p>

<p>单例单例</p>

<p>显然单例模式的要点有三个；一是某各类只能有一个实例；二是它必须自行创建这个事例；三是它必须自行向整个系统提供这个实例。在下面的对象图中，有一个&#8221;单例对象&#8221;，而&#8221;客户甲&#8221;、&#8221;客户乙&#8221; 和&#8221;客户丙&#8221;是单例对象的三个客户对象。可以看到，所有的客户对象共享一个单例对象。而且从单例对象到自身的连接线可以看出，单例对象持有对自己的引用。</p>

<p>资源管理</p>

<p>一些资源管理器常常设计成单例模式。</p>

<p>在计算机系统中，需要管理的资源包括软件外部资源，譬如每台计算机可以有若干个打印机，但只能有一个Printer Spooler， 以避免两个打印作业同时输出到打印机中。每台计算机可以有若干传真卡，但是只应该有一个软件负责管理传真卡，以避免出现两份传真作业同时传到传真卡中的情况。每台计算机可以有若干通信端口，系统应当集中管理这些通信端口，以避免一个通信端口同时被两个请求同时调用。</p>

<p>需要管理的资源包括软件内部资源，譬如，大多数的软件都有一个（甚至多个）属性（properties）文件存放系统配置。这样的系统应当由一个对象来管理一个属性文件。</p>

<p>需要管理的软件内部资源也包括譬如负责记录网站来访人数的部件，记录软件系统内部事件、出错信息的部件，或是对系统的表现进行检查的部件等。这些部件都必须集中管理，不可政出多头。</p>

<p>这些资源管理器构件必须只有一个实例，这是其一；它们必须自行初始化，这是其二；允许整个系统访问自己这是其三。因此，它们都满足单例模式的条件，是单例模式的应用。</p>

<p>一个例子：Windows 回收站</p>

<p>Windows 9x 以后的视窗系统中都有一个回收站，下图就显示了Windows 2000 的回收站。</p>

<p>在整个视窗系统中，回收站只能有一个实例，整个系统都使用这个惟一的实例，而且回收站自行提供自己的实例。因此，回收站是单例模式的应用。</p>

<p>双重检查成例</p>

<p>在本章最后的附录里研究了双重检查成例。双重检查成例与单例模式并无直接的关系，但是由于很多C 语言设计师在单例模式里面使用双重检查成例，所以这一做法也被很多Java 设计师所模仿。因此，本书在附录里提醒读者，双重检查成例在Java 语言里并不能成立，详情请见本章的附录。
单例模式的结构</p>

<p>单例模式有以下的特点：</p>

<ul>
<li><p>单例类只可有一个实例。</p></li>
<li><p>单例类必须自己创建自己这惟一的实例。</p></li>
<li><p>单例类必须给所有其他对象提供这一实例。</p></li>
</ul>


<p>虽然单例模式中的单例类被限定只能有一个实例，但是单例模式和单例类可以很容易被推广到任意且有限多个实例的情况，这时候称它为多例模式（Multiton Pattern） 和多例类（Multiton Class），请见&#8221;专题：多例（Multiton ）模式与多语言支持&#8221;一章。单例类的简略类图如下所示。</p>

<p>由于Java 语言的特点，使得单例模式在Java 语言的实现上有自己的特点。这些特点主要表现在单例类如何将自己实例化上。</p>

<p>饿汉式单例类饿汉式单例类是在Java 语言里实现得最为简便的单例类，下面所示的类图描述了一个饿汉式单例类的典型实现。</p>

<p>从图中可以看出，此类已经自已将自己实例化。</p>

<p>代码清单1：饿汉式单例类</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EagerSingleton</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">EagerSingleton</span> <span class="n">m_instance</span> <span class="o">=</span>
</span><span class='line'><span class="k">new</span> <span class="nf">EagerSingleton</span><span class="o">();</span>
</span><span class='line'><span class="cm">/** </span>
</span><span class='line'><span class="cm">* 私有的默认构造子 </span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">private</span> <span class="nf">EagerSingleton</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'><span class="cm">/** </span>
</span><span class='line'><span class="cm">* 静态工厂方法 </span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">EagerSingleton</span> <span class="nf">getInstance</span><span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'><span class="k">return</span> <span class="n">m_instance</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>读者可以看出，在这个类被加载时，静态变量m_instance 会被初始化，此时类的私有构造子会被调用。这时候，单例类的惟一实例就被创建出来了。</p>

<p>Java 语言中单例类的一个最重要的特点是类的构造子是私有的，从而避免外界利用构造子直接创建出任意多的实例。值得指出的是，由于构造子是私有的，因此，此类不能被继承。</p>

<p>懒汉式单例类</p>

<p>与饿汉式单例类相同之处是，类的构造子是私有的。与饿汉式单例类不同的是，懒汉式单例类在第一次被引用时将自己实例化。如果加载器是静态的，那么在懒汉式单例类被加载时不会将自己实例化。如下图所示，类图中给出了一个典型的饿汉式单例类实现。</p>

<p>代码清单2：懒汉式单例类</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">javapatterns</span><span class="o">.</span><span class="na">singleton</span><span class="o">.</span><span class="na">demos</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LazySingleton</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">LazySingleton</span>
</span><span class='line'><span class="n">m_instance</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">* 私有的默认构造子，保证外界无法直接实例化</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">private</span> <span class="nf">LazySingleton</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">* 静态工厂方法，返还此类的惟一实例</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">synchronized</span> <span class="kd">public</span> <span class="kd">static</span> <span class="n">LazySingleton</span>
</span><span class='line'><span class="nf">getInstance</span><span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">m_instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'><span class="n">m_instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LazySingleton</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">m_instance</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>读者可能会注意到，在上面给出懒汉式单例类实现里对静态工厂方法使用了同步化，以处理多线程环境。有些设计师在这里建议使用所谓的&#8221;双重检查成例&#8221;。必须指出的是，&#8221;双重检查成例&#8221;不可以在Java 语言中使用。不十分熟悉的读者，可以看看后面给出的小节。</p>

<p>同样，由于构造子是私有的，因此，此类不能被继承。饿汉式单例类在自己被加载时就将自己实例化。即便加载器是静态的，在饿汉式单例类被加载时仍会将自己实例化。单从资源利用效率角度来讲，这个比懒汉式单例类稍差些。</p>

<p>从速度和反应时间角度来讲，则比懒汉式单例类稍好些。然而，懒汉式单例类在实例化时， 必须处理好在多个线程同时首次引用此类时的访问限制问题，特别是当单例类作为资源控制器，在实例化时必然涉及资源初始化，而资源初始化很有可能耗费时间。这意味着出现多线程同时首次引用此类的机率变得较大。</p>

<p>饿汉式单例类可以在Java 语言内实现， 但不易在C++ 内实现，因为静态初始化在C++ 里没有固定的顺序，因而静态的m_instance 变量的初始化与类的加载顺序没有保证，可能会出问题。这就是为什么GoF 在提出单例类的概念时，举的例子是懒汉式的。他们的书影响之大，以致Java 语言中单例类的例子也大多是懒汉式的。实际上，本书认为饿汉式单例类更符合Java 语言本身的特点。</p>

<p>登记式单例类</p>

<p>登记式单例类是GoF 为了克服饿汉式单例类及懒汉式单例类均不可继承的缺点而设计的。本书把他们的例子翻译为Java 语言，并将它自己实例化的方式从懒汉式改为饿汉式。只是它的子类实例化的方式只能是懒汉式的， 这是无法改变的。如下图所示是登记式单例类的一个例子，图中的关系线表明，此类已将自己实例化。</p>

<p>代码清单3：登记式单例类</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RegSingleton</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'><span class="kd">static</span> <span class="kd">private</span> <span class="n">HashMap</span> <span class="n">m_registry</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">();</span>
</span><span class='line'><span class="kd">static</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'><span class="n">RegSingleton</span> <span class="n">x</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RegSingleton</span><span class="o">();</span>
</span><span class='line'><span class="n">m_registry</span><span class="o">.</span><span class="na">put</span><span class="o">(</span> <span class="n">x</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="err">，</span> <span class="n">x</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">* 保护的默认构造子</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">protected</span> <span class="nf">RegSingleton</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">* 静态工厂方法，返还此类惟一的实例</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">static</span> <span class="kd">public</span> <span class="n">RegSingleton</span> <span class="nf">getInstance</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">name</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;com.javapatterns.singleton.demos.RegSingleton&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">m_registry</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">)</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'><span class="k">try</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'><span class="n">m_registry</span><span class="o">.</span><span class="na">put</span><span class="o">(</span> <span class="n">name</span><span class="err">，</span>
</span><span class='line'><span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="n">name</span><span class="o">).</span><span class="na">newInstance</span><span class="o">()</span> <span class="o">)</span> <span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Error happened.&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">return</span> <span class="o">(</span><span class="n">RegSingleton</span><span class="o">)</span> <span class="o">(</span><span class="n">m_registry</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">)</span> <span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">* 一个示意性的商业方法</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">about</span><span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'><span class="k">return</span> <span class="s">&quot;Hello， I am RegSingleton.&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>它的子类RegSingletonChild 需要父类的帮助才能实例化。下图所示是登记式单例类子类的一个例子。图中的关系表明，此类是由父类将子类实例化的。</p>

<p>下面是子类的源代码。</p>

<p>代码清单4：登记式单例类的子类</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RegSingletonChild</span> <span class="kd">extends</span> <span class="n">RegSingleton</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">RegSingletonChild</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">* 静态工厂方法</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">static</span> <span class="kd">public</span> <span class="n">RegSingletonChild</span> <span class="nf">getInstance</span><span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'><span class="k">return</span> <span class="o">(</span><span class="n">RegSingletonChild</span><span class="o">)</span>
</span><span class='line'><span class="n">RegSingleton</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span>
</span><span class='line'><span class="s">&quot;com.javapatterns.singleton.demos.RegSingletonChild&quot;</span> <span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">* 一个示意性的商业方法</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">about</span><span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'><span class="k">return</span> <span class="s">&quot;Hello， I am RegSingletonChild.&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在GoF 原始的例子中，并没有getInstance() 方法，这样得到子类必须调用的getInstance(String name)方法并传入子类的名字，因此很不方便。本章在登记式单例类子类的例子里，加入了getInstance() 方法，这样做的好处是RegSingletonChild 可以通过这个方法，返还自已的实例。而这样做的缺点是，由于数据类型不同，无法在RegSingleton 提供这样一个方法。由于子类必须允许父类以构造子调用产生实例，因此，它的构造子必须是公开的。这样一来，就等于允许了以这样方式产生实例而不在父类的登记中。这是登记式单例类的一个缺点。</p>

<p>GoF 曾指出，由于父类的实例必须存在才可能有子类的实例，这在有些情况下是一个浪费。这是登记式单例类的另一个缺点。</p>

<p>GoF 曾指出，由于父类的实例必须存在才可能有子类的实例，这在有些情况下是一个浪费。这是登记式单例类的另一个缺点。</p>

<p>在什么情况下使用单例模式</p>

<p>使用单例模式的条件</p>

<p>使用单例模式有一个很重要的必要条件：</p>

<p>在一个系统要求一个类只有一个实例时才应当使用单例模式。反过来说，如果一个类可以有几个实例共存，那么就没有必要使用单例类。但是有经验的读者可能会看到很多不当地使用单例模式的例子，可见做到上面这一点并不容易，下面就是一些这样的情况。</p>

<p>例子一</p>

<p>问：我的一个系统需要一些&#8221;全程&#8221;变量。学习了单例模式后，我发现可以使用一个单例类盛放所有的&#8221;全程&#8221;变量。请问这样做对吗？</p>

<p>答：这样做是违背单例模式的用意的。单例模式只应当在有真正的&#8221;单一实例&#8221;的需求时才可使用。</p>

<p>一个设计得当的系统不应当有所谓的&#8221;全程&#8221;变量，这些变量应当放到它们所描述的实体所对应的类中去。将这些变量从它们所描述的实体类中抽出来， 放到一个不相干的单例类中去，会使得这些变量产生错误的依赖关系和耦合关系。</p>

<p>例子二</p>

<p>问：我的一个系统需要管理与数据库的连接。学习了单例模式后，我发现可以使用一个单例类包装一个Connection 对象，并在finalize（）方法中关闭这个Connection 对象。这样的话，在这个单例类的实例没有被人引用时，这个finalize（）对象就会被调用，因此，Connection 对象就会被释放。这多妙啊。</p>

<p>答：这样做是不恰当的。除非有单一实例的需求，不然不要使用单例模式。在这里Connection 对象可以同时有几个实例共存，不需要是单一实例。</p>

<p>单例模式有很多的错误使用案例都与此例子相似，它们都是试图使用单例模式管理共享资源的生命周期，这是不恰当的。</p>

<p>单例类的状态</p>

<p>有状态的单例类</p>

<p>一个单例类可以是有状态的（stateful），一个有状态的单例对象一般也是可变（mutable） 单例对象。</p>

<p>有状态的可变的单例对象常常当做状态库（repositary）使用。比如一个单例对象可以持有一个int 类型的属性，用来给一个系统提供一个数值惟一的序列号码，作为某个贩卖系统的账单号码。当然，一个单例类可以持有一个聚集，从而允许存储多个状态。</p>

<p>没有状态的单例类</p>

<p>另一方面，单例类也可以是没有状态的（stateless），仅用做提供工具性函数的对象。既然是为了提供工具性函数，也就没有必要创建多个实例，因此使用单例模式很合适。一个没有状态的单例类也就是不变（Immutable） 单例类； 关于不变模式，读者可以参见本书的&#8221;不变（Immutable ）模式&#8221;一章。</p>

<p>多个JVM 系统的分散式系统</p>

<p>EJB 容器有能力将一个EJB 的实例跨过几个JVM 调用。由于单例对象不是EJB，因此，单例类局限于某一个JVM 中。换言之，如果EJB 在跨过JVM 后仍然需要引用同一个单例类的话，这个单例类就会在数个JVM 中被实例化，造成多个单例对象的实例出现。一个J2EE应用系统可能分布在数个JVM 中，这时候不一定需要EJB 就能造成多个单例类的实例出现在不同JVM 中的情况。</p>

<p>如果这个单例类是没有状态的，那么就没有问题。因为没有状态的对象是没有区别的。但是如果这个单例类是有状态的，那么问题就来了。举例来说，如果一个单例对象可以持有一个int 类型的属性，用来给一个系统提供一个数值惟一的序列号码，作为某个贩卖系统的账单号码的话，用户会看到同一个号码出现好几次。</p>

<p>在任何使用了EJB、RMI 和JINI 技术的分散式系统中，应当避免使用有状态的单例模式。</p>

<p>多个类加载器</p>

<p>同一个JVM 中会有多个类加载器，当两个类加载器同时加载同一个类时，会出现两个实例。在很多J2EE 服务器允许同一个服务器内有几个Servlet 引擎时，每一个引擎都有独立的类加载器，经有不同的类加载器加载的对象之间是绝缘的。</p>

<p>比如一个J2EE 系统所在的J2EE 服务器中有两个Servlet 引擎：一个作为内网给公司的网站管理人员使用；另一个给公司的外部客户使用。两者共享同一个数据库，两个系统都需要调用同一个单例类。如果这个单例类是有状态的单例类的话，那么内网和外网用户看到的单例对象的状态就会不同。除非系统有协调机制，不然在这种情况下应当尽量避免使用有状态的单例类。</p>
]]></content>
  </entry>
  
</feed>
