<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | 初心]]></title>
  <link href="http://dande618.github.com/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://dande618.github.com/"/>
  <updated>2013-05-27T20:27:33+08:00</updated>
  <id>http://dande618.github.com/</id>
  <author>
    <name><![CDATA[dande618]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Context]]></title>
    <link href="http://dande618.github.com/blog/2013/05/27/android-context/"/>
    <updated>2013-05-27T20:59:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/05/27/android-context</id>
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/qinjuning/article/details/7310620">http://blog.csdn.net/qinjuning/article/details/7310620</a></p>

<p><img src="http://img.my.csdn.net/uploads/201203/1/0_1330607569Vj4c.gif"></p>

<p>Context，中文直译为“上下文”，SDK中对其说明如下：</p>

<blockquote><p>Interface to global information about an application environment. This is an abstract class whose implementation is provided by the Android system. It allows access to application-specific resources and classes, as well as up-calls for application-level operations such as launching activities, broadcasting and receiving intents, etc.</p></blockquote>

<p>从上可知一下三点,即：</p>

<ol>
<li><p>它描述的是一个应用程序环境的信息，即上下文。</p></li>
<li><p>该类是一个抽象(abstract class)类，Android提供了该抽象类的具体实现类(后面我们会讲到是ContextIml类)。</p></li>
<li><p>通过它我们可以获取应用程序的资源和类，也包括一些应用级别操作，例如：启动一个Activity，发送广播，接受Intent信息 等。。</p></li>
</ol>


<p>于是，我们可以利用该Context对象去构建应用级别操作(application-level operations) 。</p>

<p><strong>Context类</strong>    路径： /frameworks/base/core/java/android/content/Context.java</p>

<p>说明：  抽象类，提供了一组通用的API。</p>

<p>源代码(部分)如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Context</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="c1">//...</span>
</span><span class='line'> <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">Object</span> <span class="nf">getSystemService</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">);</span>  <span class="c1">//获得系统级服务</span>
</span><span class='line'> <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">startActivity</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">);</span>     <span class="c1">//通过一个Intent启动Activity</span>
</span><span class='line'> <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">ComponentName</span> <span class="nf">startService</span><span class="o">(</span><span class="n">Intent</span> <span class="n">service</span><span class="o">);</span>  <span class="c1">//启动Service</span>
</span><span class='line'> <span class="c1">//根据文件名得到SharedPreferences对象</span>
</span><span class='line'> <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">SharedPreferences</span> <span class="nf">getSharedPreferences</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span><span class="kt">int</span> <span class="n">mode</span><span class="o">);</span>
</span><span class='line'> <span class="c1">//...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Activity类 、Service类 、Application类本质上都是Context子类。</p>

<p>应用程序创建Context实例的情况有如下几种情况：</p>

<ol>
<li><p>创建Application对象时， 而且整个App共一个Application对象</p></li>
<li><p>创建Service对象时</p></li>
<li><p>创建Activity对象时</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android Service]]></title>
    <link href="http://dande618.github.com/blog/2013/05/26/android-service/"/>
    <updated>2013-05-26T19:00:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/05/26/android-service</id>
    <content type="html"><![CDATA[<p>android中服务是运行在后台的东西，级别与activity差不多。既然说service是运行在后台的服务，那么它就是不可见的，没有界面的东西。你可以启动一个服务Service来播放音乐，或者记录你地理信息位置的改变，或者启动一个服务来运行并一直监听某种动作。</p>

<p>Service和其他组件一样，都是运行在主线程中，因此不能用它来做耗时的请求或者动作。你可以在服务中开一一个线程，在线程中做耗时动作。</p>

<p><a href="http://www.cnblogs.com/zhangdongzi/archive/2012/01/08/2316711.html">http://www.cnblogs.com/zhangdongzi/archive/2012/01/08/2316711.html</a></p>

<!-- more -->


<h2>如何使用Service</h2>

<p>使用Service，需要定义一个继承android.app.Service的子类；</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestService</span> <span class="kd">extends</span> <span class="n">Service</span> <span class="o">{}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>然后在AndroidManifest.xml文件中的<application>节点里对服务进行配置:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;service</span> <span class="na">android:name=</span><span class="s">&quot;.TestService&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>并通过调用Context.startService()或Context.bindService()方法启动服务。</p>

<ol>
<li><p>使用startService()方法启用服务，调用者与服务之间没有关连，即使调用者退出了，服务仍然运行。</p></li>
<li><p>使用bindService()方法启用服务，调用者与服务绑定在了一起，调用者一旦退出，服务也就终止。</p></li>
</ol>


<p>服务一般分为这两种：</p>

<ol>
<li><p>本地服务， Local Service 用于应用程序内部。在Service可以调用Context.startService()启动，调用Context.stopService()结束。在内部可以调用Service.stopSelf() 或 Service.stopSelfResult()来自己停止。无论调用了多少次startService()，都只需调用一次stopService()来停止。</p></li>
<li><p>远程服务， Remote Service 用于android系统内部的应用程序之间。可以定义接口并把接口暴露出来，以便其他应用进行操作。客户端建立到服务对象的连接，并通过那个连接来调用服务。调用Context.bindService()方法建立连接，并启动，以调用 Context.unbindService()关闭连接。多个客户端可以绑定至同一个服务。如果服务此时还没有加载，bindService()会先加载它。</p></li>
</ol>


<p>提供给可被其他应用复用，比如定义一个天气预报服务，提供与其他应用调用即可。</p>

<h2>Service的生命周期</h2>

<p><img class="center" src="http://img.my.csdn.net/uploads/201203/20/0_13322041884wH4.gif"></p>

<p>context.startService() -> onCreate() -> onStart() -> Service running -- 调用context.stopService() -> onDestroy()</p>

<p>context.bindService() -> onCreate() -> onBind() -> Service running -- 调用>onUnbind() -> onDestroy()</p>

<ul>
<li><p>onCreate() 该方法在服务被创建时调用，该方法只会被调用一次，无论调用多少次startService()或bindService()方法，服务也只被创建一次。 onDestroy()该方法在服务被终止时调用。</p></li>
<li><p>onStart() 只有采用Context.startService()方法启动服务时才会回调该方法。该方法在服务开始运行时被调用。多次调用startService()方法尽管不会多次创建服务，但onStart() 方法会被多次调用。</p></li>
<li><p>onBind()只有采用Context.bindService()方法启动服务时才会回调该方法。该方法在调用者与服务绑定时被调用，当调用者与服务已经绑定，多次调用Context.bindService()方法并不会导致该方法被多次调用。onUnbind()只有采用Context.bindService()方法启动服务时才会回调该方法。该方法在调用者与服务解除绑定时被调用。</p></li>
</ul>


<p>1 采用startService()启动服务</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">DemoActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="n">DemoService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'> <span class="n">startService</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>2 采用bindService()启动</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">DemoActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="n">DemoService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">bindService</span><span class="o">(</span><span class="n">intent</span><span class="o">,</span> <span class="n">conn</span><span class="o">,</span> <span class="n">Context</span><span class="o">.</span><span class="na">BIND_AUTO_CREATE</span><span class="o">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="c1">//unbindService(conn);//解除绑定</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><a href="http://blog.csdn.net/bobbybear/article/details/7798043">http://blog.csdn.net/bobbybear/article/details/7798043</a></p>

<h2>intentService的使用</h2>

<p><a href="http://android.tgbus.com/Android/tutorial/201106/355229.shtml">http://android.tgbus.com/Android/tutorial/201106/355229.shtml</a></p>

<p><a href="http://rainbow702.iteye.com/blog/1143286">http://rainbow702.iteye.com/blog/1143286</a></p>

<p>IntentService是Service类的子类，用来处理异步请求。客户端可以通过startService(Intent)方法传递请求给IntentService，IntentService通过worker thread处理每个Intent对象，执行完所有的工作之后自动停止Service。</p>

<p>说明：worker thread处理所有通过传递过来的请求，创建一个worker queue，一次只传递一个intent到onHandleIntent中，从而不必担心多线程带来的问题。处理完毕之后自动调用stopSelf()方法；默认实现了Onbind()方法，返回值为null；</p>

<p>模式实现了OnStartCommand()方法，这个方法会放到worker queue中，然后在onHandleIntent()中执行。</p>

<p>使用IntentService需要两个步骤：</p>

<ol>
<li><p>写构造函数</p></li>
<li><p>复写onHandleIntent()方法</p></li>
</ol>


<p>好处：处理异步请求的时候可以减少写代码的工作量，比较轻松地实现项目的需求</p>

<h2>与Service通信的方法</h2>

<p><a href="http://zhangyan1158.blog.51cto.com/2487362/491358">http://zhangyan1158.blog.51cto.com/2487362/491358</a></p>

<p>在android中Activity负责前台界面展示，service负责后台的需要长期运行的任务。Activity和Service之间的通信主要由IBinder负责。在需要和Service通信的Activity中实现ServiceConnection接口，并且实现其中的onServiceConnected和onServiceDisconnected方法。然后在这个Activity中还要通过如下代码绑定服务:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">().</span><span class="na">setClass</span><span class="o">(</span><span class="k">this</span><span class="o">,</span><span class="n">IHRService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">bindService</span><span class="o">(</span><span class="n">intent</span><span class="o">,</span><span class="k">this</span><span class="o">,</span><span class="n">Context</span><span class="o">.</span><span class="na">BIND_AUTO_CREATE</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>当调用bindService方法后就会回调Activity的onServiceConnected，在这个方法中会向Activity中传递一个IBinder的实例，Acitity需要保存这个实例。代码如下:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onServiceConnected</span><span class="o">(</span> <span class="n">ComponentName</span> <span class="n">inName</span> <span class="o">,</span> <span class="n">IBinder</span> <span class="n">serviceBinder</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">(</span> <span class="n">inName</span><span class="o">.</span><span class="na">getShortClassName</span><span class="o">().</span><span class="na">endsWith</span><span class="o">(</span> <span class="s">&quot;IHRService&quot;</span> <span class="o">)</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">serviceBinder</span><span class="o">=</span> <span class="n">serviceBinder</span><span class="o">;</span>
</span><span class='line'>    <span class="n">mService</span> <span class="o">=</span> <span class="o">(</span> <span class="o">(</span><span class="n">IHRService</span><span class="o">.</span><span class="na">MyBinder</span><span class="o">)</span> <span class="n">serviceBinder</span><span class="o">).</span><span class="na">getService</span><span class="o">();</span>
</span><span class='line'>    <span class="c1">//mTracker = mService.mConfiguration.mTracker;  </span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在Service中需要创建一个实现IBinder的内部类(这个内部类不一定在Service中实现，但必须在Service中创建它)。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyBinder</span> <span class="kd">extends</span> <span class="n">Binder</span> <span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="c1">//此方法是为了可以在Acitity中获得服务的实例&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="n">IHRService</span> <span class="n">getService</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">IHRService</span><span class="o">.</span><span class="na">this</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//这个方法主要是接收Activity发向服务的消息，data为发送消息时向服务传入的对象，replay是由服务返回的对象&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">boolean</span> <span class="n">onTransact</span><span class="o">(</span> <span class="kt">int</span> <span class="n">code</span> <span class="o">,</span> <span class="n">Parcel</span> <span class="n">data</span> <span class="o">,</span> <span class="n">Parcel</span> <span class="n">reply</span> <span class="o">,</span> <span class="kt">int</span> <span class="n">flags</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//called when client calls transact on returned Binder  </span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">handleTransactions</span><span class="o">(</span> <span class="n">code</span> <span class="o">,</span> <span class="n">data</span> <span class="o">,</span> <span class="n">reply</span> <span class="o">,</span> <span class="n">flags</span> <span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>然后在Service中创建这个类的实例：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">IBinder</span> <span class="nf">onBind</span><span class="o">(</span> <span class="n">Intent</span> <span class="n">intent</span> <span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">IBinder</span> <span class="n">result</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span> <span class="kc">null</span> <span class="o">==</span> <span class="n">result</span> <span class="o">)</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyBinder</span><span class="o">();</span>
</span><span class='line'><span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这时候如果Activity向服务发送消息，就可以调用如下代码向服务端发送消息：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">inSend</span> <span class="o">=</span> <span class="n">Parcel</span><span class="o">.</span><span class="na">obtain</span><span class="o">();</span>
</span><span class='line'><span class="n">serviceBinder</span><span class="o">.</span><span class="na">transact</span><span class="o">(</span> <span class="n">inCode</span> <span class="o">,</span> <span class="n">inSend</span> <span class="o">,</span> <span class="kc">null</span> <span class="o">,</span> <span class="n">IBinder</span><span class="o">.</span><span class="na">FLAG_ONEWAY</span> <span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这种方式是只向服务端发送消息,没有返回值的。如果需要从服务端返回某些值则可用如下代码：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="n">Parcel</span><span class="o">.</span><span class="na">obtain</span><span class="o">();</span>
</span><span class='line'><span class="n">serviceBinder</span><span class="o">.</span><span class="na">transact</span><span class="o">(</span> <span class="n">inCode</span> <span class="o">,</span> <span class="n">inSend</span> <span class="o">,</span> <span class="n">result</span> <span class="o">,</span> <span class="mi">0</span> <span class="o">);</span>
</span><span class='line'><span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>发送消息后IBinder接口中的onTransact将会被调用。在服务中如果有结果返回(比如下载数据)则将结果写入到result参数中。在Activity中从result中读取服务执行的结果。</p>

<p>上面只是描述了如何由Acitity向Service发送消息，如果Service向Activity发送消息则可借助于BroadcastReceiver实现。</p>

<h2>跨进程调用Service</h2>

<p>跨进程调用Service，需要先定义一个远程调用接口，然后为该接口提供一个实现类。使用AIDL（Android Interface Definition Language）来定义远程接口。</p>

<ol>
<li><p>在Eclipse Android工程的Java包目录中建立一个扩展名为aidl的文件。该文件的语法类似于Java代码，但会稍有不同。</p></li>
<li><p>如果aidl文件的内容是正确的，ADT会自动生成一个Java接口文件（*.java）。</p></li>
<li><p>建立一个服务类（Service的子类）。</p></li>
<li><p>实现由aidl文件生成的Java接口。</p></li>
<li><p>在AndroidManifest.xml文件中配置AIDL服务，尤其要注意的是，<action>标签中android:name的属性值就是客户端要引用该服务的ID，也就是Intent类的参数值。</p></li>
</ol>


<h2>调用系统Service</h2>

<h3>Android电话信息相关API</h3>

<p><a href="http://blog.csdn.net/leixingjing/article/details/6860337">http://blog.csdn.net/leixingjing/article/details/6860337</a></p>

<p>Android平台提供的电话信息系统管理功能，主要包括：获取电话信息（设备信息、SIM信息以及网络信息）、侦听电话状态（呼叫状态、服务状态、信号强度状态等）和调用电话拨号器。</p>

<h3>TelephoneManager类</h3>

<p>在Manifest中添加Permission ：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;uses-permission android:name="android.permission.READ_PHONE_STATE" /></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//TelephonyManager的获得：</span>
</span><span class='line'><span class="n">TelephonyManager</span> <span class="n">tm</span> <span class="o">=</span> <span class="o">(</span><span class="n">TelephonyManager</span><span class="o">)</span> <span class="k">this</span><span class="o">.</span><span class="na">getSystemService</span><span class="o">(</span><span class="n">TELEPHONY_SERVICE</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>SmsManager</h3>

<p>在Manifest中添加Permission ：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.SEND_SMS&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">SmsManager</span> <span class="n">manager</span> <span class="o">=</span> <span class="n">SmsManager</span><span class="o">.</span><span class="na">getDefault</span><span class="o">();</span>   <span class="c1">//获得默认的消息管理器</span>
</span><span class='line'><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">manager</span><span class="o">.</span><span class="na">divideMessage</span><span class="o">(</span><span class="n">String</span> <span class="n">txt</span><span class="o">);</span>  <span class="c1">//拆分长短信</span>
</span><span class='line'><span class="n">manager</span><span class="o">.</span><span class="na">sendTextMessage</span><span class="o">(</span><span class="n">String</span> <span class="n">phone</span><span class="o">,</span><span class="kc">null</span><span class="o">,</span><span class="n">String</span> <span class="n">content</span><span class="o">,</span><span class="kc">null</span><span class="o">,</span><span class="kc">null</span><span class="o">);</span>  <span class="c1">//发送短信</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><a href="http://home.cnblogs.com/group/topic/49026.html">http://home.cnblogs.com/group/topic/49026.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LogCat的用法]]></title>
    <link href="http://dande618.github.com/blog/2013/05/26/log/"/>
    <updated>2013-05-26T16:16:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/05/26/log</id>
    <content type="html"><![CDATA[<p>Logcat是Android中一个命令行工具可以用于得到程序的log信息。</p>

<p><a href="http://weizhulin.blog.51cto.com/1556324/311692">http://weizhulin.blog.51cto.com/1556324/311692</a></p>

<p>android.util.Log常用的方法有以下5个：Log.v() Log.d() Log.i() Log.w() 以及 Log.e() 。根据首字母对应VERBOSE，DEBUG,INFO, WARN，ERROR。</p>

<ol>
<li><p>Log.v 的调试颜色为黑色的，任何消息都会输出，这里的v代表verbose啰嗦的意思，平时使用就是Log.v("","");</p></li>
<li><p>Log.d 的输出颜色是蓝色的，仅输出debug调试的意思，但他会输出上层的信息，过滤起来可以通过DDMS的Logcat标签来选择.</p></li>
<li><p>Log.i 的输出为绿色，一般提示性的消息information，它不会输出Log.v和Log.d的信息，但会显示i、w和e的信息</p></li>
<li><p>Log.w 的意思为橙色，可以看作为warning警告，一般需要我们注意优化Android代码，同时选择它后还会输出Log.e的信息。</p></li>
<li><p>Log.e 为红色，可以想到error错误，这里仅显示红色的错误信息，这些错误就需要我们认真的分析，查看栈的信息了。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android Activity]]></title>
    <link href="http://dande618.github.com/blog/2013/05/24/android-activity/"/>
    <updated>2013-05-24T11:00:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/05/24/android-activity</id>
    <content type="html"><![CDATA[<p>Activity是Android组件中最基本也是最为常见用的四大组件之一，通常是一个单独的屏幕，它上面可以显示一些控件也可以监听并处理用户的事件做出响应。Activity之间通过Intent进行通信。</p>

<!-- more -->


<h2>【1】生命周期</h2>

<p><a href="http://blog.csdn.net/liuhe688/article/details/6733407">http://blog.csdn.net/liuhe688/article/details/6733407</a></p>

<p><img class="center" src="http://dl.iteye.com/upload/picture/pic/92402/eec1c58c-4034-3e02-bf24-80300bb08df8.png"></p>

<ol>
<li><p>启动Activity：系统会先调用onCreate方法，然后调用onStart方法，最后调用onResume，Activity进入运行状态。</p></li>
<li><p>当前Activity被其他Activity覆盖其上或被锁屏：系统会调用onPause方法，暂停当前Activity的执行。</p></li>
<li><p>当前Activity由被覆盖状态回到前台或解锁屏：系统会调用onResume方法，再次进入运行状态。</p></li>
<li><p>当前Activity转到新的Activity界面或按Home键回到主屏，自身退居后台：系统会先调用onPause方法，然后调用onStop方法，进入停滞状态。</p></li>
<li><p>用户后退回到此Activity：系统会先调用onRestart方法，然后调用onStart方法，最后调用onResume方法，再次进入运行状态。</p></li>
<li><p>当前Activity处于被覆盖状态或者后台不可见状态，即第2步和第4步，系统内存不足，杀死当前Activity，而后用户退回当前Activity：再次调用onCreate方法、onStart方法、onResume方法，进入运行状态。</p></li>
<li><p>用户退出当前Activity：系统先调用onPause方法，然后调用onStop方法，最后调用onDestory方法，结束当前Activity。</p></li>
</ol>


<h2>【2】关于onSaveInstanceState()</h2>

<p><a href="http://www.cnblogs.com/hanyonglu/archive/2012/03/28/2420515.html">http://www.cnblogs.com/hanyonglu/archive/2012/03/28/2420515.html</a></p>

<blockquote><p>Android calls onSaveInstanceState() before the activitybecomes vulnerable to being destroyed by the system, but does not bothercalling it when the instance is actually being destroyed by a user action (suchas pressing the BACK key).</p></blockquote>

<p>当某个activity变得"容易"被系统销毁时，该activity的onSaveInstanceState()就会被执行，除非该activity是被用户主动销毁的，例如当用户按BACK键的时候。
1. 当用户按下HOME键时。</p>

<ol>
<li><p>长按HOME键，选择运行其他的程序时。</p></li>
<li><p>按下电源按键（关闭屏幕显示）时。</p></li>
<li><p>从activity A中启动一个新的activity时。</p></li>
<li><p>屏幕方向切换时，例如从竖屏切换到横屏时。</p></li>
</ol>


<h2>【3】如何将一个Activity设置成窗口样式。</h2>

<p>在AndroidManifext.xml中Activity定义处添加</p>

<p>android:theme="@android:style/Theme.Dialog"</p>

<p>android:theme="@android:style/Theme.Translucent"。 </p>

<p>打开这种Activity时，前一个Activity只调用onPause()方法。</p>

<h2>【4】Activity之间的数据交换</h2>

<p>Activity之间通过Intent进行通信。</p>

<p>比如打开第二个Activity</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ComponentName</span> <span class="n">comp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ComponentName</span><span class="o">(</span><span class="n">MainActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span><span class="n">SecondActivity</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
</span><span class='line'><span class="n">intent</span><span class="o">.</span><span class="na">setComponent</span><span class="o">(</span><span class="n">comp</span><span class="o">);</span>
</span><span class='line'><span class="n">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>可以简化写成</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">MainActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span><span class="n">SecondActivity</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>需要交换的数据需要放入intent里。即调用putExtra("key",value)方法。</p>

<p>或者调用putExtras(Bundle data)放入一个数据便携包</p>

<p>或调用putSerializable(String key,Serializable data)，放入一个可序列化的对象。</p>

<p>实现可传递的对象需要类实现Serializable接口或者Parcelable接口。</p>

<p><a href="http://blog.sina.com.cn/s/blog_6321ab240100ssxp.html">http://blog.sina.com.cn/s/blog_6321ab240100ssxp.html</a></p>

<h3>启动其他Activity并返回结果</h3>

<p>使用startActivityForResult(Intent intent,int requestCode)方法来启动其他Activity，并获取第二个Activity返回的结果。</p>

<ul>
<li><p>第一个Activity需要重写 onActivityResult(int requestCode, int resultCode, Intent data)；</p></li>
<li><p>在第二个Activity里调用setResut(int resultCode, Intent intent)，并finish()关闭Activity；</p></li>
</ul>


<h2>【5】ANR问题</h2>

<p><a href="http://hi.baidu.com/xielingling20/item/882d1cd1176d1c03d90e44e3">http://hi.baidu.com/xielingling20/item/882d1cd1176d1c03d90e44e3</a></p>

<p>anr问题的解析。</p>

<p>在Android中，活动管理器和窗口管理器这两个系统服务负责监视应用程序的响应。当出现下列情况时，Android就会显示ANR对话框了：</p>

<p>对输入事件(如按键、触摸屏事件)的响应超过5秒</p>

<p>意向接受器(intentReceiver)超过10秒钟仍未执行完毕</p>

<p>Android应用程序完全运行在一个独立的线程中(例如main)。这就意味着，任何在主线程中运行的，需要消耗大量时间的操作都会引发ANR。因为此时，你的应用程序已经没有机会去响应输入事件和意向广播(Intent broadcast)。</p>

<p>因此，任何运行在主线程中的方法，都要尽可能的只做少量的工作。特别是活动生命周期中的重要方法如onCreate()和 onResume()等更应如此。潜在的比较耗时的操作，如访问网络和数据库;或者是开销很大的计算，比如改变位图的大小，需要在一个单独的子线程中完成(或者是使用异步请求，如数据库操作)。但这并不意味着你的主线程需要进入阻塞状态已等待子线程结束 -- 也不需要调用Therad.wait()或者Thread.sleep()方法。取而代之的是，主线程为子线程提供一个句柄(Handler)，让子线程在即将结束的时候调用它。使用这种方法涉及你的应用程序，能够保证你的程序对输入保持良好的响应，从而避免因为输入事件超过5秒钟不被处理而产生的ANR。这种实践需要应用到所有显示用户界面的线程，因为他们都面临着同样的超时问题。</p>

<p>1、 什么是ANR？</p>

<p>ANR:Application Not Responding，即应用无响应，就是说应用程序在5S内没有响应。</p>

<p>2、 为什么会ANR？</p>

<p>（1）当前的事物发生堵塞，没有被执行。比如说UI线程中处理耗时的操作，发生线程的堵塞</p>

<p>（2）当前事物正在被执行，而没有被完全执行。</p>

<p>3、 ANR的分类：</p>

<p>（1）按键或触摸事件在5S内没有响应</p>

<p>（2）BroadcastReceiver在特定时间内无法处理完成（BroadcastTimeout）</p>

<p>（3）Service在特定的时间内无法处理完成（ServiceTimeout）</p>

<p>4、 如何尽量去避免 ANR 的出现</p>

<p>一般ANR多是因为线程堵塞照成的，比如说UI线程去处理很耗时的操作（数据库，网络的连接，下载等类似的操作），所以要避免此类问题的出现。</p>

<p>（1）UI线程尽量只做跟UI相关的工作。</p>

<p>（2）耗时的操作可以开启一个新的线程，或者是后台去处理。</p>

<p>5、 有哪些UI线程？</p>

<p>Activity:onCreate(), onResume(), onDestroy(), onKeyDown(), onClick()</p>

<p>AsyncTask: onPreExecute(), onProgressUpdate(), onPostExecute(), onCancel,</p>

<p>Mainthread handler: handleMessage(), post*(runnable r)</p>

<p>子线程：</p>

<p>Thread，intentservice、Asynctask</p>

<h2>【6】使用Activity应该注意的问题</h2>

<p>Activity几乎承接着用户对应用程序（Application）的所有操作，可以通过主题（Theme）改变样子的。</p>

<ul>
<li><p>Activity应该要注意它的生命周期（Lifecycle）、设备状态（Configuration）改变时的影响以及运行状态和数据的保存，这个在一个应用程序是否可靠和人性化上至关重要。</p></li>
<li><p>Activity里还应该要申明一些许可（Permissions），以便使用Android的一些软硬件功能，这些申明可以由代码或者Manifest.xml给出。</p></li>
<li><p>每个Activity（的入口）一定要在Manifest当中申明。</p></li>
<li><p>耗时的操作应该放在UI线程外的其他线程里，以防阻塞操作。如在非UI线程更新UI需要使用Handler</p></li>
<li><p>继承Activity，覆盖各个方法时需要注意调用super父类中的相同方法。</p></li>
<li><p>要考虑多分辨率。至少为hdpi, mdpi, ldpi准备图片和布局。元素的单位也尽可能的使用dip而不要用px。</p></li>
<li><p>考虑国际化和资源自适应。文本文字应该写入strings.xml并实现国际化。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android studio 安装无法打开]]></title>
    <link href="http://dande618.github.com/blog/2013/05/23/android-studio/"/>
    <updated>2013-05-23T23:01:00+08:00</updated>
    <id>http://dande618.github.com/blog/2013/05/23/android-studio</id>
    <content type="html"><![CDATA[<p>最近谷歌发布了Android Studio，是一个全新的Android开发环境，基于IntelliJIDEA。可以作为替代eclispe+adt的开发环境。</p>

<p>下载地址 <a href="http://developer.android.com/sdk/installing/studio.html">http://developer.android.com/sdk/installing/studio.html</a></p>

<!-- more -->


<p>现在是0.1版，编写布局文件实时预览并适配多屏的功能是亮点。</p>

<p>但是安装后出现可打开程序无反应的情况，似乎是系统变量中JAVA_HOME、CLASSPATH、PATH的配置问题。</p>

<p>但修改后也没有解决。。最后重新安装JDK1.7后就没问题了（原来是1.6）。</p>
]]></content>
  </entry>
  
</feed>
