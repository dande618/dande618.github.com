---
layout: post
title: "【摘抄】JAVA多线程"
date: 2013-03-01 22:22
comments: true
categories: java
---
<!-- more -->
一个进程就是一个执行中的程序，而每一个进程都有自己独立的一块内存空间、一组系统资源。在进程概念中，每一个进程的内部数据和状态都是完全独立的。

线程与进程相似，是一段完成某个特定功能的代码，是程序中单个顺序的流控制；但与进程不同的是，同类的多个线程是共享一块内存空间和一组系统资源，而线程本身的数据通常只有微处理器的寄存器数据，以及一个供程序执行时使用的堆栈。所以系统在产生一个线程，或者在各个线程之间切换时，负担要比进程小的多，正因如此，线程被称为轻负荷进程（light-weight process）。一个进程中可以包含多个线程。

一个线程是一个程序内部的顺序控制流。

1. 进程：每个进程都有独立的代码和数据空间（进程上下文），进程切换的开销大。

2. 线程：轻量的进程，同一类线程共享代码和数据空间，每个线程有独立的运行栈和程序计数器（PC），线程切换的开销小。

3. 多进程：在操作系统中，能同时运行多个任务程序。

4. 多线程：在同一应用程序中，有多个顺序流同时执行。

Java的线程是通过java.lang.Thread类来实现的。当我们生成一个Thread类的对象之后,一个新的线程就产生了。 

任何实现接口Runnable的对象都可以作为一个线程的目标对象，类Thread本身也实现了接口Runnable，因此我们可以通过两种方法实现线程体。

（一）定义一个线程类，它继承线程类Thread并重写其中的方法 run（），这时在初始化这个类的实例时，目标target可为null，表示由这个实例对来执行线程体。由于Java只支持单重继承，用这种方法定义的类不能再继承其它父类。

（二）提供一个实现接口Runnable的类作为一个线程的目标对象，在初始化一个Thread类或者Thread子类的线程对象时，把目标对象传递给这个线程实例，由该目标对象提供线程体 run（）。这时，实现接口Runnable的类仍然可以继承其它父类。

每个线程都是通过某个特定Thread对象的方法run( )来完成其操作的，方法run( )称为线程体。

1. 创建状态(new Thread)

执行下列语句时，线程就处于创建状态：

Thread myThread = new MyThreadClass( );

当一个线程处于创建状态时，它仅仅是一个空的线程对象，系统不为它分配资源。

2. 可运行状态( Runnable )

Thread myThread = new MyThreadClass( );

myThread.start( );

当一个线程处于可运行状态时，系统为这个线程分配了它需的系统资源，安排其运行并调用线程运行方法，这样就使得该线程处于可运行( Runnable )状态。需要注意的是这一状态并不是运行中状态（Running )，因为线程也许实际上并未真正运行。由于很多计算机都是单处理器的，所以要在同一时刻运行所有的处于可运行状态的线程是不可能的，Java的运行系统必须实现调度来保证这些线程共享处理器。

3. 不可运行状态（Not Runnable）

进入不可运行状态的原因有如下几条：

1) 调用了sleep（）方法;

2) 调用了suspend（）方法;

3) 为等候一个条件变量，线程调用wait（）方法;

4) 输入输出流中发生线程阻塞;

不可运行状态也称为阻塞状态（Blocked）。因为某种原因（输入/输出、等待消息或其它阻塞情况），系统不能执行线程的状态。这时即使处理器空闲，也不能执行该线程。

4. 死亡状态（Dead）

线程的终止一般可通过两种方法实现：自然撤消（线程执行完）或是被停止（调用stop()方法）。目前不推荐通过调用stop()来终止线程的执行，而是让线程执行完。

1. 使用Runnable接口　

1) 可以将CPU，代码和数据分开，形成清晰的模型;

2) 还可以从其他类继承;

3) 保持程序风格的一致性。

2. 直接继承Thread类

1) 不能再从其他类继承;

2) 编写简单，可以直接操纵线程，无需使用Thread.currentThread()。

##多线程的互斥与同步

###互斥锁

为解决操作的不完整性问题，在Java 语言中，引入了对象互斥锁的概念，来保证共享数据操作的完整性。每个对象都对应于一个可称为" 互斥锁" 的标记，这个标记用来保证在任一时刻，只能有一个线程访问该对象。 关键字synchronized 来与对象的互斥锁联系。当某个对象用synchronized 修饰时，表明该对象在任一时刻只能由一个线程访问。

###多线程的同步

通过运用wait()和notify()方法来实现线程的同步，在同步中还会用到notifyAll()方法，一般来说，每个共享对象的互斥锁存在两个队列，一个是锁等待队列，另一个是锁申请队列，锁申请队列中的第一个线程可以对该共享对象进行操作，而锁等待队列中的线程在某些情况下将移入到锁申请队列。下面比较一下wait()、notify()和notifyAll()方法：

(1) wait,nofity,notifyAll必须在已经持有锁的情况下执行,所以它们只能出现在synchronized作用的范围内，也就是出现在用synchronized修饰的方法或类中。

(2) wait的作用:释放已持有的锁,进入等待队列.

(3) notify的作用:唤醒wait队列中的第一个线程并把它移入锁申请队列.

(4) notifyAll的作用:唤醒wait队列中的所有的线程并把它们移入锁申请队列.